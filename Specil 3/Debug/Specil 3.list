
Specil 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7c8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001200  0800f9c8  0800f9c8  000109c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010bc8  08010bc8  00012250  2**0
                  CONTENTS
  4 .ARM          00000008  08010bc8  08010bc8  00011bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010bd0  08010bd0  00012250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010bd0  08010bd0  00011bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010bd4  08010bd4  00011bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08010bd8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000250  08010e28  00012250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  08010e28  000127d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00012250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6b1  00000000  00000000  0001227e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000470b  00000000  00000000  0002e92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00033040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001178  00000000  00000000  000346d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db9c  00000000  00000000  00035848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f688  00000000  00000000  000633e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010823c  00000000  00000000  00082a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018aca8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072c4  00000000  00000000  0018acec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00191fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000250 	.word	0x20000250
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f9b0 	.word	0x0800f9b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000254 	.word	0x20000254
 800023c:	0800f9b0 	.word	0x0800f9b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <__aeabi_drsub>:
 8000304:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000308:	e002      	b.n	8000310 <__adddf3>
 800030a:	bf00      	nop

0800030c <__aeabi_dsub>:
 800030c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000310 <__adddf3>:
 8000310:	b530      	push	{r4, r5, lr}
 8000312:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000316:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800031a:	ea94 0f05 	teq	r4, r5
 800031e:	bf08      	it	eq
 8000320:	ea90 0f02 	teqeq	r0, r2
 8000324:	bf1f      	itttt	ne
 8000326:	ea54 0c00 	orrsne.w	ip, r4, r0
 800032a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000332:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000336:	f000 80e2 	beq.w	80004fe <__adddf3+0x1ee>
 800033a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000342:	bfb8      	it	lt
 8000344:	426d      	neglt	r5, r5
 8000346:	dd0c      	ble.n	8000362 <__adddf3+0x52>
 8000348:	442c      	add	r4, r5
 800034a:	ea80 0202 	eor.w	r2, r0, r2
 800034e:	ea81 0303 	eor.w	r3, r1, r3
 8000352:	ea82 0000 	eor.w	r0, r2, r0
 8000356:	ea83 0101 	eor.w	r1, r3, r1
 800035a:	ea80 0202 	eor.w	r2, r0, r2
 800035e:	ea81 0303 	eor.w	r3, r1, r3
 8000362:	2d36      	cmp	r5, #54	@ 0x36
 8000364:	bf88      	it	hi
 8000366:	bd30      	pophi	{r4, r5, pc}
 8000368:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800036c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000370:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000374:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x70>
 800037a:	4240      	negs	r0, r0
 800037c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000380:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000384:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000388:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800038c:	d002      	beq.n	8000394 <__adddf3+0x84>
 800038e:	4252      	negs	r2, r2
 8000390:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000394:	ea94 0f05 	teq	r4, r5
 8000398:	f000 80a7 	beq.w	80004ea <__adddf3+0x1da>
 800039c:	f1a4 0401 	sub.w	r4, r4, #1
 80003a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a4:	db0d      	blt.n	80003c2 <__adddf3+0xb2>
 80003a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003aa:	fa22 f205 	lsr.w	r2, r2, r5
 80003ae:	1880      	adds	r0, r0, r2
 80003b0:	f141 0100 	adc.w	r1, r1, #0
 80003b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b8:	1880      	adds	r0, r0, r2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	4159      	adcs	r1, r3
 80003c0:	e00e      	b.n	80003e0 <__adddf3+0xd0>
 80003c2:	f1a5 0520 	sub.w	r5, r5, #32
 80003c6:	f10e 0e20 	add.w	lr, lr, #32
 80003ca:	2a01      	cmp	r2, #1
 80003cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003d0:	bf28      	it	cs
 80003d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	18c0      	adds	r0, r0, r3
 80003dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003e4:	d507      	bpl.n	80003f6 <__adddf3+0xe6>
 80003e6:	f04f 0e00 	mov.w	lr, #0
 80003ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003fa:	d31b      	bcc.n	8000434 <__adddf3+0x124>
 80003fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000400:	d30c      	bcc.n	800041c <__adddf3+0x10c>
 8000402:	0849      	lsrs	r1, r1, #1
 8000404:	ea5f 0030 	movs.w	r0, r0, rrx
 8000408:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800040c:	f104 0401 	add.w	r4, r4, #1
 8000410:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000414:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000418:	f080 809a 	bcs.w	8000550 <__adddf3+0x240>
 800041c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000420:	bf08      	it	eq
 8000422:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000426:	f150 0000 	adcs.w	r0, r0, #0
 800042a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042e:	ea41 0105 	orr.w	r1, r1, r5
 8000432:	bd30      	pop	{r4, r5, pc}
 8000434:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000438:	4140      	adcs	r0, r0
 800043a:	eb41 0101 	adc.w	r1, r1, r1
 800043e:	3c01      	subs	r4, #1
 8000440:	bf28      	it	cs
 8000442:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000446:	d2e9      	bcs.n	800041c <__adddf3+0x10c>
 8000448:	f091 0f00 	teq	r1, #0
 800044c:	bf04      	itt	eq
 800044e:	4601      	moveq	r1, r0
 8000450:	2000      	moveq	r0, #0
 8000452:	fab1 f381 	clz	r3, r1
 8000456:	bf08      	it	eq
 8000458:	3320      	addeq	r3, #32
 800045a:	f1a3 030b 	sub.w	r3, r3, #11
 800045e:	f1b3 0220 	subs.w	r2, r3, #32
 8000462:	da0c      	bge.n	800047e <__adddf3+0x16e>
 8000464:	320c      	adds	r2, #12
 8000466:	dd08      	ble.n	800047a <__adddf3+0x16a>
 8000468:	f102 0c14 	add.w	ip, r2, #20
 800046c:	f1c2 020c 	rsb	r2, r2, #12
 8000470:	fa01 f00c 	lsl.w	r0, r1, ip
 8000474:	fa21 f102 	lsr.w	r1, r1, r2
 8000478:	e00c      	b.n	8000494 <__adddf3+0x184>
 800047a:	f102 0214 	add.w	r2, r2, #20
 800047e:	bfd8      	it	le
 8000480:	f1c2 0c20 	rsble	ip, r2, #32
 8000484:	fa01 f102 	lsl.w	r1, r1, r2
 8000488:	fa20 fc0c 	lsr.w	ip, r0, ip
 800048c:	bfdc      	itt	le
 800048e:	ea41 010c 	orrle.w	r1, r1, ip
 8000492:	4090      	lslle	r0, r2
 8000494:	1ae4      	subs	r4, r4, r3
 8000496:	bfa2      	ittt	ge
 8000498:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800049c:	4329      	orrge	r1, r5
 800049e:	bd30      	popge	{r4, r5, pc}
 80004a0:	ea6f 0404 	mvn.w	r4, r4
 80004a4:	3c1f      	subs	r4, #31
 80004a6:	da1c      	bge.n	80004e2 <__adddf3+0x1d2>
 80004a8:	340c      	adds	r4, #12
 80004aa:	dc0e      	bgt.n	80004ca <__adddf3+0x1ba>
 80004ac:	f104 0414 	add.w	r4, r4, #20
 80004b0:	f1c4 0220 	rsb	r2, r4, #32
 80004b4:	fa20 f004 	lsr.w	r0, r0, r4
 80004b8:	fa01 f302 	lsl.w	r3, r1, r2
 80004bc:	ea40 0003 	orr.w	r0, r0, r3
 80004c0:	fa21 f304 	lsr.w	r3, r1, r4
 80004c4:	ea45 0103 	orr.w	r1, r5, r3
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f1c4 040c 	rsb	r4, r4, #12
 80004ce:	f1c4 0220 	rsb	r2, r4, #32
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 f304 	lsl.w	r3, r1, r4
 80004da:	ea40 0003 	orr.w	r0, r0, r3
 80004de:	4629      	mov	r1, r5
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	fa21 f004 	lsr.w	r0, r1, r4
 80004e6:	4629      	mov	r1, r5
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	f094 0f00 	teq	r4, #0
 80004ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004f2:	bf06      	itte	eq
 80004f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004f8:	3401      	addeq	r4, #1
 80004fa:	3d01      	subne	r5, #1
 80004fc:	e74e      	b.n	800039c <__adddf3+0x8c>
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf18      	it	ne
 8000504:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000508:	d029      	beq.n	800055e <__adddf3+0x24e>
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	d005      	beq.n	8000522 <__adddf3+0x212>
 8000516:	ea54 0c00 	orrs.w	ip, r4, r0
 800051a:	bf04      	itt	eq
 800051c:	4619      	moveq	r1, r3
 800051e:	4610      	moveq	r0, r2
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf1e      	ittt	ne
 8000528:	2100      	movne	r1, #0
 800052a:	2000      	movne	r0, #0
 800052c:	bd30      	popne	{r4, r5, pc}
 800052e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000532:	d105      	bne.n	8000540 <__adddf3+0x230>
 8000534:	0040      	lsls	r0, r0, #1
 8000536:	4149      	adcs	r1, r1
 8000538:	bf28      	it	cs
 800053a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800053e:	bd30      	pop	{r4, r5, pc}
 8000540:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000544:	bf3c      	itt	cc
 8000546:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800054a:	bd30      	popcc	{r4, r5, pc}
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000550:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000554:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000558:	f04f 0000 	mov.w	r0, #0
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000562:	bf1a      	itte	ne
 8000564:	4619      	movne	r1, r3
 8000566:	4610      	movne	r0, r2
 8000568:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800056c:	bf1c      	itt	ne
 800056e:	460b      	movne	r3, r1
 8000570:	4602      	movne	r2, r0
 8000572:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000576:	bf06      	itte	eq
 8000578:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800057c:	ea91 0f03 	teqeq	r1, r3
 8000580:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	bf00      	nop

08000588 <__aeabi_ui2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800059c:	f04f 0500 	mov.w	r5, #0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e750      	b.n	8000448 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_i2d>:
 80005a8:	f090 0f00 	teq	r0, #0
 80005ac:	bf04      	itt	eq
 80005ae:	2100      	moveq	r1, #0
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005c0:	bf48      	it	mi
 80005c2:	4240      	negmi	r0, r0
 80005c4:	f04f 0100 	mov.w	r1, #0
 80005c8:	e73e      	b.n	8000448 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_f2d>:
 80005cc:	0042      	lsls	r2, r0, #1
 80005ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005da:	bf1f      	itttt	ne
 80005dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005e8:	4770      	bxne	lr
 80005ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ee:	bf08      	it	eq
 80005f0:	4770      	bxeq	lr
 80005f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005f6:	bf04      	itt	eq
 80005f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000604:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800060c:	e71c      	b.n	8000448 <__adddf3+0x138>
 800060e:	bf00      	nop

08000610 <__aeabi_ul2d>:
 8000610:	ea50 0201 	orrs.w	r2, r0, r1
 8000614:	bf08      	it	eq
 8000616:	4770      	bxeq	lr
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	f04f 0500 	mov.w	r5, #0
 800061e:	e00a      	b.n	8000636 <__aeabi_l2d+0x16>

08000620 <__aeabi_l2d>:
 8000620:	ea50 0201 	orrs.w	r2, r0, r1
 8000624:	bf08      	it	eq
 8000626:	4770      	bxeq	lr
 8000628:	b530      	push	{r4, r5, lr}
 800062a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800062e:	d502      	bpl.n	8000636 <__aeabi_l2d+0x16>
 8000630:	4240      	negs	r0, r0
 8000632:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000636:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800063a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000642:	f43f aed8 	beq.w	80003f6 <__adddf3+0xe6>
 8000646:	f04f 0203 	mov.w	r2, #3
 800064a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064e:	bf18      	it	ne
 8000650:	3203      	addne	r2, #3
 8000652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000656:	bf18      	it	ne
 8000658:	3203      	addne	r2, #3
 800065a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065e:	f1c2 0320 	rsb	r3, r2, #32
 8000662:	fa00 fc03 	lsl.w	ip, r0, r3
 8000666:	fa20 f002 	lsr.w	r0, r0, r2
 800066a:	fa01 fe03 	lsl.w	lr, r1, r3
 800066e:	ea40 000e 	orr.w	r0, r0, lr
 8000672:	fa21 f102 	lsr.w	r1, r1, r2
 8000676:	4414      	add	r4, r2
 8000678:	e6bd      	b.n	80003f6 <__adddf3+0xe6>
 800067a:	bf00      	nop

0800067c <__aeabi_uldivmod>:
 800067c:	b953      	cbnz	r3, 8000694 <__aeabi_uldivmod+0x18>
 800067e:	b94a      	cbnz	r2, 8000694 <__aeabi_uldivmod+0x18>
 8000680:	2900      	cmp	r1, #0
 8000682:	bf08      	it	eq
 8000684:	2800      	cmpeq	r0, #0
 8000686:	bf1c      	itt	ne
 8000688:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800068c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000690:	f000 b9a4 	b.w	80009dc <__aeabi_idiv0>
 8000694:	f1ad 0c08 	sub.w	ip, sp, #8
 8000698:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800069c:	f000 f840 	bl	8000720 <__udivmoddi4>
 80006a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a8:	b004      	add	sp, #16
 80006aa:	4770      	bx	lr

080006ac <__aeabi_d2lz>:
 80006ac:	b508      	push	{r3, lr}
 80006ae:	4602      	mov	r2, r0
 80006b0:	460b      	mov	r3, r1
 80006b2:	ec43 2b17 	vmov	d7, r2, r3
 80006b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006be:	d403      	bmi.n	80006c8 <__aeabi_d2lz+0x1c>
 80006c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006c4:	f000 b80c 	b.w	80006e0 <__aeabi_d2ulz>
 80006c8:	eeb1 7b47 	vneg.f64	d7, d7
 80006cc:	ec51 0b17 	vmov	r0, r1, d7
 80006d0:	f000 f806 	bl	80006e0 <__aeabi_d2ulz>
 80006d4:	4240      	negs	r0, r0
 80006d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006da:	bd08      	pop	{r3, pc}
 80006dc:	0000      	movs	r0, r0
	...

080006e0 <__aeabi_d2ulz>:
 80006e0:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000710 <__aeabi_d2ulz+0x30>
 80006e4:	ec41 0b17 	vmov	d7, r0, r1
 80006e8:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000718 <__aeabi_d2ulz+0x38>
 80006ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006f4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006f8:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000700:	ee16 1a10 	vmov	r1, s12
 8000704:	ee17 0a90 	vmov	r0, s15
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	f3af 8000 	nop.w
 8000710:	00000000 	.word	0x00000000
 8000714:	3df00000 	.word	0x3df00000
 8000718:	00000000 	.word	0x00000000
 800071c:	41f00000 	.word	0x41f00000

08000720 <__udivmoddi4>:
 8000720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000724:	9d08      	ldr	r5, [sp, #32]
 8000726:	460c      	mov	r4, r1
 8000728:	2b00      	cmp	r3, #0
 800072a:	d14e      	bne.n	80007ca <__udivmoddi4+0xaa>
 800072c:	4694      	mov	ip, r2
 800072e:	458c      	cmp	ip, r1
 8000730:	4686      	mov	lr, r0
 8000732:	fab2 f282 	clz	r2, r2
 8000736:	d962      	bls.n	80007fe <__udivmoddi4+0xde>
 8000738:	b14a      	cbz	r2, 800074e <__udivmoddi4+0x2e>
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	4091      	lsls	r1, r2
 8000740:	fa20 f303 	lsr.w	r3, r0, r3
 8000744:	fa0c fc02 	lsl.w	ip, ip, r2
 8000748:	4319      	orrs	r1, r3
 800074a:	fa00 fe02 	lsl.w	lr, r0, r2
 800074e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000752:	fa1f f68c 	uxth.w	r6, ip
 8000756:	fbb1 f4f7 	udiv	r4, r1, r7
 800075a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800075e:	fb07 1114 	mls	r1, r7, r4, r1
 8000762:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000766:	fb04 f106 	mul.w	r1, r4, r6
 800076a:	4299      	cmp	r1, r3
 800076c:	d90a      	bls.n	8000784 <__udivmoddi4+0x64>
 800076e:	eb1c 0303 	adds.w	r3, ip, r3
 8000772:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000776:	f080 8112 	bcs.w	800099e <__udivmoddi4+0x27e>
 800077a:	4299      	cmp	r1, r3
 800077c:	f240 810f 	bls.w	800099e <__udivmoddi4+0x27e>
 8000780:	3c02      	subs	r4, #2
 8000782:	4463      	add	r3, ip
 8000784:	1a59      	subs	r1, r3, r1
 8000786:	fa1f f38e 	uxth.w	r3, lr
 800078a:	fbb1 f0f7 	udiv	r0, r1, r7
 800078e:	fb07 1110 	mls	r1, r7, r0, r1
 8000792:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000796:	fb00 f606 	mul.w	r6, r0, r6
 800079a:	429e      	cmp	r6, r3
 800079c:	d90a      	bls.n	80007b4 <__udivmoddi4+0x94>
 800079e:	eb1c 0303 	adds.w	r3, ip, r3
 80007a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80007a6:	f080 80fc 	bcs.w	80009a2 <__udivmoddi4+0x282>
 80007aa:	429e      	cmp	r6, r3
 80007ac:	f240 80f9 	bls.w	80009a2 <__udivmoddi4+0x282>
 80007b0:	4463      	add	r3, ip
 80007b2:	3802      	subs	r0, #2
 80007b4:	1b9b      	subs	r3, r3, r6
 80007b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007ba:	2100      	movs	r1, #0
 80007bc:	b11d      	cbz	r5, 80007c6 <__udivmoddi4+0xa6>
 80007be:	40d3      	lsrs	r3, r2
 80007c0:	2200      	movs	r2, #0
 80007c2:	e9c5 3200 	strd	r3, r2, [r5]
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	428b      	cmp	r3, r1
 80007cc:	d905      	bls.n	80007da <__udivmoddi4+0xba>
 80007ce:	b10d      	cbz	r5, 80007d4 <__udivmoddi4+0xb4>
 80007d0:	e9c5 0100 	strd	r0, r1, [r5]
 80007d4:	2100      	movs	r1, #0
 80007d6:	4608      	mov	r0, r1
 80007d8:	e7f5      	b.n	80007c6 <__udivmoddi4+0xa6>
 80007da:	fab3 f183 	clz	r1, r3
 80007de:	2900      	cmp	r1, #0
 80007e0:	d146      	bne.n	8000870 <__udivmoddi4+0x150>
 80007e2:	42a3      	cmp	r3, r4
 80007e4:	d302      	bcc.n	80007ec <__udivmoddi4+0xcc>
 80007e6:	4290      	cmp	r0, r2
 80007e8:	f0c0 80f0 	bcc.w	80009cc <__udivmoddi4+0x2ac>
 80007ec:	1a86      	subs	r6, r0, r2
 80007ee:	eb64 0303 	sbc.w	r3, r4, r3
 80007f2:	2001      	movs	r0, #1
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d0e6      	beq.n	80007c6 <__udivmoddi4+0xa6>
 80007f8:	e9c5 6300 	strd	r6, r3, [r5]
 80007fc:	e7e3      	b.n	80007c6 <__udivmoddi4+0xa6>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	f040 8090 	bne.w	8000924 <__udivmoddi4+0x204>
 8000804:	eba1 040c 	sub.w	r4, r1, ip
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	fa1f f78c 	uxth.w	r7, ip
 8000810:	2101      	movs	r1, #1
 8000812:	fbb4 f6f8 	udiv	r6, r4, r8
 8000816:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800081a:	fb08 4416 	mls	r4, r8, r6, r4
 800081e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000822:	fb07 f006 	mul.w	r0, r7, r6
 8000826:	4298      	cmp	r0, r3
 8000828:	d908      	bls.n	800083c <__udivmoddi4+0x11c>
 800082a:	eb1c 0303 	adds.w	r3, ip, r3
 800082e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000832:	d202      	bcs.n	800083a <__udivmoddi4+0x11a>
 8000834:	4298      	cmp	r0, r3
 8000836:	f200 80cd 	bhi.w	80009d4 <__udivmoddi4+0x2b4>
 800083a:	4626      	mov	r6, r4
 800083c:	1a1c      	subs	r4, r3, r0
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb4 f0f8 	udiv	r0, r4, r8
 8000846:	fb08 4410 	mls	r4, r8, r0, r4
 800084a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800084e:	fb00 f707 	mul.w	r7, r0, r7
 8000852:	429f      	cmp	r7, r3
 8000854:	d908      	bls.n	8000868 <__udivmoddi4+0x148>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800085e:	d202      	bcs.n	8000866 <__udivmoddi4+0x146>
 8000860:	429f      	cmp	r7, r3
 8000862:	f200 80b0 	bhi.w	80009c6 <__udivmoddi4+0x2a6>
 8000866:	4620      	mov	r0, r4
 8000868:	1bdb      	subs	r3, r3, r7
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	e7a5      	b.n	80007bc <__udivmoddi4+0x9c>
 8000870:	f1c1 0620 	rsb	r6, r1, #32
 8000874:	408b      	lsls	r3, r1
 8000876:	fa22 f706 	lsr.w	r7, r2, r6
 800087a:	431f      	orrs	r7, r3
 800087c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000880:	fa04 f301 	lsl.w	r3, r4, r1
 8000884:	ea43 030c 	orr.w	r3, r3, ip
 8000888:	40f4      	lsrs	r4, r6
 800088a:	fa00 f801 	lsl.w	r8, r0, r1
 800088e:	0c38      	lsrs	r0, r7, #16
 8000890:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000894:	fbb4 fef0 	udiv	lr, r4, r0
 8000898:	fa1f fc87 	uxth.w	ip, r7
 800089c:	fb00 441e 	mls	r4, r0, lr, r4
 80008a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008a4:	fb0e f90c 	mul.w	r9, lr, ip
 80008a8:	45a1      	cmp	r9, r4
 80008aa:	fa02 f201 	lsl.w	r2, r2, r1
 80008ae:	d90a      	bls.n	80008c6 <__udivmoddi4+0x1a6>
 80008b0:	193c      	adds	r4, r7, r4
 80008b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80008b6:	f080 8084 	bcs.w	80009c2 <__udivmoddi4+0x2a2>
 80008ba:	45a1      	cmp	r9, r4
 80008bc:	f240 8081 	bls.w	80009c2 <__udivmoddi4+0x2a2>
 80008c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80008c4:	443c      	add	r4, r7
 80008c6:	eba4 0409 	sub.w	r4, r4, r9
 80008ca:	fa1f f983 	uxth.w	r9, r3
 80008ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80008d2:	fb00 4413 	mls	r4, r0, r3, r4
 80008d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008da:	fb03 fc0c 	mul.w	ip, r3, ip
 80008de:	45a4      	cmp	ip, r4
 80008e0:	d907      	bls.n	80008f2 <__udivmoddi4+0x1d2>
 80008e2:	193c      	adds	r4, r7, r4
 80008e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80008e8:	d267      	bcs.n	80009ba <__udivmoddi4+0x29a>
 80008ea:	45a4      	cmp	ip, r4
 80008ec:	d965      	bls.n	80009ba <__udivmoddi4+0x29a>
 80008ee:	3b02      	subs	r3, #2
 80008f0:	443c      	add	r4, r7
 80008f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008f6:	fba0 9302 	umull	r9, r3, r0, r2
 80008fa:	eba4 040c 	sub.w	r4, r4, ip
 80008fe:	429c      	cmp	r4, r3
 8000900:	46ce      	mov	lr, r9
 8000902:	469c      	mov	ip, r3
 8000904:	d351      	bcc.n	80009aa <__udivmoddi4+0x28a>
 8000906:	d04e      	beq.n	80009a6 <__udivmoddi4+0x286>
 8000908:	b155      	cbz	r5, 8000920 <__udivmoddi4+0x200>
 800090a:	ebb8 030e 	subs.w	r3, r8, lr
 800090e:	eb64 040c 	sbc.w	r4, r4, ip
 8000912:	fa04 f606 	lsl.w	r6, r4, r6
 8000916:	40cb      	lsrs	r3, r1
 8000918:	431e      	orrs	r6, r3
 800091a:	40cc      	lsrs	r4, r1
 800091c:	e9c5 6400 	strd	r6, r4, [r5]
 8000920:	2100      	movs	r1, #0
 8000922:	e750      	b.n	80007c6 <__udivmoddi4+0xa6>
 8000924:	f1c2 0320 	rsb	r3, r2, #32
 8000928:	fa20 f103 	lsr.w	r1, r0, r3
 800092c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000930:	fa24 f303 	lsr.w	r3, r4, r3
 8000934:	4094      	lsls	r4, r2
 8000936:	430c      	orrs	r4, r1
 8000938:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800093c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000940:	fa1f f78c 	uxth.w	r7, ip
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3110 	mls	r1, r8, r0, r3
 800094c:	0c23      	lsrs	r3, r4, #16
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb00 f107 	mul.w	r1, r0, r7
 8000956:	4299      	cmp	r1, r3
 8000958:	d908      	bls.n	800096c <__udivmoddi4+0x24c>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000962:	d22c      	bcs.n	80009be <__udivmoddi4+0x29e>
 8000964:	4299      	cmp	r1, r3
 8000966:	d92a      	bls.n	80009be <__udivmoddi4+0x29e>
 8000968:	3802      	subs	r0, #2
 800096a:	4463      	add	r3, ip
 800096c:	1a5b      	subs	r3, r3, r1
 800096e:	b2a4      	uxth	r4, r4
 8000970:	fbb3 f1f8 	udiv	r1, r3, r8
 8000974:	fb08 3311 	mls	r3, r8, r1, r3
 8000978:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800097c:	fb01 f307 	mul.w	r3, r1, r7
 8000980:	42a3      	cmp	r3, r4
 8000982:	d908      	bls.n	8000996 <__udivmoddi4+0x276>
 8000984:	eb1c 0404 	adds.w	r4, ip, r4
 8000988:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800098c:	d213      	bcs.n	80009b6 <__udivmoddi4+0x296>
 800098e:	42a3      	cmp	r3, r4
 8000990:	d911      	bls.n	80009b6 <__udivmoddi4+0x296>
 8000992:	3902      	subs	r1, #2
 8000994:	4464      	add	r4, ip
 8000996:	1ae4      	subs	r4, r4, r3
 8000998:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800099c:	e739      	b.n	8000812 <__udivmoddi4+0xf2>
 800099e:	4604      	mov	r4, r0
 80009a0:	e6f0      	b.n	8000784 <__udivmoddi4+0x64>
 80009a2:	4608      	mov	r0, r1
 80009a4:	e706      	b.n	80007b4 <__udivmoddi4+0x94>
 80009a6:	45c8      	cmp	r8, r9
 80009a8:	d2ae      	bcs.n	8000908 <__udivmoddi4+0x1e8>
 80009aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80009ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80009b2:	3801      	subs	r0, #1
 80009b4:	e7a8      	b.n	8000908 <__udivmoddi4+0x1e8>
 80009b6:	4631      	mov	r1, r6
 80009b8:	e7ed      	b.n	8000996 <__udivmoddi4+0x276>
 80009ba:	4603      	mov	r3, r0
 80009bc:	e799      	b.n	80008f2 <__udivmoddi4+0x1d2>
 80009be:	4630      	mov	r0, r6
 80009c0:	e7d4      	b.n	800096c <__udivmoddi4+0x24c>
 80009c2:	46d6      	mov	lr, sl
 80009c4:	e77f      	b.n	80008c6 <__udivmoddi4+0x1a6>
 80009c6:	4463      	add	r3, ip
 80009c8:	3802      	subs	r0, #2
 80009ca:	e74d      	b.n	8000868 <__udivmoddi4+0x148>
 80009cc:	4606      	mov	r6, r0
 80009ce:	4623      	mov	r3, r4
 80009d0:	4608      	mov	r0, r1
 80009d2:	e70f      	b.n	80007f4 <__udivmoddi4+0xd4>
 80009d4:	3e02      	subs	r6, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	e730      	b.n	800083c <__udivmoddi4+0x11c>
 80009da:	bf00      	nop

080009dc <__aeabi_idiv0>:
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop

080009e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e6:	463b      	mov	r3, r7
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009f2:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <MX_ADC1_Init+0x98>)
 80009f4:	4a21      	ldr	r2, [pc, #132]	@ (8000a7c <MX_ADC1_Init+0x9c>)
 80009f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <MX_ADC1_Init+0x98>)
 80009fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a22:	4a17      	ldr	r2, [pc, #92]	@ (8000a80 <MX_ADC1_Init+0xa0>)
 8000a24:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a40:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a42:	f005 fde9 	bl	8006618 <HAL_ADC_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a4c:	f000 fd9c 	bl	8001588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a50:	230a      	movs	r3, #10
 8000a52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_ADC1_Init+0x98>)
 8000a62:	f005 ff83 	bl	800696c <HAL_ADC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a6c:	f000 fd8c 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000026c 	.word	0x2000026c
 8000a7c:	40012000 	.word	0x40012000
 8000a80:	0f000001 	.word	0x0f000001

08000a84 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000a96:	4b21      	ldr	r3, [pc, #132]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000a98:	4a21      	ldr	r2, [pc, #132]	@ (8000b20 <MX_ADC2_Init+0x9c>)
 8000a9a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000a9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000aa2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000abe:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000ac6:	4a17      	ldr	r2, [pc, #92]	@ (8000b24 <MX_ADC2_Init+0xa0>)
 8000ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aca:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000ae6:	f005 fd97 	bl	8006618 <HAL_ADC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000af0:	f000 fd4a 	bl	8001588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000af4:	230d      	movs	r3, #13
 8000af6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_ADC2_Init+0x98>)
 8000b06:	f005 ff31 	bl	800696c <HAL_ADC_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000b10:	f000 fd3a 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200002b4 	.word	0x200002b4
 8000b20:	40012100 	.word	0x40012100
 8000b24:	0f000001 	.word	0x0f000001

08000b28 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2e:	463b      	mov	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b3c:	4a21      	ldr	r2, [pc, #132]	@ (8000bc4 <MX_ADC3_Init+0x9c>)
 8000b3e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b40:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b46:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b48:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b62:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b68:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b6a:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <MX_ADC3_Init+0xa0>)
 8000b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b88:	480d      	ldr	r0, [pc, #52]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000b8a:	f005 fd45 	bl	8006618 <HAL_ADC_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000b94:	f000 fcf8 	bl	8001588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000b98:	230d      	movs	r3, #13
 8000b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_ADC3_Init+0x98>)
 8000baa:	f005 fedf 	bl	800696c <HAL_ADC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000bb4:	f000 fce8 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200002fc 	.word	0x200002fc
 8000bc4:	40012200 	.word	0x40012200
 8000bc8:	0f000001 	.word	0x0f000001

08000bcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	@ 0x38
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a3f      	ldr	r2, [pc, #252]	@ (8000ce8 <HAL_ADC_MspInit+0x11c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d124      	bne.n	8000c38 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bee:	4b3f      	ldr	r3, [pc, #252]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c02:	623b      	str	r3, [r7, #32]
 8000c04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b39      	ldr	r3, [pc, #228]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a38      	ldr	r2, [pc, #224]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b36      	ldr	r3, [pc, #216]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	61fb      	str	r3, [r7, #28]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482f      	ldr	r0, [pc, #188]	@ (8000cf0 <HAL_ADC_MspInit+0x124>)
 8000c32:	f006 f9fd 	bl	8007030 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c36:	e052      	b.n	8000cde <HAL_ADC_MspInit+0x112>
  else if(adcHandle->Instance==ADC2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf4 <HAL_ADC_MspInit+0x128>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d124      	bne.n	8000c8c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c42:	4b2a      	ldr	r3, [pc, #168]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a29      	ldr	r2, [pc, #164]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000c48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4e:	4b27      	ldr	r3, [pc, #156]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c56:	61bb      	str	r3, [r7, #24]
 8000c58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a23      	ldr	r2, [pc, #140]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c72:	2308      	movs	r3, #8
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c76:	2303      	movs	r3, #3
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	481a      	ldr	r0, [pc, #104]	@ (8000cf0 <HAL_ADC_MspInit+0x124>)
 8000c86:	f006 f9d3 	bl	8007030 <HAL_GPIO_Init>
}
 8000c8a:	e028      	b.n	8000cde <HAL_ADC_MspInit+0x112>
  else if(adcHandle->Instance==ADC3)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a19      	ldr	r2, [pc, #100]	@ (8000cf8 <HAL_ADC_MspInit+0x12c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d123      	bne.n	8000cde <HAL_ADC_MspInit+0x112>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a14      	ldr	r2, [pc, #80]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000c9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <HAL_ADC_MspInit+0x120>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <HAL_ADC_MspInit+0x124>)
 8000cda:	f006 f9a9 	bl	8007030 <HAL_GPIO_Init>
}
 8000cde:	bf00      	nop
 8000ce0:	3738      	adds	r7, #56	@ 0x38
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40012000 	.word	0x40012000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40012100 	.word	0x40012100
 8000cf8:	40012200 	.word	0x40012200

08000cfc <MX_GPIO_Init>:
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	@ 0x38
 8000d00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d12:	4bb4      	ldr	r3, [pc, #720]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4ab3      	ldr	r2, [pc, #716]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4bb1      	ldr	r3, [pc, #708]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	623b      	str	r3, [r7, #32]
 8000d28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4bae      	ldr	r3, [pc, #696]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4aad      	ldr	r2, [pc, #692]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4bab      	ldr	r3, [pc, #684]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d42:	4ba8      	ldr	r3, [pc, #672]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4aa7      	ldr	r2, [pc, #668]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d48:	f043 0320 	orr.w	r3, r3, #32
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4ba5      	ldr	r3, [pc, #660]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0320 	and.w	r3, r3, #32
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5a:	4ba2      	ldr	r3, [pc, #648]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4aa1      	ldr	r2, [pc, #644]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b9f      	ldr	r3, [pc, #636]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b9c      	ldr	r3, [pc, #624]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a9b      	ldr	r2, [pc, #620]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b99      	ldr	r3, [pc, #612]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b96      	ldr	r3, [pc, #600]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a95      	ldr	r2, [pc, #596]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b93      	ldr	r3, [pc, #588]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da2:	4b90      	ldr	r3, [pc, #576]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a8f      	ldr	r2, [pc, #572]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b8d      	ldr	r3, [pc, #564]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dba:	4b8a      	ldr	r3, [pc, #552]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a89      	ldr	r2, [pc, #548]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b87      	ldr	r3, [pc, #540]	@ (8000fe4 <MX_GPIO_Init+0x2e8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2168      	movs	r1, #104	@ 0x68
 8000dd6:	4884      	ldr	r0, [pc, #528]	@ (8000fe8 <MX_GPIO_Init+0x2ec>)
 8000dd8:	f006 faee 	bl	80073b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f248 0110 	movw	r1, #32784	@ 0x8010
 8000de2:	4882      	ldr	r0, [pc, #520]	@ (8000fec <MX_GPIO_Init+0x2f0>)
 8000de4:	f006 fae8 	bl	80073b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000de8:	2200      	movs	r2, #0
 8000dea:	f64f 5180 	movw	r1, #64896	@ 0xfd80
 8000dee:	4880      	ldr	r0, [pc, #512]	@ (8000ff0 <MX_GPIO_Init+0x2f4>)
 8000df0:	f006 fae2 	bl	80073b8 <HAL_GPIO_WritePin>
                          |LD3_Pin|GPIO_PIN_15|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_2, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f248 0104 	movw	r1, #32772	@ 0x8004
 8000dfa:	487e      	ldr	r0, [pc, #504]	@ (8000ff4 <MX_GPIO_Init+0x2f8>)
 8000dfc:	f006 fadc 	bl	80073b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2144      	movs	r1, #68	@ 0x44
 8000e04:	487c      	ldr	r0, [pc, #496]	@ (8000ff8 <MX_GPIO_Init+0x2fc>)
 8000e06:	f006 fad7 	bl	80073b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|CS_Pin|DC_Pin|RST_Pin
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8000e10:	487a      	ldr	r0, [pc, #488]	@ (8000ffc <MX_GPIO_Init+0x300>)
 8000e12:	f006 fad1 	bl	80073b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000e16:	2314      	movs	r3, #20
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	486f      	ldr	r0, [pc, #444]	@ (8000fe8 <MX_GPIO_Init+0x2ec>)
 8000e2a:	f006 f901 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000e2e:	2368      	movs	r3, #104	@ 0x68
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4868      	ldr	r0, [pc, #416]	@ (8000fe8 <MX_GPIO_Init+0x2ec>)
 8000e46:	f006 f8f3 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000e4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4867      	ldr	r0, [pc, #412]	@ (8000ffc <MX_GPIO_Init+0x300>)
 8000e60:	f006 f8e6 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e64:	2307      	movs	r3, #7
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4862      	ldr	r0, [pc, #392]	@ (8001000 <MX_GPIO_Init+0x304>)
 8000e78:	f006 f8da 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e7c:	2332      	movs	r3, #50	@ 0x32
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e8c:	230b      	movs	r3, #11
 8000e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4859      	ldr	r0, [pc, #356]	@ (8000ffc <MX_GPIO_Init+0x300>)
 8000e98:	f006 f8ca 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e9c:	2386      	movs	r3, #134	@ 0x86
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eac:	230b      	movs	r3, #11
 8000eae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	484d      	ldr	r0, [pc, #308]	@ (8000fec <MX_GPIO_Init+0x2f0>)
 8000eb8:	f006 f8ba 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000ebc:	f248 0310 	movw	r3, #32784	@ 0x8010
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4845      	ldr	r0, [pc, #276]	@ (8000fec <MX_GPIO_Init+0x2f0>)
 8000ed6:	f006 f8ab 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eda:	2301      	movs	r3, #1
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ede:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eec:	4619      	mov	r1, r3
 8000eee:	4840      	ldr	r0, [pc, #256]	@ (8000ff0 <MX_GPIO_Init+0x2f4>)
 8000ef0:	f006 f89e 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PBPin PB15 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000ef4:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LD3_Pin|GPIO_PIN_15|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4838      	ldr	r0, [pc, #224]	@ (8000ff0 <MX_GPIO_Init+0x2f4>)
 8000f0e:	f006 f88f 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2;
 8000f12:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4832      	ldr	r0, [pc, #200]	@ (8000ff4 <MX_GPIO_Init+0x2f8>)
 8000f2c:	f006 f880 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|USB_PowerSwitchOn_Pin;
 8000f30:	2344      	movs	r3, #68	@ 0x44
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	482c      	ldr	r0, [pc, #176]	@ (8000ff8 <MX_GPIO_Init+0x2fc>)
 8000f48:	f006 f872 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f4c:	2380      	movs	r3, #128	@ 0x80
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4826      	ldr	r0, [pc, #152]	@ (8000ff8 <MX_GPIO_Init+0x2fc>)
 8000f60:	f006 f866 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 8000f64:	f44f 53c2 	mov.w	r3, #6208	@ 0x1840
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481f      	ldr	r0, [pc, #124]	@ (8000ffc <MX_GPIO_Init+0x300>)
 8000f7e:	f006 f857 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000f82:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4818      	ldr	r0, [pc, #96]	@ (8000ffc <MX_GPIO_Init+0x300>)
 8000f9c:	f006 f848 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fa0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb2:	230b      	movs	r3, #11
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480e      	ldr	r0, [pc, #56]	@ (8000ff8 <MX_GPIO_Init+0x2fc>)
 8000fbe:	f006 f837 	bl	8007030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_GPIO_Init+0x2f4>)
 8000fdc:	f006 f828 	bl	8007030 <HAL_GPIO_Init>
 8000fe0:	e010      	b.n	8001004 <MX_GPIO_Init+0x308>
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	40020c00 	.word	0x40020c00
 8000ff8:	40021800 	.word	0x40021800
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40021400 	.word	0x40021400

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001004:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100a:	2312      	movs	r3, #18
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001016:	2304      	movs	r3, #4
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	4803      	ldr	r0, [pc, #12]	@ (8001030 <MX_GPIO_Init+0x334>)
 8001022:	f006 f805 	bl	8007030 <HAL_GPIO_Init>

}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	@ 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020400 	.word	0x40020400

08001034 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001038:	f3bf 8f4f 	dsb	sy
}
 800103c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103e:	f3bf 8f6f 	isb	sy
}
 8001042:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001044:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <SCB_EnableICache+0x48>)
 8001046:	2200      	movs	r2, #0
 8001048:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800104c:	f3bf 8f4f 	dsb	sy
}
 8001050:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001052:	f3bf 8f6f 	isb	sy
}
 8001056:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <SCB_EnableICache+0x48>)
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <SCB_EnableICache+0x48>)
 800105e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001062:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001064:	f3bf 8f4f 	dsb	sy
}
 8001068:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800106a:	f3bf 8f6f 	isb	sy
}
 800106e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001086:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <SCB_EnableDCache+0x84>)
 8001088:	2200      	movs	r2, #0
 800108a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800108e:	f3bf 8f4f 	dsb	sy
}
 8001092:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <SCB_EnableDCache+0x84>)
 8001096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800109a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	0b5b      	lsrs	r3, r3, #13
 80010a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010a4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010ae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	015a      	lsls	r2, r3, #5
 80010b4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80010b8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010be:	4911      	ldr	r1, [pc, #68]	@ (8001104 <SCB_EnableDCache+0x84>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1e5a      	subs	r2, r3, #1
 80010ca:	60ba      	str	r2, [r7, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1ef      	bne.n	80010b0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	1e5a      	subs	r2, r3, #1
 80010d4:	60fa      	str	r2, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1e5      	bne.n	80010a6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <SCB_EnableDCache+0x84>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <SCB_EnableDCache+0x84>)
 80010e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010ec:	f3bf 8f4f 	dsb	sy
}
 80010f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010f2:	f3bf 8f6f 	isb	sy
}
 80010f6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800110e:	f7ff ff91 	bl	8001034 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001112:	f7ff ffb5 	bl	8001080 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001116:	f005 f9f5 	bl	8006504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111a:	f000 f86b 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111e:	f7ff fded 	bl	8000cfc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001122:	f001 f965 	bl	80023f0 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8001126:	f000 fd5b 	bl	8001be0 <MX_SPI5_Init>
  MX_TIM1_Init();
 800112a:	f000 ff89 	bl	8002040 <MX_TIM1_Init>
  MX_RNG_Init();
 800112e:	f000 fcd1 	bl	8001ad4 <MX_RNG_Init>
  MX_TIM2_Init();
 8001132:	f000 ffd9 	bl	80020e8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001136:	f7ff fc53 	bl	80009e0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800113a:	f001 f84d 	bl	80021d8 <MX_TIM3_Init>
  MX_ADC2_Init();
 800113e:	f7ff fca1 	bl	8000a84 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001142:	f7ff fcf1 	bl	8000b28 <MX_ADC3_Init>
  MX_SPI1_Init();
 8001146:	f000 fd0d 	bl	8001b64 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc1);
 800114a:	4823      	ldr	r0, [pc, #140]	@ (80011d8 <main+0xd0>)
 800114c:	f005 faa8 	bl	80066a0 <HAL_ADC_Start>

	ILI9341_Init();
 8001150:	f001 fc38 	bl	80029c4 <ILI9341_Init>

	HAL_TIM_Base_Start_IT(&htim2);
 8001154:	4821      	ldr	r0, [pc, #132]	@ (80011dc <main+0xd4>)
 8001156:	f008 f947 	bl	80093e8 <HAL_TIM_Base_Start_IT>

	ILI9341_Fill_Screen(WHITE);
 800115a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800115e:	f001 fddd 	bl	8002d1c <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001162:	2003      	movs	r0, #3
 8001164:	f001 fbd0 	bl	8002908 <ILI9341_Set_Rotation>

	uint32_t random_number;

	// Enable RNG clock
	__HAL_RCC_RNG_CLK_ENABLE();
 8001168:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <main+0xd8>)
 800116a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800116c:	4a1c      	ldr	r2, [pc, #112]	@ (80011e0 <main+0xd8>)
 800116e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001172:	6353      	str	r3, [r2, #52]	@ 0x34
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <main+0xd8>)
 8001176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]

	// Initialize RNG
	RNG_HandleTypeDef hrng;
	hrng.Instance = RNG;
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <main+0xdc>)
 8001182:	607b      	str	r3, [r7, #4]
	HAL_RNG_Init(&hrng);
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	4618      	mov	r0, r3
 8001188:	f007 fa8c 	bl	80086a4 <HAL_RNG_Init>

	// Get random number
	HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 800118c:	f107 0214 	add.w	r2, r7, #20
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f007 faaf 	bl	80086f8 <HAL_RNG_GenerateRandomNumber>


	// init joy stick;
	HAL_ADC_Start(&hadc1);
 800119a:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <main+0xd0>)
 800119c:	f005 fa80 	bl	80066a0 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 80011a0:	4811      	ldr	r0, [pc, #68]	@ (80011e8 <main+0xe0>)
 80011a2:	f005 fa7d 	bl	80066a0 <HAL_ADC_Start>
	srand(random_number);
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00a ff7f 	bl	800c0ac <srand>
	while (display_start_page() != 1) {}
 80011ae:	bf00      	nop
 80011b0:	f000 f890 	bl	80012d4 <display_start_page>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d1fa      	bne.n	80011b0 <main+0xa8>
	resetScreen(5);
 80011ba:	2005      	movs	r0, #5
 80011bc:	f002 f938 	bl	8003430 <resetScreen>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
	playPokerGame(n_players, n_bots);
 80011c0:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <main+0xe4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <main+0xe8>)
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 f932 	bl	8005438 <playPokerGame>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <main+0xcc>
 80011d8:	2000026c 	.word	0x2000026c
 80011dc:	20000474 	.word	0x20000474
 80011e0:	40023800 	.word	0x40023800
 80011e4:	50060800 	.word	0x50060800
 80011e8:	200002b4 	.word	0x200002b4
 80011ec:	20000004 	.word	0x20000004
 80011f0:	20000008 	.word	0x20000008

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	@ 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	2234      	movs	r2, #52	@ 0x34
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00b ff3c 	bl	800d080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001218:	f006 f8e8 	bl	80073ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	4b2b      	ldr	r3, [pc, #172]	@ (80012cc <SystemClock_Config+0xd8>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	4a2a      	ldr	r2, [pc, #168]	@ (80012cc <SystemClock_Config+0xd8>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	@ 0x40
 8001228:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <SystemClock_Config+0xd8>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <SystemClock_Config+0xdc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a25      	ldr	r2, [pc, #148]	@ (80012d0 <SystemClock_Config+0xdc>)
 800123a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <SystemClock_Config+0xdc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124c:	2301      	movs	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001250:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001254:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001256:	2302      	movs	r3, #2
 8001258:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800125e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001260:	2304      	movs	r3, #4
 8001262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001264:	23d8      	movs	r3, #216	@ 0xd8
 8001266:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001268:	2302      	movs	r3, #2
 800126a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800126c:	2309      	movs	r3, #9
 800126e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4618      	mov	r0, r3
 800127a:	f006 f917 	bl	80074ac <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001284:	f000 f980 	bl	8001588 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001288:	f006 f8c0 	bl	800740c <HAL_PWREx_EnableOverDrive>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001292:	f000 f979 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2302      	movs	r3, #2
 800129c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	2107      	movs	r1, #7
 80012b4:	4618      	mov	r0, r3
 80012b6:	f006 fba7 	bl	8007a08 <HAL_RCC_ClockConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80012c0:	f000 f962 	bl	8001588 <Error_Handler>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3750      	adds	r7, #80	@ 0x50
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <display_start_page>:

/* USER CODE BEGIN 4 */

int display_start_page(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b09a      	sub	sp, #104	@ 0x68
 80012d8:	af02      	add	r7, sp, #8
	// Poll and get values for ADC1 (y_val)
		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012da:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012de:	488b      	ldr	r0, [pc, #556]	@ (800150c <display_start_page+0x238>)
 80012e0:	f005 faac 	bl	800683c <HAL_ADC_PollForConversion>
		    uint32_t y_val = HAL_ADC_GetValue(&hadc1);
 80012e4:	4889      	ldr	r0, [pc, #548]	@ (800150c <display_start_page+0x238>)
 80012e6:	f005 fb34 	bl	8006952 <HAL_ADC_GetValue>
 80012ea:	65f8      	str	r0, [r7, #92]	@ 0x5c

		    // Poll and get values for ADC2 (x_val)
		    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012f0:	4887      	ldr	r0, [pc, #540]	@ (8001510 <display_start_page+0x23c>)
 80012f2:	f005 faa3 	bl	800683c <HAL_ADC_PollForConversion>
		    uint32_t x_val = HAL_ADC_GetValue(&hadc2);
 80012f6:	4886      	ldr	r0, [pc, #536]	@ (8001510 <display_start_page+0x23c>)
 80012f8:	f005 fb2b 	bl	8006952 <HAL_ADC_GetValue>
 80012fc:	65b8      	str	r0, [r7, #88]	@ 0x58

		    // Define thresholds for increasing and decreasing player/bot count
		    const int threshold_increase = 3000;  // Value to increase by 1
 80012fe:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001302:	657b      	str	r3, [r7, #84]	@ 0x54
		    const int threshold_decrease = 1000;   // Value to decrease by 1
 8001304:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001308:	653b      	str	r3, [r7, #80]	@ 0x50

		    // Define thresholds for switching modes
		    const int mode_switch_high = 3000;     // Threshold to switch to player mode
 800130a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800130e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    const int mode_switch_low = 1000;      // Threshold to switch to bot mode
 8001310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001314:	64bb      	str	r3, [r7, #72]	@ 0x48

		    char buffer[50];

		    // Check for switching modes based on y_val
		    if (y_val > mode_switch_high) {
 8001316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001318:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800131a:	429a      	cmp	r2, r3
 800131c:	d91a      	bls.n	8001354 <display_start_page+0x80>
		        // Switch to player mode
		        current_state = STATE_MODIFY_PLAYERS; // Set state to modify players
 800131e:	4b7d      	ldr	r3, [pc, #500]	@ (8001514 <display_start_page+0x240>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
		        sprintf(buffer, "Switched to Player Mode\n");
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	497b      	ldr	r1, [pc, #492]	@ (8001518 <display_start_page+0x244>)
 800132a:	4618      	mov	r0, r3
 800132c:	f00a fe9e 	bl	800c06c <siprintf>
		        ft_printf(buffer);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f909 	bl	800154c <ft_printf>
		        ILI9341_Draw_Text(buffer, 30, 100, BLACK, 3, WHITE);
 800133a:	f107 0014 	add.w	r0, r7, #20
 800133e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	2303      	movs	r3, #3
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2300      	movs	r3, #0
 800134a:	2264      	movs	r2, #100	@ 0x64
 800134c:	211e      	movs	r1, #30
 800134e:	f001 f9a3 	bl	8002698 <ILI9341_Draw_Text>
 8001352:	e01d      	b.n	8001390 <display_start_page+0xbc>
		    }
		    else if (y_val < mode_switch_low) {
 8001354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001356:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001358:	429a      	cmp	r2, r3
 800135a:	d219      	bcs.n	8001390 <display_start_page+0xbc>
		        // Switch to bot mode
		        current_state = STATE_MODIFY_BOTS; // Set state to modify bots
 800135c:	4b6d      	ldr	r3, [pc, #436]	@ (8001514 <display_start_page+0x240>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
		        sprintf(buffer, "Switched to Bot Mode\n");
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	496d      	ldr	r1, [pc, #436]	@ (800151c <display_start_page+0x248>)
 8001368:	4618      	mov	r0, r3
 800136a:	f00a fe7f 	bl	800c06c <siprintf>
		        ILI9341_Draw_Text(buffer, 30, 100, BLACK, 3, WHITE);
 800136e:	f107 0014 	add.w	r0, r7, #20
 8001372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	2303      	movs	r3, #3
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2300      	movs	r3, #0
 800137e:	2264      	movs	r2, #100	@ 0x64
 8001380:	211e      	movs	r1, #30
 8001382:	f001 f989 	bl	8002698 <ILI9341_Draw_Text>
		        ft_printf(buffer);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f8de 	bl	800154c <ft_printf>
		    }

		    // Modify players or bots based on the current state
		    if (current_state == STATE_MODIFY_PLAYERS) {
 8001390:	4b60      	ldr	r3, [pc, #384]	@ (8001514 <display_start_page+0x240>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d138      	bne.n	800140a <display_start_page+0x136>
		        // Check for increasing players
		        if (x_val > threshold_increase && (n_players + n_bots < 4)) {
 8001398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800139a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800139c:	429a      	cmp	r2, r3
 800139e:	d919      	bls.n	80013d4 <display_start_page+0x100>
 80013a0:	4b5f      	ldr	r3, [pc, #380]	@ (8001520 <display_start_page+0x24c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001524 <display_start_page+0x250>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	dc12      	bgt.n	80013d4 <display_start_page+0x100>
		            n_players++;  // Increase the number of players by 1
 80013ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001520 <display_start_page+0x24c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001520 <display_start_page+0x24c>)
 80013b6:	6013      	str	r3, [r2, #0]
		            sprintf(buffer, "Players increased: %d\n", n_players);
 80013b8:	4b59      	ldr	r3, [pc, #356]	@ (8001520 <display_start_page+0x24c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4959      	ldr	r1, [pc, #356]	@ (8001528 <display_start_page+0x254>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00a fe52 	bl	800c06c <siprintf>
		            ft_printf(buffer);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f8bd 	bl	800154c <ft_printf>
 80013d2:	e063      	b.n	800149c <display_start_page+0x1c8>
		        }
		        // Check for decreasing players
		        else if (x_val < threshold_decrease) {
 80013d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80013d8:	429a      	cmp	r2, r3
 80013da:	d25f      	bcs.n	800149c <display_start_page+0x1c8>
		            if (n_players > 0) {
 80013dc:	4b50      	ldr	r3, [pc, #320]	@ (8001520 <display_start_page+0x24c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd5b      	ble.n	800149c <display_start_page+0x1c8>
		                n_players--;  // Decrease the number of players by 1
 80013e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001520 <display_start_page+0x24c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001520 <display_start_page+0x24c>)
 80013ec:	6013      	str	r3, [r2, #0]
		                sprintf(buffer, "Players decreased: %d\n", n_players);
 80013ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001520 <display_start_page+0x24c>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	494d      	ldr	r1, [pc, #308]	@ (800152c <display_start_page+0x258>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00a fe37 	bl	800c06c <siprintf>
		                ft_printf(buffer);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f8a2 	bl	800154c <ft_printf>
 8001408:	e048      	b.n	800149c <display_start_page+0x1c8>
		            }
		        }
		    }
		    else if (current_state == STATE_MODIFY_BOTS) {
 800140a:	4b42      	ldr	r3, [pc, #264]	@ (8001514 <display_start_page+0x240>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d138      	bne.n	8001484 <display_start_page+0x1b0>
		        // Check for increasing bots
		        if (x_val > threshold_increase && (n_players + n_bots < 4)) {
 8001412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001414:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001416:	429a      	cmp	r2, r3
 8001418:	d919      	bls.n	800144e <display_start_page+0x17a>
 800141a:	4b41      	ldr	r3, [pc, #260]	@ (8001520 <display_start_page+0x24c>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b41      	ldr	r3, [pc, #260]	@ (8001524 <display_start_page+0x250>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	2b03      	cmp	r3, #3
 8001426:	dc12      	bgt.n	800144e <display_start_page+0x17a>
		            n_bots++;  // Increase the number of bots by 1
 8001428:	4b3e      	ldr	r3, [pc, #248]	@ (8001524 <display_start_page+0x250>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a3d      	ldr	r2, [pc, #244]	@ (8001524 <display_start_page+0x250>)
 8001430:	6013      	str	r3, [r2, #0]
		            sprintf(buffer, "Bots increased: %d\n", n_bots);
 8001432:	4b3c      	ldr	r3, [pc, #240]	@ (8001524 <display_start_page+0x250>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	493d      	ldr	r1, [pc, #244]	@ (8001530 <display_start_page+0x25c>)
 800143c:	4618      	mov	r0, r3
 800143e:	f00a fe15 	bl	800c06c <siprintf>
		            ft_printf(buffer);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f880 	bl	800154c <ft_printf>
 800144c:	e026      	b.n	800149c <display_start_page+0x1c8>
		        }
		        // Check for decreasing bots
		        else if (x_val < threshold_decrease) {
 800144e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001450:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001452:	429a      	cmp	r2, r3
 8001454:	d222      	bcs.n	800149c <display_start_page+0x1c8>
		            if (n_bots > 0) {
 8001456:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <display_start_page+0x250>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	dd1e      	ble.n	800149c <display_start_page+0x1c8>
		                n_bots--;  // Decrease the number of bots by 1
 800145e:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <display_start_page+0x250>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	4a2f      	ldr	r2, [pc, #188]	@ (8001524 <display_start_page+0x250>)
 8001466:	6013      	str	r3, [r2, #0]
		                sprintf(buffer, "Bots decreased: %d\n", n_bots);
 8001468:	4b2e      	ldr	r3, [pc, #184]	@ (8001524 <display_start_page+0x250>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4930      	ldr	r1, [pc, #192]	@ (8001534 <display_start_page+0x260>)
 8001472:	4618      	mov	r0, r3
 8001474:	f00a fdfa 	bl	800c06c <siprintf>
		                ft_printf(buffer);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f865 	bl	800154c <ft_printf>
 8001482:	e00b      	b.n	800149c <display_start_page+0x1c8>
		            }
		        }
		    }
		    else {
		        // No significant change in player/bot count
		        sprintf(buffer, "No significant change: x_val = %d, y_val = %d\n", x_val, y_val);
 8001484:	f107 0014 	add.w	r0, r7, #20
 8001488:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800148a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800148c:	492a      	ldr	r1, [pc, #168]	@ (8001538 <display_start_page+0x264>)
 800148e:	f00a fded 	bl	800c06c <siprintf>
		        ft_printf(buffer);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f858 	bl	800154c <ft_printf>
		    }

		    // Update previous values for the next loop
		    previous_x_val = x_val;
 800149c:	4a27      	ldr	r2, [pc, #156]	@ (800153c <display_start_page+0x268>)
 800149e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014a0:	6013      	str	r3, [r2, #0]
		    previous_y_val = y_val;
 80014a2:	4a27      	ldr	r2, [pc, #156]	@ (8001540 <display_start_page+0x26c>)
 80014a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014a6:	6013      	str	r3, [r2, #0]

		    HAL_Delay(300); // Delay for 300 milliseconds
 80014a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014ac:	f005 f890 	bl	80065d0 <HAL_Delay>

		    // Update the display with the current number of players and bots
		    char bf[20];
		    sprintf(bf, "PLAYERS: %d", n_players);
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <display_start_page+0x24c>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	463b      	mov	r3, r7
 80014b6:	4923      	ldr	r1, [pc, #140]	@ (8001544 <display_start_page+0x270>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00a fdd7 	bl	800c06c <siprintf>
		    ILI9341_Draw_Text(bf, 30, 30, BLACK, 3, WHITE);
 80014be:	4638      	mov	r0, r7
 80014c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	2303      	movs	r3, #3
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2300      	movs	r3, #0
 80014cc:	221e      	movs	r2, #30
 80014ce:	211e      	movs	r1, #30
 80014d0:	f001 f8e2 	bl	8002698 <ILI9341_Draw_Text>
		    sprintf(bf, "BOTS: %d", n_bots);
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <display_start_page+0x250>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	463b      	mov	r3, r7
 80014da:	491b      	ldr	r1, [pc, #108]	@ (8001548 <display_start_page+0x274>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f00a fdc5 	bl	800c06c <siprintf>
		    ILI9341_Draw_Text(bf, 30, 50, BLACK, 3, WHITE);
 80014e2:	4638      	mov	r0, r7
 80014e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	2303      	movs	r3, #3
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2300      	movs	r3, #0
 80014f0:	2232      	movs	r2, #50	@ 0x32
 80014f2:	211e      	movs	r1, #30
 80014f4:	f001 f8d0 	bl	8002698 <ILI9341_Draw_Text>
		    HAL_Delay(5000);
 80014f8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014fc:	f005 f868 	bl	80065d0 <HAL_Delay>
		    return (1);
 8001500:	2301      	movs	r3, #1
}
 8001502:	4618      	mov	r0, r3
 8001504:	3760      	adds	r7, #96	@ 0x60
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000026c 	.word	0x2000026c
 8001510:	200002b4 	.word	0x200002b4
 8001514:	20000000 	.word	0x20000000
 8001518:	0800f9c8 	.word	0x0800f9c8
 800151c:	0800f9e4 	.word	0x0800f9e4
 8001520:	20000004 	.word	0x20000004
 8001524:	20000008 	.word	0x20000008
 8001528:	0800f9fc 	.word	0x0800f9fc
 800152c:	0800fa14 	.word	0x0800fa14
 8001530:	0800fa2c 	.word	0x0800fa2c
 8001534:	0800fa40 	.word	0x0800fa40
 8001538:	0800fa54 	.word	0x0800fa54
 800153c:	20000344 	.word	0x20000344
 8001540:	20000348 	.word	0x20000348
 8001544:	0800fa84 	.word	0x0800fa84
 8001548:	0800fa90 	.word	0x0800fa90

0800154c <ft_printf>:

void ft_printf(char *buffer)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8001554:	bf00      	nop
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <ft_printf+0x38>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001560:	2b40      	cmp	r3, #64	@ 0x40
 8001562:	d1f8      	bne.n	8001556 <ft_printf+0xa>
	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer),1000);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7fe febb 	bl	80002e0 <strlen>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <ft_printf+0x38>)
 8001576:	f008 ffbb 	bl	800a4f0 <HAL_UART_Transmit>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000050c 	.word	0x2000050c

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <Error_Handler+0x4>

08001590 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uint8_t data)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af02      	add	r7, sp, #8
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800159a:	f107 020f 	add.w	r2, r7, #15
 800159e:	1df9      	adds	r1, r7, #7
 80015a0:	2364      	movs	r3, #100	@ 0x64
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2301      	movs	r3, #1
 80015a6:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <RC522_SPI_Transfer+0x28>)
 80015a8:	f007 fb1c 	bl	8008be4 <HAL_SPI_TransmitReceive>

	return rx_data;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000035c 	.word	0x2000035c

080015bc <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2110      	movs	r1, #16
 80015d0:	480c      	ldr	r0, [pc, #48]	@ (8001604 <Write_MFRC522+0x48>)
 80015d2:	f005 fef1 	bl	80073b8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ffd4 	bl	8001590 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ffd0 	bl	8001590 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2110      	movs	r1, #16
 80015f4:	4803      	ldr	r0, [pc, #12]	@ (8001604 <Write_MFRC522+0x48>)
 80015f6:	f005 fedf 	bl	80073b8 <HAL_GPIO_WritePin>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40020000 	.word	0x40020000

08001608 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2110      	movs	r1, #16
 8001616:	480f      	ldr	r0, [pc, #60]	@ (8001654 <Read_MFRC522+0x4c>)
 8001618:	f005 fece 	bl	80073b8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b25b      	sxtb	r3, r3
 8001622:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001626:	b25b      	sxtb	r3, r3
 8001628:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800162c:	b25b      	sxtb	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ffad 	bl	8001590 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff ffaa 	bl	8001590 <RC522_SPI_Transfer>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2110      	movs	r1, #16
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <Read_MFRC522+0x4c>)
 8001646:	f005 feb7 	bl	80073b8 <HAL_GPIO_WritePin>

	return val;
 800164a:	7bfb      	ldrb	r3, [r7, #15]

}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40020000 	.word	0x40020000

08001658 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uint8_t reg, uint8_t mask)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	460a      	mov	r2, r1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	4613      	mov	r3, r2
 8001666:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ffcc 	bl	8001608 <Read_MFRC522>
 8001670:	4603      	mov	r3, r0
 8001672:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	4313      	orrs	r3, r2
 800167a:	b2da      	uxtb	r2, r3
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff9b 	bl	80015bc <Write_MFRC522>
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uint8_t reg, uint8_t mask)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	460a      	mov	r2, r1
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	4613      	mov	r3, r2
 800169c:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ffb1 	bl	8001608 <Read_MFRC522>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80016aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	b25a      	sxtb	r2, r3
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4013      	ands	r3, r2
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff7b 	bl	80015bc <Write_MFRC522>
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80016d2:	2014      	movs	r0, #20
 80016d4:	f7ff ff98 	bl	8001608 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80016d8:	2103      	movs	r1, #3
 80016da:	2014      	movs	r0, #20
 80016dc:	f7ff ffbc 	bl	8001658 <SetBitMask>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80016e8:	210f      	movs	r1, #15
 80016ea:	2001      	movs	r0, #1
 80016ec:	f7ff ff66 	bl	80015bc <Write_MFRC522>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2110      	movs	r1, #16
 80016fc:	4812      	ldr	r0, [pc, #72]	@ (8001748 <MFRC522_Init+0x54>)
 80016fe:	f005 fe5b 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8001702:	2201      	movs	r2, #1
 8001704:	2101      	movs	r1, #1
 8001706:	4811      	ldr	r0, [pc, #68]	@ (800174c <MFRC522_Init+0x58>)
 8001708:	f005 fe56 	bl	80073b8 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 800170c:	f7ff ffea 	bl	80016e4 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8001710:	218d      	movs	r1, #141	@ 0x8d
 8001712:	202a      	movs	r0, #42	@ 0x2a
 8001714:	f7ff ff52 	bl	80015bc <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001718:	213e      	movs	r1, #62	@ 0x3e
 800171a:	202b      	movs	r0, #43	@ 0x2b
 800171c:	f7ff ff4e 	bl	80015bc <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8001720:	211e      	movs	r1, #30
 8001722:	202d      	movs	r0, #45	@ 0x2d
 8001724:	f7ff ff4a 	bl	80015bc <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001728:	2100      	movs	r1, #0
 800172a:	202c      	movs	r0, #44	@ 0x2c
 800172c:	f7ff ff46 	bl	80015bc <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8001730:	2140      	movs	r1, #64	@ 0x40
 8001732:	2015      	movs	r0, #21
 8001734:	f7ff ff42 	bl	80015bc <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8001738:	213d      	movs	r1, #61	@ 0x3d
 800173a:	2011      	movs	r0, #17
 800173c:	f7ff ff3e 	bl	80015bc <Write_MFRC522>

	AntennaOn();
 8001740:	f7ff ffc5 	bl	80016ce <AntennaOn>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400

08001750 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint16_t *backLen)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4603      	mov	r3, r0
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	4613      	mov	r3, r2
 8001760:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8001762:	2302      	movs	r3, #2
 8001764:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn = 0x00;
 8001766:	2300      	movs	r3, #0
 8001768:	75bb      	strb	r3, [r7, #22]
    uint8_t waitIRq = 0x00;
 800176a:	2300      	movs	r3, #0
 800176c:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    switch (command)
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d006      	beq.n	8001782 <MFRC522_ToCard+0x32>
 8001774:	2b0e      	cmp	r3, #14
 8001776:	d109      	bne.n	800178c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001778:	2312      	movs	r3, #18
 800177a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800177c:	2310      	movs	r3, #16
 800177e:	757b      	strb	r3, [r7, #21]
			break;
 8001780:	e005      	b.n	800178e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8001782:	2377      	movs	r3, #119	@ 0x77
 8001784:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001786:	2330      	movs	r3, #48	@ 0x30
 8001788:	757b      	strb	r3, [r7, #21]
			break;
 800178a:	e000      	b.n	800178e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 800178c:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 800178e:	7dbb      	ldrb	r3, [r7, #22]
 8001790:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4619      	mov	r1, r3
 8001798:	2002      	movs	r0, #2
 800179a:	f7ff ff0f 	bl	80015bc <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800179e:	2180      	movs	r1, #128	@ 0x80
 80017a0:	2004      	movs	r0, #4
 80017a2:	f7ff ff74 	bl	800168e <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80017a6:	2180      	movs	r1, #128	@ 0x80
 80017a8:	200a      	movs	r0, #10
 80017aa:	f7ff ff55 	bl	8001658 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80017ae:	2100      	movs	r1, #0
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7ff ff03 	bl	80015bc <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	827b      	strh	r3, [r7, #18]
 80017ba:	e00a      	b.n	80017d2 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 80017bc:	8a7b      	ldrh	r3, [r7, #18]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	4413      	add	r3, r2
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	2009      	movs	r0, #9
 80017c8:	f7ff fef8 	bl	80015bc <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80017cc:	8a7b      	ldrh	r3, [r7, #18]
 80017ce:	3301      	adds	r3, #1
 80017d0:	827b      	strh	r3, [r7, #18]
 80017d2:	7bbb      	ldrb	r3, [r7, #14]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	8a7a      	ldrh	r2, [r7, #18]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d3ef      	bcc.n	80017bc <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	4619      	mov	r1, r3
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff feeb 	bl	80015bc <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	d103      	bne.n	80017f4 <MFRC522_ToCard+0xa4>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80017ec:	2180      	movs	r1, #128	@ 0x80
 80017ee:	200d      	movs	r0, #13
 80017f0:	f7ff ff32 	bl	8001658 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80017f4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80017f8:	827b      	strh	r3, [r7, #18]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80017fa:	2004      	movs	r0, #4
 80017fc:	f7ff ff04 	bl	8001608 <Read_MFRC522>
 8001800:	4603      	mov	r3, r0
 8001802:	753b      	strb	r3, [r7, #20]
        i--;
 8001804:	8a7b      	ldrh	r3, [r7, #18]
 8001806:	3b01      	subs	r3, #1
 8001808:	827b      	strh	r3, [r7, #18]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800180a:	8a7b      	ldrh	r3, [r7, #18]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00a      	beq.n	8001826 <MFRC522_ToCard+0xd6>
 8001810:	7d3b      	ldrb	r3, [r7, #20]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <MFRC522_ToCard+0xd6>
 800181a:	7d3a      	ldrb	r2, [r7, #20]
 800181c:	7d7b      	ldrb	r3, [r7, #21]
 800181e:	4013      	ands	r3, r2
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0e9      	beq.n	80017fa <MFRC522_ToCard+0xaa>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001826:	2180      	movs	r1, #128	@ 0x80
 8001828:	200d      	movs	r0, #13
 800182a:	f7ff ff30 	bl	800168e <ClearBitMask>

    if (i != 0)
 800182e:	8a7b      	ldrh	r3, [r7, #18]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d057      	beq.n	80018e4 <MFRC522_ToCard+0x194>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8001834:	2006      	movs	r0, #6
 8001836:	f7ff fee7 	bl	8001608 <Read_MFRC522>
 800183a:	4603      	mov	r3, r0
 800183c:	f003 031b 	and.w	r3, r3, #27
 8001840:	2b00      	cmp	r3, #0
 8001842:	d14d      	bne.n	80018e0 <MFRC522_ToCard+0x190>
        {
            status = MI_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	75fb      	strb	r3, [r7, #23]
            if (n & irqEn & 0x01)
 8001848:	7d3a      	ldrb	r2, [r7, #20]
 800184a:	7dbb      	ldrb	r3, [r7, #22]
 800184c:	4013      	ands	r3, r2
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MFRC522_ToCard+0x10c>
            {
				status = MI_NOTAGERR;
 8001858:	2301      	movs	r3, #1
 800185a:	75fb      	strb	r3, [r7, #23]
			}

            if (command == PCD_TRANSCEIVE)
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d140      	bne.n	80018e4 <MFRC522_ToCard+0x194>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001862:	200a      	movs	r0, #10
 8001864:	f7ff fed0 	bl	8001608 <Read_MFRC522>
 8001868:	4603      	mov	r3, r0
 800186a:	753b      	strb	r3, [r7, #20]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800186c:	200c      	movs	r0, #12
 800186e:	f7ff fecb 	bl	8001608 <Read_MFRC522>
 8001872:	4603      	mov	r3, r0
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	747b      	strb	r3, [r7, #17]
                if (lastBits)
 800187a:	7c7b      	ldrb	r3, [r7, #17]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <MFRC522_ToCard+0x148>
                {
					*backLen = (n-1)*8 + lastBits;
 8001880:	7d3b      	ldrb	r3, [r7, #20]
 8001882:	3b01      	subs	r3, #1
 8001884:	b29b      	uxth	r3, r3
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	b29a      	uxth	r2, r3
 800188a:	7c7b      	ldrb	r3, [r7, #17]
 800188c:	b29b      	uxth	r3, r3
 800188e:	4413      	add	r3, r2
 8001890:	b29a      	uxth	r2, r3
 8001892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001894:	801a      	strh	r2, [r3, #0]
 8001896:	e005      	b.n	80018a4 <MFRC522_ToCard+0x154>
				}
                else
                {
					*backLen = n*8;
 8001898:	7d3b      	ldrb	r3, [r7, #20]
 800189a:	b29b      	uxth	r3, r3
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	b29a      	uxth	r2, r3
 80018a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a2:	801a      	strh	r2, [r3, #0]
				}

                if (n == 0)
 80018a4:	7d3b      	ldrb	r3, [r7, #20]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <MFRC522_ToCard+0x15e>
                {
					n = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	753b      	strb	r3, [r7, #20]
				}
                if (n > MAX_LEN)
 80018ae:	7d3b      	ldrb	r3, [r7, #20]
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	d901      	bls.n	80018b8 <MFRC522_ToCard+0x168>
                {
					n = MAX_LEN;
 80018b4:	2310      	movs	r3, #16
 80018b6:	753b      	strb	r3, [r7, #20]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	827b      	strh	r3, [r7, #18]
 80018bc:	e00a      	b.n	80018d4 <MFRC522_ToCard+0x184>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80018be:	8a7b      	ldrh	r3, [r7, #18]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	18d4      	adds	r4, r2, r3
 80018c4:	2009      	movs	r0, #9
 80018c6:	f7ff fe9f 	bl	8001608 <Read_MFRC522>
 80018ca:	4603      	mov	r3, r0
 80018cc:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80018ce:	8a7b      	ldrh	r3, [r7, #18]
 80018d0:	3301      	adds	r3, #1
 80018d2:	827b      	strh	r3, [r7, #18]
 80018d4:	7d3b      	ldrb	r3, [r7, #20]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	8a7a      	ldrh	r2, [r7, #18]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3ef      	bcc.n	80018be <MFRC522_ToCard+0x16e>
 80018de:	e001      	b.n	80018e4 <MFRC522_ToCard+0x194>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80018e0:	2302      	movs	r3, #2
 80018e2:	75fb      	strb	r3, [r7, #23]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd90      	pop	{r4, r7, pc}

080018ee <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af02      	add	r7, sp, #8
 80018f4:	4603      	mov	r3, r0
 80018f6:	6039      	str	r1, [r7, #0]
 80018f8:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80018fa:	2107      	movs	r1, #7
 80018fc:	200d      	movs	r0, #13
 80018fe:	f7ff fe5d 	bl	80015bc <Write_MFRC522>

	TagType[0] = reqMode;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	6839      	ldr	r1, [r7, #0]
 8001914:	200c      	movs	r0, #12
 8001916:	f7ff ff1b 	bl	8001750 <MFRC522_ToCard>
 800191a:	4603      	mov	r3, r0
 800191c:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <MFRC522_Request+0x3c>
 8001924:	89bb      	ldrh	r3, [r7, #12]
 8001926:	2b10      	cmp	r3, #16
 8001928:	d001      	beq.n	800192e <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 800192a:	2302      	movs	r3, #2
 800192c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af02      	add	r7, sp, #8
 800193e:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 8001940:	2300      	movs	r3, #0
 8001942:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001944:	2100      	movs	r1, #0
 8001946:	200d      	movs	r0, #13
 8001948:	f7ff fe38 	bl	80015bc <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2293      	movs	r2, #147	@ 0x93
 8001950:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3301      	adds	r3, #1
 8001956:	2220      	movs	r2, #32
 8001958:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800195a:	f107 030a 	add.w	r3, r7, #10
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	200c      	movs	r0, #12
 8001968:	f7ff fef2 	bl	8001750 <MFRC522_ToCard>
 800196c:	4603      	mov	r3, r0
 800196e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d118      	bne.n	80019a8 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8001976:	2300      	movs	r3, #0
 8001978:	73bb      	strb	r3, [r7, #14]
 800197a:	e009      	b.n	8001990 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	7b7b      	ldrb	r3, [r7, #13]
 8001986:	4053      	eors	r3, r2
 8001988:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800198a:	7bbb      	ldrb	r3, [r7, #14]
 800198c:	3301      	adds	r3, #1
 800198e:	73bb      	strb	r3, [r7, #14]
 8001990:	7bbb      	ldrb	r3, [r7, #14]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d9f2      	bls.n	800197c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8001996:	7bbb      	ldrb	r3, [r7, #14]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	7b7a      	ldrb	r2, [r7, #13]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 80019a4:	2302      	movs	r3, #2
 80019a6:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <CalulateCRC>:
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
{
 80019b2:	b590      	push	{r4, r7, lr}
 80019b4:	b087      	sub	sp, #28
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	460b      	mov	r3, r1
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	72fb      	strb	r3, [r7, #11]
    uint8_t i, n;

    ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 80019c0:	2104      	movs	r1, #4
 80019c2:	2005      	movs	r0, #5
 80019c4:	f7ff fe63 	bl	800168e <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	200a      	movs	r0, #10
 80019cc:	f7ff fe44 	bl	8001658 <SetBitMask>

    //Writing data to the FIFO
    for (i=0; i<len; i++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	75fb      	strb	r3, [r7, #23]
 80019d4:	e00a      	b.n	80019ec <CalulateCRC+0x3a>
    {
		Write_MFRC522(FIFODataReg, *(pIndata+i));
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	2009      	movs	r0, #9
 80019e2:	f7ff fdeb 	bl	80015bc <Write_MFRC522>
    for (i=0; i<len; i++)
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	3301      	adds	r3, #1
 80019ea:	75fb      	strb	r3, [r7, #23]
 80019ec:	7dfa      	ldrb	r2, [r7, #23]
 80019ee:	7afb      	ldrb	r3, [r7, #11]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d3f0      	bcc.n	80019d6 <CalulateCRC+0x24>
	}
    Write_MFRC522(CommandReg, PCD_CALCCRC);
 80019f4:	2103      	movs	r1, #3
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff fde0 	bl	80015bc <Write_MFRC522>

    //Wait CRC calculation is complete
    i = 0xFF;
 80019fc:	23ff      	movs	r3, #255	@ 0xff
 80019fe:	75fb      	strb	r3, [r7, #23]
    do
    {
        n = Read_MFRC522(DivIrqReg);
 8001a00:	2005      	movs	r0, #5
 8001a02:	f7ff fe01 	bl	8001608 <Read_MFRC522>
 8001a06:	4603      	mov	r3, r0
 8001a08:	75bb      	strb	r3, [r7, #22]
        i--;
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	75fb      	strb	r3, [r7, #23]
    }
    while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <CalulateCRC+0x6e>
 8001a16:	7dbb      	ldrb	r3, [r7, #22]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ef      	beq.n	8001a00 <CalulateCRC+0x4e>

    //Read CRC calculation result
    pOutData[0] = Read_MFRC522(CRCResultRegL);
 8001a20:	2022      	movs	r0, #34	@ 0x22
 8001a22:	f7ff fdf1 	bl	8001608 <Read_MFRC522>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	701a      	strb	r2, [r3, #0]
    pOutData[1] = Read_MFRC522(CRCResultRegH);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	1c5c      	adds	r4, r3, #1
 8001a32:	2021      	movs	r0, #33	@ 0x21
 8001a34:	f7ff fde8 	bl	8001608 <Read_MFRC522>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	7023      	strb	r3, [r4, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}

08001a44 <MFRC522_Read>:
 * Description: Read block data
 * Input parameters: blockAddr - block address; recvData - read block data
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t *recvData)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint16_t unLen;

    recvData[0] = PICC_READ;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2230      	movs	r2, #48	@ 0x30
 8001a54:	701a      	strb	r2, [r3, #0]
    recvData[1] = blockAddr;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	701a      	strb	r2, [r3, #0]
    CalulateCRC(recvData,2, &recvData[2]);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	3302      	adds	r3, #2
 8001a62:	461a      	mov	r2, r3
 8001a64:	2102      	movs	r1, #2
 8001a66:	6838      	ldr	r0, [r7, #0]
 8001a68:	f7ff ffa3 	bl	80019b2 <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2204      	movs	r2, #4
 8001a76:	6839      	ldr	r1, [r7, #0]
 8001a78:	200c      	movs	r0, #12
 8001a7a:	f7ff fe69 	bl	8001750 <MFRC522_ToCard>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	73fb      	strb	r3, [r7, #15]

    if ((status != MI_OK) || (unLen != 0x90))
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <MFRC522_Read+0x4a>
 8001a88:	89bb      	ldrh	r3, [r7, #12]
 8001a8a:	2b90      	cmp	r3, #144	@ 0x90
 8001a8c:	d001      	beq.n	8001a92 <MFRC522_Read+0x4e>
    {
        status = MI_ERR;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <MFRC522_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8001aa2:	2350      	movs	r3, #80	@ 0x50
 8001aa4:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	707b      	strb	r3, [r7, #1]
	CalulateCRC(buff, 2, &buff[2]);
 8001aaa:	463b      	mov	r3, r7
 8001aac:	1c9a      	adds	r2, r3, #2
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff7d 	bl	80019b2 <CalulateCRC>

	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 8001ab8:	463a      	mov	r2, r7
 8001aba:	4639      	mov	r1, r7
 8001abc:	1dbb      	adds	r3, r7, #6
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	200c      	movs	r0, #12
 8001ac6:	f7ff fe43 	bl	8001750 <MFRC522_ToCard>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <MX_RNG_Init+0x20>)
 8001ada:	4a07      	ldr	r2, [pc, #28]	@ (8001af8 <MX_RNG_Init+0x24>)
 8001adc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_RNG_Init+0x20>)
 8001ae0:	f006 fde0 	bl	80086a4 <HAL_RNG_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001aea:	f7ff fd4d 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000034c 	.word	0x2000034c
 8001af8:	50060800 	.word	0x50060800

08001afc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0a8      	sub	sp, #160	@ 0xa0
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	2290      	movs	r2, #144	@ 0x90
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f00b fab7 	bl	800d080 <memset>
  if(rngHandle->Instance==RNG)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a11      	ldr	r2, [pc, #68]	@ (8001b5c <HAL_RNG_MspInit+0x60>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d11b      	bne.n	8001b54 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f006 f991 	bl	8007e54 <HAL_RCCEx_PeriphCLKConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001b38:	f7ff fd26 	bl	8001588 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <HAL_RNG_MspInit+0x64>)
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b40:	4a07      	ldr	r2, [pc, #28]	@ (8001b60 <HAL_RNG_MspInit+0x64>)
 8001b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b46:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_RNG_MspInit+0x64>)
 8001b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001b54:	bf00      	nop
 8001b56:	37a0      	adds	r7, #160	@ 0xa0
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	50060800 	.word	0x50060800
 8001b60:	40023800 	.word	0x40023800

08001b64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bdc <MX_SPI1_Init+0x78>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001b70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b76:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001b7e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001b82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001b92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <MX_SPI1_Init+0x74>)
 8001bc4:	f006 fdee 	bl	80087a4 <HAL_SPI_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bce:	f7ff fcdb 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000035c 	.word	0x2000035c
 8001bdc:	40013000 	.word	0x40013000

08001be0 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001be6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c58 <MX_SPI5_Init+0x78>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001bec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bf0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf2:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf8:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001bfa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001bfe:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c00:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c06:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c12:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001c2e:	2207      	movs	r2, #7
 8001c30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c32:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <MX_SPI5_Init+0x74>)
 8001c40:	f006 fdb0 	bl	80087a4 <HAL_SPI_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001c4a:	f7ff fc9d 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200003c0 	.word	0x200003c0
 8001c58:	40015000 	.word	0x40015000

08001c5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	@ 0x38
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a4b      	ldr	r2, [pc, #300]	@ (8001da8 <HAL_SPI_MspInit+0x14c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d161      	bne.n	8001d42 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	4a4a      	ldr	r2, [pc, #296]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001c84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8a:	4b48      	ldr	r3, [pc, #288]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b45      	ldr	r3, [pc, #276]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a44      	ldr	r2, [pc, #272]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b42      	ldr	r3, [pc, #264]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cae:	4b3f      	ldr	r3, [pc, #252]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cba:	4b3c      	ldr	r3, [pc, #240]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cc6:	4b39      	ldr	r3, [pc, #228]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a38      	ldr	r2, [pc, #224]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b36      	ldr	r3, [pc, #216]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cee:	2305      	movs	r3, #5
 8001cf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	482d      	ldr	r0, [pc, #180]	@ (8001db0 <HAL_SPI_MspInit+0x154>)
 8001cfa:	f005 f999 	bl	8007030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cfe:	2380      	movs	r3, #128	@ 0x80
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d0e:	2305      	movs	r3, #5
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d16:	4619      	mov	r1, r3
 8001d18:	4826      	ldr	r0, [pc, #152]	@ (8001db4 <HAL_SPI_MspInit+0x158>)
 8001d1a:	f005 f989 	bl	8007030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d30:	2305      	movs	r3, #5
 8001d32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	481f      	ldr	r0, [pc, #124]	@ (8001db8 <HAL_SPI_MspInit+0x15c>)
 8001d3c:	f005 f978 	bl	8007030 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001d40:	e02d      	b.n	8001d9e <HAL_SPI_MspInit+0x142>
  else if(spiHandle->Instance==SPI5)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1d      	ldr	r2, [pc, #116]	@ (8001dbc <HAL_SPI_MspInit+0x160>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d128      	bne.n	8001d9e <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001d4c:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d50:	4a16      	ldr	r2, [pc, #88]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d56:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d58:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d64:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d68:	4a10      	ldr	r2, [pc, #64]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001d6a:	f043 0320 	orr.w	r3, r3, #32
 8001d6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d70:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <HAL_SPI_MspInit+0x150>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d7c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001d8e:	2305      	movs	r3, #5
 8001d90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d96:	4619      	mov	r1, r3
 8001d98:	4809      	ldr	r0, [pc, #36]	@ (8001dc0 <HAL_SPI_MspInit+0x164>)
 8001d9a:	f005 f949 	bl	8007030 <HAL_GPIO_Init>
}
 8001d9e:	bf00      	nop
 8001da0:	3738      	adds	r7, #56	@ 0x38
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40013000 	.word	0x40013000
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	40021800 	.word	0x40021800
 8001dbc:	40015000 	.word	0x40015000
 8001dc0:	40021400 	.word	0x40021400

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_MspInit+0x44>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	4a0e      	ldr	r2, [pc, #56]	@ (8001e08 <HAL_MspInit+0x44>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <HAL_MspInit+0x44>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_MspInit+0x44>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <HAL_MspInit+0x44>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_MspInit+0x44>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001dfa:	2005      	movs	r0, #5
 8001dfc:	f005 f8d6 	bl	8006fac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800

08001e0c <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e10:	f004 fbbe 	bl	8006590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	count++;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <TIM2_IRQHandler+0x28>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <TIM2_IRQHandler+0x28>)
 8001e26:	701a      	strb	r2, [r3, #0]
	if (count > 100) {
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <TIM2_IRQHandler+0x28>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b64      	cmp	r3, #100	@ 0x64
 8001e2e:	d902      	bls.n	8001e36 <TIM2_IRQHandler+0x1e>
		count = 0;
 8001e30:	4b03      	ldr	r3, [pc, #12]	@ (8001e40 <TIM2_IRQHandler+0x28>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e36:	4803      	ldr	r0, [pc, #12]	@ (8001e44 <TIM2_IRQHandler+0x2c>)
 8001e38:	f007 fba5 	bl	8009586 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000594 	.word	0x20000594
 8001e44:	20000474 	.word	0x20000474

08001e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
	return 1;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_kill>:

int _kill(int pid, int sig)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e62:	f00b f929 	bl	800d0b8 <__errno>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2216      	movs	r2, #22
 8001e6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_exit>:

void _exit (int status)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ffe7 	bl	8001e58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e8a:	bf00      	nop
 8001e8c:	e7fd      	b.n	8001e8a <_exit+0x12>

08001e8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e00a      	b.n	8001eb6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ea0:	f3af 8000 	nop.w
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	60ba      	str	r2, [r7, #8]
 8001eac:	b2ca      	uxtb	r2, r1
 8001eae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	dbf0      	blt.n	8001ea0 <_read+0x12>
	}

return len;
 8001ebe:	687b      	ldr	r3, [r7, #4]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e009      	b.n	8001eee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	60ba      	str	r2, [r7, #8]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3301      	adds	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbf1      	blt.n	8001eda <_write+0x12>
	}
	return len;
 8001ef6:	687b      	ldr	r3, [r7, #4]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_close>:

int _close(int file)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	return -1;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f28:	605a      	str	r2, [r3, #4]
	return 0;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_isatty>:

int _isatty(int file)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	return 1;
 8001f40:	2301      	movs	r3, #1
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
	return 0;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	@ (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d207      	bcs.n	8001fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f98:	f00b f88e 	bl	800d0b8 <__errno>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fa6:	e009      	b.n	8001fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fae:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <_sbrk+0x64>)
 8001fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20080000 	.word	0x20080000
 8001fc8:	00000400 	.word	0x00000400
 8001fcc:	20000424 	.word	0x20000424
 8001fd0:	200007d8 	.word	0x200007d8

08001fd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd8:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <SystemInit+0x5c>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fde:	4a14      	ldr	r2, [pc, #80]	@ (8002030 <SystemInit+0x5c>)
 8001fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <SystemInit+0x60>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a11      	ldr	r2, [pc, #68]	@ (8002034 <SystemInit+0x60>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <SystemInit+0x60>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <SystemInit+0x60>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	490d      	ldr	r1, [pc, #52]	@ (8002034 <SystemInit+0x60>)
 8002000:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <SystemInit+0x64>)
 8002002:	4013      	ands	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <SystemInit+0x60>)
 8002008:	4a0c      	ldr	r2, [pc, #48]	@ (800203c <SystemInit+0x68>)
 800200a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <SystemInit+0x60>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a08      	ldr	r2, [pc, #32]	@ (8002034 <SystemInit+0x60>)
 8002012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002016:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <SystemInit+0x60>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800201e:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <SystemInit+0x5c>)
 8002020:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002024:	609a      	str	r2, [r3, #8]
#endif
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00
 8002034:	40023800 	.word	0x40023800
 8002038:	fef6ffff 	.word	0xfef6ffff
 800203c:	24003010 	.word	0x24003010

08002040 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800205e:	4b20      	ldr	r3, [pc, #128]	@ (80020e0 <MX_TIM1_Init+0xa0>)
 8002060:	4a20      	ldr	r2, [pc, #128]	@ (80020e4 <MX_TIM1_Init+0xa4>)
 8002062:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000-1;
 8002064:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <MX_TIM1_Init+0xa0>)
 8002066:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800206a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206c:	4b1c      	ldr	r3, [pc, #112]	@ (80020e0 <MX_TIM1_Init+0xa0>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <MX_TIM1_Init+0xa0>)
 8002074:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002078:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <MX_TIM1_Init+0xa0>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002080:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <MX_TIM1_Init+0xa0>)
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002086:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <MX_TIM1_Init+0xa0>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800208c:	4814      	ldr	r0, [pc, #80]	@ (80020e0 <MX_TIM1_Init+0xa0>)
 800208e:	f007 f953 	bl	8009338 <HAL_TIM_Base_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002098:	f7ff fa76 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4619      	mov	r1, r3
 80020a8:	480d      	ldr	r0, [pc, #52]	@ (80020e0 <MX_TIM1_Init+0xa0>)
 80020aa:	f007 fc87 	bl	80099bc <HAL_TIM_ConfigClockSource>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80020b4:	f7ff fa68 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	@ (80020e0 <MX_TIM1_Init+0xa0>)
 80020ca:	f008 f917 	bl	800a2fc <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80020d4:	f7ff fa58 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000428 	.word	0x20000428
 80020e4:	40010000 	.word	0x40010000

080020e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08e      	sub	sp, #56	@ 0x38
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002108:	463b      	mov	r3, r7
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
 8002116:	615a      	str	r2, [r3, #20]
 8002118:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800211a:	4b2e      	ldr	r3, [pc, #184]	@ (80021d4 <MX_TIM2_Init+0xec>)
 800211c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002120:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 8002122:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <MX_TIM2_Init+0xec>)
 8002124:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8002128:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212a:	4b2a      	ldr	r3, [pc, #168]	@ (80021d4 <MX_TIM2_Init+0xec>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8002130:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <MX_TIM2_Init+0xec>)
 8002132:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002136:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002138:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <MX_TIM2_Init+0xec>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213e:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <MX_TIM2_Init+0xec>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002144:	4823      	ldr	r0, [pc, #140]	@ (80021d4 <MX_TIM2_Init+0xec>)
 8002146:	f007 f8f7 	bl	8009338 <HAL_TIM_Base_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002150:	f7ff fa1a 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002158:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800215a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800215e:	4619      	mov	r1, r3
 8002160:	481c      	ldr	r0, [pc, #112]	@ (80021d4 <MX_TIM2_Init+0xec>)
 8002162:	f007 fc2b 	bl	80099bc <HAL_TIM_ConfigClockSource>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800216c:	f7ff fa0c 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002170:	4818      	ldr	r0, [pc, #96]	@ (80021d4 <MX_TIM2_Init+0xec>)
 8002172:	f007 f9b1 	bl	80094d8 <HAL_TIM_PWM_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800217c:	f7ff fa04 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4619      	mov	r1, r3
 800218e:	4811      	ldr	r0, [pc, #68]	@ (80021d4 <MX_TIM2_Init+0xec>)
 8002190:	f008 f8b4 	bl	800a2fc <HAL_TIMEx_MasterConfigSynchronization>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800219a:	f7ff f9f5 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800219e:	2360      	movs	r3, #96	@ 0x60
 80021a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021ae:	463b      	mov	r3, r7
 80021b0:	220c      	movs	r2, #12
 80021b2:	4619      	mov	r1, r3
 80021b4:	4807      	ldr	r0, [pc, #28]	@ (80021d4 <MX_TIM2_Init+0xec>)
 80021b6:	f007 faed 	bl	8009794 <HAL_TIM_PWM_ConfigChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80021c0:	f7ff f9e2 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021c4:	4803      	ldr	r0, [pc, #12]	@ (80021d4 <MX_TIM2_Init+0xec>)
 80021c6:	f000 f8b9 	bl	800233c <HAL_TIM_MspPostInit>

}
 80021ca:	bf00      	nop
 80021cc:	3738      	adds	r7, #56	@ 0x38
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000474 	.word	0x20000474

080021d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	@ 0x28
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ea:	463b      	mov	r3, r7
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	615a      	str	r2, [r3, #20]
 80021fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021fc:	4b21      	ldr	r3, [pc, #132]	@ (8002284 <MX_TIM3_Init+0xac>)
 80021fe:	4a22      	ldr	r2, [pc, #136]	@ (8002288 <MX_TIM3_Init+0xb0>)
 8002200:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <MX_TIM3_Init+0xac>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <MX_TIM3_Init+0xac>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800220e:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <MX_TIM3_Init+0xac>)
 8002210:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002214:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002216:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <MX_TIM3_Init+0xac>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <MX_TIM3_Init+0xac>)
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002222:	4818      	ldr	r0, [pc, #96]	@ (8002284 <MX_TIM3_Init+0xac>)
 8002224:	f007 f958 	bl	80094d8 <HAL_TIM_PWM_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800222e:	f7ff f9ab 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	4810      	ldr	r0, [pc, #64]	@ (8002284 <MX_TIM3_Init+0xac>)
 8002242:	f008 f85b 	bl	800a2fc <HAL_TIMEx_MasterConfigSynchronization>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800224c:	f7ff f99c 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002250:	2360      	movs	r3, #96	@ 0x60
 8002252:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002260:	463b      	mov	r3, r7
 8002262:	2200      	movs	r2, #0
 8002264:	4619      	mov	r1, r3
 8002266:	4807      	ldr	r0, [pc, #28]	@ (8002284 <MX_TIM3_Init+0xac>)
 8002268:	f007 fa94 	bl	8009794 <HAL_TIM_PWM_ConfigChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002272:	f7ff f989 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002276:	4803      	ldr	r0, [pc, #12]	@ (8002284 <MX_TIM3_Init+0xac>)
 8002278:	f000 f860 	bl	800233c <HAL_TIM_MspPostInit>

}
 800227c:	bf00      	nop
 800227e:	3728      	adds	r7, #40	@ 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200004c0 	.word	0x200004c0
 8002288:	40000400 	.word	0x40000400

0800228c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a16      	ldr	r2, [pc, #88]	@ (80022f4 <HAL_TIM_Base_MspInit+0x68>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d10c      	bne.n	80022b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800229e:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <HAL_TIM_Base_MspInit+0x6c>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	4a15      	ldr	r2, [pc, #84]	@ (80022f8 <HAL_TIM_Base_MspInit+0x6c>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022aa:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <HAL_TIM_Base_MspInit+0x6c>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80022b6:	e018      	b.n	80022ea <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c0:	d113      	bne.n	80022ea <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022c2:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <HAL_TIM_Base_MspInit+0x6c>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4a0c      	ldr	r2, [pc, #48]	@ (80022f8 <HAL_TIM_Base_MspInit+0x6c>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ce:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <HAL_TIM_Base_MspInit+0x6c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2102      	movs	r1, #2
 80022de:	201c      	movs	r0, #28
 80022e0:	f004 fe6f 	bl	8006fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022e4:	201c      	movs	r0, #28
 80022e6:	f004 fe88 	bl	8006ffa <HAL_NVIC_EnableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <HAL_TIM_PWM_MspInit+0x38>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10b      	bne.n	8002326 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <HAL_TIM_PWM_MspInit+0x3c>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_TIM_PWM_MspInit+0x3c>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	6413      	str	r3, [r2, #64]	@ 0x40
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <HAL_TIM_PWM_MspInit+0x3c>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40000400 	.word	0x40000400
 8002338:	40023800 	.word	0x40023800

0800233c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	@ 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800235c:	d11c      	bne.n	8002398 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	4b21      	ldr	r3, [pc, #132]	@ (80023e4 <HAL_TIM_MspPostInit+0xa8>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a20      	ldr	r2, [pc, #128]	@ (80023e4 <HAL_TIM_MspPostInit+0xa8>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b1e      	ldr	r3, [pc, #120]	@ (80023e4 <HAL_TIM_MspPostInit+0xa8>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002376:	2308      	movs	r3, #8
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002386:	2301      	movs	r3, #1
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4619      	mov	r1, r3
 8002390:	4815      	ldr	r0, [pc, #84]	@ (80023e8 <HAL_TIM_MspPostInit+0xac>)
 8002392:	f004 fe4d 	bl	8007030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002396:	e020      	b.n	80023da <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a13      	ldr	r2, [pc, #76]	@ (80023ec <HAL_TIM_MspPostInit+0xb0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d11b      	bne.n	80023da <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <HAL_TIM_MspPostInit+0xa8>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	4a0f      	ldr	r2, [pc, #60]	@ (80023e4 <HAL_TIM_MspPostInit+0xa8>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ae:	4b0d      	ldr	r3, [pc, #52]	@ (80023e4 <HAL_TIM_MspPostInit+0xa8>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023ba:	2340      	movs	r3, #64	@ 0x40
 80023bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ca:	2302      	movs	r3, #2
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	4804      	ldr	r0, [pc, #16]	@ (80023e8 <HAL_TIM_MspPostInit+0xac>)
 80023d6:	f004 fe2b 	bl	8007030 <HAL_GPIO_Init>
}
 80023da:	bf00      	nop
 80023dc:	3728      	adds	r7, #40	@ 0x28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40000400 	.word	0x40000400

080023f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023f4:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <MX_USART3_UART_Init+0x58>)
 80023f6:	4a15      	ldr	r2, [pc, #84]	@ (800244c <MX_USART3_UART_Init+0x5c>)
 80023f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023fa:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <MX_USART3_UART_Init+0x58>)
 80023fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002400:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <MX_USART3_UART_Init+0x58>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002408:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <MX_USART3_UART_Init+0x58>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <MX_USART3_UART_Init+0x58>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <MX_USART3_UART_Init+0x58>)
 8002416:	220c      	movs	r2, #12
 8002418:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <MX_USART3_UART_Init+0x58>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <MX_USART3_UART_Init+0x58>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <MX_USART3_UART_Init+0x58>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <MX_USART3_UART_Init+0x58>)
 800242e:	2200      	movs	r2, #0
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	@ (8002448 <MX_USART3_UART_Init+0x58>)
 8002434:	f008 f80e 	bl	800a454 <HAL_UART_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800243e:	f7ff f8a3 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	2000050c 	.word	0x2000050c
 800244c:	40004800 	.word	0x40004800

08002450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b0ae      	sub	sp, #184	@ 0xb8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2290      	movs	r2, #144	@ 0x90
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f00a fe05 	bl	800d080 <memset>
  if(uartHandle->Instance==USART3)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a22      	ldr	r2, [pc, #136]	@ (8002504 <HAL_UART_MspInit+0xb4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d13c      	bne.n	80024fa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002484:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002486:	2300      	movs	r3, #0
 8002488:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4618      	mov	r0, r3
 8002490:	f005 fce0 	bl	8007e54 <HAL_RCCEx_PeriphCLKConfig>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800249a:	f7ff f875 	bl	8001588 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800249e:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <HAL_UART_MspInit+0xb8>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	4a19      	ldr	r2, [pc, #100]	@ (8002508 <HAL_UART_MspInit+0xb8>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024aa:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <HAL_UART_MspInit+0xb8>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <HAL_UART_MspInit+0xb8>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	4a13      	ldr	r2, [pc, #76]	@ (8002508 <HAL_UART_MspInit+0xb8>)
 80024bc:	f043 0308 	orr.w	r3, r3, #8
 80024c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <HAL_UART_MspInit+0xb8>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80024ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024e8:	2307      	movs	r3, #7
 80024ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4805      	ldr	r0, [pc, #20]	@ (800250c <HAL_UART_MspInit+0xbc>)
 80024f6:	f004 fd9b 	bl	8007030 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024fa:	bf00      	nop
 80024fc:	37b8      	adds	r7, #184	@ 0xb8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40004800 	.word	0x40004800
 8002508:	40023800 	.word	0x40023800
 800250c:	40020c00 	.word	0x40020c00

08002510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002510:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002548 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002514:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002516:	e003      	b.n	8002520 <LoopCopyDataInit>

08002518 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800251a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800251c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800251e:	3104      	adds	r1, #4

08002520 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002520:	480b      	ldr	r0, [pc, #44]	@ (8002550 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002522:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002524:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002526:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002528:	d3f6      	bcc.n	8002518 <CopyDataInit>
  ldr  r2, =_sbss
 800252a:	4a0b      	ldr	r2, [pc, #44]	@ (8002558 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800252c:	e002      	b.n	8002534 <LoopFillZerobss>

0800252e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800252e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002530:	f842 3b04 	str.w	r3, [r2], #4

08002534 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002536:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002538:	d3f9      	bcc.n	800252e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800253a:	f7ff fd4b 	bl	8001fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800253e:	f00a fdc1 	bl	800d0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002542:	f7fe fde1 	bl	8001108 <main>
  bx  lr    
 8002546:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002548:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800254c:	08010bd8 	.word	0x08010bd8
  ldr  r0, =_sdata
 8002550:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002554:	20000250 	.word	0x20000250
  ldr  r2, =_sbss
 8002558:	20000250 	.word	0x20000250
  ldr  r3, = _ebss
 800255c:	200007d4 	.word	0x200007d4

08002560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002560:	e7fe      	b.n	8002560 <ADC_IRQHandler>
	...

08002564 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b089      	sub	sp, #36	@ 0x24
 8002568:	af02      	add	r7, sp, #8
 800256a:	4604      	mov	r4, r0
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4623      	mov	r3, r4
 8002574:	71fb      	strb	r3, [r7, #7]
 8002576:	4603      	mov	r3, r0
 8002578:	71bb      	strb	r3, [r7, #6]
 800257a:	460b      	mov	r3, r1
 800257c:	717b      	strb	r3, [r7, #5]
 800257e:	4613      	mov	r3, r2
 8002580:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	2b1f      	cmp	r3, #31
 800258a:	d802      	bhi.n	8002592 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	71fb      	strb	r3, [r7, #7]
 8002590:	e002      	b.n	8002598 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	3b20      	subs	r3, #32
 8002596:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002598:	2300      	movs	r3, #0
 800259a:	753b      	strb	r3, [r7, #20]
 800259c:	e012      	b.n	80025c4 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800259e:	7dfa      	ldrb	r2, [r7, #23]
 80025a0:	7d38      	ldrb	r0, [r7, #20]
 80025a2:	7d39      	ldrb	r1, [r7, #20]
 80025a4:	4c3b      	ldr	r4, [pc, #236]	@ (8002694 <ILI9341_Draw_Char+0x130>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4423      	add	r3, r4
 80025b0:	4403      	add	r3, r0
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	f101 0318 	add.w	r3, r1, #24
 80025b8:	443b      	add	r3, r7
 80025ba:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80025be:	7d3b      	ldrb	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	753b      	strb	r3, [r7, #20]
 80025c4:	7d3b      	ldrb	r3, [r7, #20]
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d9e9      	bls.n	800259e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80025ca:	79bb      	ldrb	r3, [r7, #6]
 80025cc:	b298      	uxth	r0, r3
 80025ce:	797b      	ldrb	r3, [r7, #5]
 80025d0:	b299      	uxth	r1, r3
 80025d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80025d4:	461a      	mov	r2, r3
 80025d6:	0052      	lsls	r2, r2, #1
 80025d8:	4413      	add	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	b29c      	uxth	r4, r3
 80025e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4623      	mov	r3, r4
 80025ea:	f000 fc97 	bl	8002f1c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80025ee:	2300      	movs	r3, #0
 80025f0:	757b      	strb	r3, [r7, #21]
 80025f2:	e047      	b.n	8002684 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80025f4:	2300      	movs	r3, #0
 80025f6:	75bb      	strb	r3, [r7, #22]
 80025f8:	e03e      	b.n	8002678 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 80025fa:	7d7b      	ldrb	r3, [r7, #21]
 80025fc:	3318      	adds	r3, #24
 80025fe:	443b      	add	r3, r7
 8002600:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002604:	461a      	mov	r2, r3
 8002606:	7dbb      	ldrb	r3, [r7, #22]
 8002608:	fa42 f303 	asr.w	r3, r2, r3
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02e      	beq.n	8002672 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8002614:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002616:	2b01      	cmp	r3, #1
 8002618:	d110      	bne.n	800263c <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 800261a:	79bb      	ldrb	r3, [r7, #6]
 800261c:	b29a      	uxth	r2, r3
 800261e:	7d7b      	ldrb	r3, [r7, #21]
 8002620:	b29b      	uxth	r3, r3
 8002622:	4413      	add	r3, r2
 8002624:	b298      	uxth	r0, r3
 8002626:	797b      	ldrb	r3, [r7, #5]
 8002628:	b29a      	uxth	r2, r3
 800262a:	7dbb      	ldrb	r3, [r7, #22]
 800262c:	b29b      	uxth	r3, r3
 800262e:	4413      	add	r3, r2
 8002630:	b29b      	uxth	r3, r3
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	4619      	mov	r1, r3
 8002636:	f000 fb97 	bl	8002d68 <ILI9341_Draw_Pixel>
 800263a:	e01a      	b.n	8002672 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 800263c:	79bb      	ldrb	r3, [r7, #6]
 800263e:	b29a      	uxth	r2, r3
 8002640:	7d7b      	ldrb	r3, [r7, #21]
 8002642:	b29b      	uxth	r3, r3
 8002644:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8002646:	fb11 f303 	smulbb	r3, r1, r3
 800264a:	b29b      	uxth	r3, r3
 800264c:	4413      	add	r3, r2
 800264e:	b298      	uxth	r0, r3
 8002650:	797b      	ldrb	r3, [r7, #5]
 8002652:	b29a      	uxth	r2, r3
 8002654:	7dbb      	ldrb	r3, [r7, #22]
 8002656:	b29b      	uxth	r3, r3
 8002658:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800265a:	fb11 f303 	smulbb	r3, r1, r3
 800265e:	b29b      	uxth	r3, r3
 8002660:	4413      	add	r3, r2
 8002662:	b299      	uxth	r1, r3
 8002664:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8002666:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	4623      	mov	r3, r4
 800266e:	f000 fc55 	bl	8002f1c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002672:	7dbb      	ldrb	r3, [r7, #22]
 8002674:	3301      	adds	r3, #1
 8002676:	75bb      	strb	r3, [r7, #22]
 8002678:	7dbb      	ldrb	r3, [r7, #22]
 800267a:	2b07      	cmp	r3, #7
 800267c:	d9bd      	bls.n	80025fa <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800267e:	7d7b      	ldrb	r3, [r7, #21]
 8002680:	3301      	adds	r3, #1
 8002682:	757b      	strb	r3, [r7, #21]
 8002684:	7d7b      	ldrb	r3, [r7, #21]
 8002686:	2b05      	cmp	r3, #5
 8002688:	d9b4      	bls.n	80025f4 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd90      	pop	{r4, r7, pc}
 8002694:	08010250 	.word	0x08010250

08002698 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b085      	sub	sp, #20
 800269c:	af02      	add	r7, sp, #8
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	4608      	mov	r0, r1
 80026a2:	4611      	mov	r1, r2
 80026a4:	461a      	mov	r2, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	70fb      	strb	r3, [r7, #3]
 80026aa:	460b      	mov	r3, r1
 80026ac:	70bb      	strb	r3, [r7, #2]
 80026ae:	4613      	mov	r3, r2
 80026b0:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80026b2:	e017      	b.n	80026e4 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	7818      	ldrb	r0, [r3, #0]
 80026bc:	883c      	ldrh	r4, [r7, #0]
 80026be:	78ba      	ldrb	r2, [r7, #2]
 80026c0:	78f9      	ldrb	r1, [r7, #3]
 80026c2:	8bbb      	ldrh	r3, [r7, #28]
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	8b3b      	ldrh	r3, [r7, #24]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	4623      	mov	r3, r4
 80026cc:	f7ff ff4a 	bl	8002564 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80026d0:	8b3b      	ldrh	r3, [r7, #24]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	0052      	lsls	r2, r2, #1
 80026d8:	4413      	add	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	4413      	add	r3, r2
 80026e2:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1e3      	bne.n	80026b4 <ILI9341_Draw_Text+0x1c>
    }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd90      	pop	{r4, r7, pc}
	...

080026f8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80026fc:	f7ff fa70 	bl	8001be0 <MX_SPI5_Init>
MX_GPIO_Init();																			//GPIO INIT
 8002700:	f7fe fafc 	bl	8000cfc <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD1_CS_PORT, LCD1_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002704:	2200      	movs	r2, #0
 8002706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800270a:	480e      	ldr	r0, [pc, #56]	@ (8002744 <ILI9341_SPI_Init+0x4c>)
 800270c:	f004 fe54 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD2_CS_PORT, LCD2_CS_PIN, GPIO_PIN_RESET);	//CS2 OFF
 8002710:	2200      	movs	r2, #0
 8002712:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002716:	480b      	ldr	r0, [pc, #44]	@ (8002744 <ILI9341_SPI_Init+0x4c>)
 8002718:	f004 fe4e 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD3_CS_PORT, LCD3_CS_PIN, GPIO_PIN_RESET);	//CS3 OFF
 800271c:	2200      	movs	r2, #0
 800271e:	2140      	movs	r1, #64	@ 0x40
 8002720:	4809      	ldr	r0, [pc, #36]	@ (8002748 <ILI9341_SPI_Init+0x50>)
 8002722:	f004 fe49 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD4_CS_PORT, LCD4_CS_PIN, GPIO_PIN_RESET);   //CS4 OFF
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800272c:	4805      	ldr	r0, [pc, #20]	@ (8002744 <ILI9341_SPI_Init+0x4c>)
 800272e:	f004 fe43 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD5_CS_PORT, LCD5_CS_PIN, GPIO_PIN_RESET);   //CS5 OFF
 8002732:	2200      	movs	r2, #0
 8002734:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002738:	4804      	ldr	r0, [pc, #16]	@ (800274c <ILI9341_SPI_Init+0x54>)
 800273a:	f004 fe3d 	bl	80073b8 <HAL_GPIO_WritePin>
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40020400 	.word	0x40020400
 8002748:	40020800 	.word	0x40020800
 800274c:	40020000 	.word	0x40020000

08002750 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800275a:	1df9      	adds	r1, r7, #7
 800275c:	2301      	movs	r3, #1
 800275e:	2201      	movs	r2, #1
 8002760:	4803      	ldr	r0, [pc, #12]	@ (8002770 <ILI9341_SPI_Send+0x20>)
 8002762:	f006 f8ca 	bl	80088fa <HAL_SPI_Transmit>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200003c0 	.word	0x200003c0

08002774 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002784:	480b      	ldr	r0, [pc, #44]	@ (80027b4 <ILI9341_Write_Command+0x40>)
 8002786:	f004 fe17 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800278a:	2200      	movs	r2, #0
 800278c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002790:	4808      	ldr	r0, [pc, #32]	@ (80027b4 <ILI9341_Write_Command+0x40>)
 8002792:	f004 fe11 	bl	80073b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ffd9 	bl	8002750 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800279e:	2201      	movs	r2, #1
 80027a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027a4:	4803      	ldr	r0, [pc, #12]	@ (80027b4 <ILI9341_Write_Command+0x40>)
 80027a6:	f004 fe07 	bl	80073b8 <HAL_GPIO_WritePin>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40020800 	.word	0x40020800

080027b8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80027c2:	2201      	movs	r2, #1
 80027c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027c8:	480b      	ldr	r0, [pc, #44]	@ (80027f8 <ILI9341_Write_Data+0x40>)
 80027ca:	f004 fdf5 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80027ce:	2200      	movs	r2, #0
 80027d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027d4:	4808      	ldr	r0, [pc, #32]	@ (80027f8 <ILI9341_Write_Data+0x40>)
 80027d6:	f004 fdef 	bl	80073b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ffb7 	bl	8002750 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80027e2:	2201      	movs	r2, #1
 80027e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027e8:	4803      	ldr	r0, [pc, #12]	@ (80027f8 <ILI9341_Write_Data+0x40>)
 80027ea:	f004 fde5 	bl	80073b8 <HAL_GPIO_WritePin>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40020800 	.word	0x40020800

080027fc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4604      	mov	r4, r0
 8002804:	4608      	mov	r0, r1
 8002806:	4611      	mov	r1, r2
 8002808:	461a      	mov	r2, r3
 800280a:	4623      	mov	r3, r4
 800280c:	80fb      	strh	r3, [r7, #6]
 800280e:	4603      	mov	r3, r0
 8002810:	80bb      	strh	r3, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	807b      	strh	r3, [r7, #2]
 8002816:	4613      	mov	r3, r2
 8002818:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800281a:	202a      	movs	r0, #42	@ 0x2a
 800281c:	f7ff ffaa 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	b29b      	uxth	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ffc5 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ffc0 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	b29b      	uxth	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ffb9 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ffb4 	bl	80027b8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002850:	202b      	movs	r0, #43	@ 0x2b
 8002852:	f7ff ff8f 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002856:	88bb      	ldrh	r3, [r7, #4]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	b29b      	uxth	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ffaa 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002864:	88bb      	ldrh	r3, [r7, #4]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ffa5 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800286e:	883b      	ldrh	r3, [r7, #0]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	b29b      	uxth	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ff9e 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800287c:	883b      	ldrh	r3, [r7, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff99 	bl	80027b8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002886:	202c      	movs	r0, #44	@ 0x2c
 8002888:	f7ff ff74 	bl	8002774 <ILI9341_Write_Command>
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}

08002894 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8002898:	2200      	movs	r2, #0
 800289a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800289e:	4817      	ldr	r0, [pc, #92]	@ (80028fc <ILI9341_Reset+0x68>)
 80028a0:	f004 fd8a 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80028a4:	20c8      	movs	r0, #200	@ 0xc8
 80028a6:	f003 fe93 	bl	80065d0 <HAL_Delay>
HAL_GPIO_WritePin(LCD1_CS_PORT, LCD1_CS_PIN, GPIO_PIN_RESET);
 80028aa:	2200      	movs	r2, #0
 80028ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028b0:	4813      	ldr	r0, [pc, #76]	@ (8002900 <ILI9341_Reset+0x6c>)
 80028b2:	f004 fd81 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD2_CS_PORT, LCD2_CS_PIN, GPIO_PIN_RESET);
 80028b6:	2200      	movs	r2, #0
 80028b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028bc:	4810      	ldr	r0, [pc, #64]	@ (8002900 <ILI9341_Reset+0x6c>)
 80028be:	f004 fd7b 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD3_CS_PORT, LCD3_CS_PIN, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2140      	movs	r1, #64	@ 0x40
 80028c6:	480d      	ldr	r0, [pc, #52]	@ (80028fc <ILI9341_Reset+0x68>)
 80028c8:	f004 fd76 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD4_CS_PORT, LCD4_CS_PIN, GPIO_PIN_RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028d2:	480b      	ldr	r0, [pc, #44]	@ (8002900 <ILI9341_Reset+0x6c>)
 80028d4:	f004 fd70 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD5_CS_PORT, LCD5_CS_PIN, GPIO_PIN_RESET);
 80028d8:	2200      	movs	r2, #0
 80028da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028de:	4809      	ldr	r0, [pc, #36]	@ (8002904 <ILI9341_Reset+0x70>)
 80028e0:	f004 fd6a 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80028e4:	20c8      	movs	r0, #200	@ 0xc8
 80028e6:	f003 fe73 	bl	80065d0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80028ea:	2201      	movs	r2, #1
 80028ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80028f0:	4802      	ldr	r0, [pc, #8]	@ (80028fc <ILI9341_Reset+0x68>)
 80028f2:	f004 fd61 	bl	80073b8 <HAL_GPIO_WritePin>
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40020800 	.word	0x40020800
 8002900:	40020400 	.word	0x40020400
 8002904:	40020000 	.word	0x40020000

08002908 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002916:	2036      	movs	r0, #54	@ 0x36
 8002918:	f7ff ff2c 	bl	8002774 <ILI9341_Write_Command>
HAL_Delay(1);
 800291c:	2001      	movs	r0, #1
 800291e:	f003 fe57 	bl	80065d0 <HAL_Delay>
	
switch(screen_rotation) 
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d837      	bhi.n	8002998 <ILI9341_Set_Rotation+0x90>
 8002928:	a201      	add	r2, pc, #4	@ (adr r2, 8002930 <ILI9341_Set_Rotation+0x28>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002941 	.word	0x08002941
 8002934:	08002957 	.word	0x08002957
 8002938:	0800296d 	.word	0x0800296d
 800293c:	08002983 	.word	0x08002983
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002940:	2048      	movs	r0, #72	@ 0x48
 8002942:	f7ff ff39 	bl	80027b8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002946:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <ILI9341_Set_Rotation+0x9c>)
 8002948:	22f0      	movs	r2, #240	@ 0xf0
 800294a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800294c:	4b16      	ldr	r3, [pc, #88]	@ (80029a8 <ILI9341_Set_Rotation+0xa0>)
 800294e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002952:	801a      	strh	r2, [r3, #0]
			break;
 8002954:	e021      	b.n	800299a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002956:	2028      	movs	r0, #40	@ 0x28
 8002958:	f7ff ff2e 	bl	80027b8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <ILI9341_Set_Rotation+0x9c>)
 800295e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002962:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <ILI9341_Set_Rotation+0xa0>)
 8002966:	22f0      	movs	r2, #240	@ 0xf0
 8002968:	801a      	strh	r2, [r3, #0]
			break;
 800296a:	e016      	b.n	800299a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800296c:	2088      	movs	r0, #136	@ 0x88
 800296e:	f7ff ff23 	bl	80027b8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002972:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <ILI9341_Set_Rotation+0x9c>)
 8002974:	22f0      	movs	r2, #240	@ 0xf0
 8002976:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <ILI9341_Set_Rotation+0xa0>)
 800297a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800297e:	801a      	strh	r2, [r3, #0]
			break;
 8002980:	e00b      	b.n	800299a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002982:	20e8      	movs	r0, #232	@ 0xe8
 8002984:	f7ff ff18 	bl	80027b8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002988:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <ILI9341_Set_Rotation+0x9c>)
 800298a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800298e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <ILI9341_Set_Rotation+0xa0>)
 8002992:	22f0      	movs	r2, #240	@ 0xf0
 8002994:	801a      	strh	r2, [r3, #0]
			break;
 8002996:	e000      	b.n	800299a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002998:	bf00      	nop
	}
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000012 	.word	0x20000012
 80029a8:	20000010 	.word	0x20000010

080029ac <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80029b0:	2201      	movs	r2, #1
 80029b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029b6:	4802      	ldr	r0, [pc, #8]	@ (80029c0 <ILI9341_Enable+0x14>)
 80029b8:	f004 fcfe 	bl	80073b8 <HAL_GPIO_WritePin>
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40020800 	.word	0x40020800

080029c4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80029c8:	f7ff fff0 	bl	80029ac <ILI9341_Enable>
ILI9341_SPI_Init();
 80029cc:	f7ff fe94 	bl	80026f8 <ILI9341_SPI_Init>
ILI9341_Reset();
 80029d0:	f7ff ff60 	bl	8002894 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7ff fecd 	bl	8002774 <ILI9341_Write_Command>
HAL_Delay(1000);
 80029da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029de:	f003 fdf7 	bl	80065d0 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80029e2:	20cb      	movs	r0, #203	@ 0xcb
 80029e4:	f7ff fec6 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80029e8:	2039      	movs	r0, #57	@ 0x39
 80029ea:	f7ff fee5 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80029ee:	202c      	movs	r0, #44	@ 0x2c
 80029f0:	f7ff fee2 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7ff fedf 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80029fa:	2034      	movs	r0, #52	@ 0x34
 80029fc:	f7ff fedc 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002a00:	2002      	movs	r0, #2
 8002a02:	f7ff fed9 	bl	80027b8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002a06:	20cf      	movs	r0, #207	@ 0xcf
 8002a08:	f7ff feb4 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7ff fed3 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002a12:	20c1      	movs	r0, #193	@ 0xc1
 8002a14:	f7ff fed0 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002a18:	2030      	movs	r0, #48	@ 0x30
 8002a1a:	f7ff fecd 	bl	80027b8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002a1e:	20e8      	movs	r0, #232	@ 0xe8
 8002a20:	f7ff fea8 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002a24:	2085      	movs	r0, #133	@ 0x85
 8002a26:	f7ff fec7 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7ff fec4 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002a30:	2078      	movs	r0, #120	@ 0x78
 8002a32:	f7ff fec1 	bl	80027b8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002a36:	20ea      	movs	r0, #234	@ 0xea
 8002a38:	f7ff fe9c 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7ff febb 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7ff feb8 	bl	80027b8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002a48:	20ed      	movs	r0, #237	@ 0xed
 8002a4a:	f7ff fe93 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002a4e:	2064      	movs	r0, #100	@ 0x64
 8002a50:	f7ff feb2 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002a54:	2003      	movs	r0, #3
 8002a56:	f7ff feaf 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002a5a:	2012      	movs	r0, #18
 8002a5c:	f7ff feac 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002a60:	2081      	movs	r0, #129	@ 0x81
 8002a62:	f7ff fea9 	bl	80027b8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002a66:	20f7      	movs	r0, #247	@ 0xf7
 8002a68:	f7ff fe84 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002a6c:	2020      	movs	r0, #32
 8002a6e:	f7ff fea3 	bl	80027b8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002a72:	20c0      	movs	r0, #192	@ 0xc0
 8002a74:	f7ff fe7e 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002a78:	2023      	movs	r0, #35	@ 0x23
 8002a7a:	f7ff fe9d 	bl	80027b8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002a7e:	20c1      	movs	r0, #193	@ 0xc1
 8002a80:	f7ff fe78 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002a84:	2010      	movs	r0, #16
 8002a86:	f7ff fe97 	bl	80027b8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002a8a:	20c5      	movs	r0, #197	@ 0xc5
 8002a8c:	f7ff fe72 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002a90:	203e      	movs	r0, #62	@ 0x3e
 8002a92:	f7ff fe91 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002a96:	2028      	movs	r0, #40	@ 0x28
 8002a98:	f7ff fe8e 	bl	80027b8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002a9c:	20c7      	movs	r0, #199	@ 0xc7
 8002a9e:	f7ff fe69 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002aa2:	2086      	movs	r0, #134	@ 0x86
 8002aa4:	f7ff fe88 	bl	80027b8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002aa8:	2036      	movs	r0, #54	@ 0x36
 8002aaa:	f7ff fe63 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002aae:	2048      	movs	r0, #72	@ 0x48
 8002ab0:	f7ff fe82 	bl	80027b8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002ab4:	203a      	movs	r0, #58	@ 0x3a
 8002ab6:	f7ff fe5d 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002aba:	2055      	movs	r0, #85	@ 0x55
 8002abc:	f7ff fe7c 	bl	80027b8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002ac0:	20b1      	movs	r0, #177	@ 0xb1
 8002ac2:	f7ff fe57 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7ff fe76 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002acc:	2018      	movs	r0, #24
 8002ace:	f7ff fe73 	bl	80027b8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002ad2:	20b6      	movs	r0, #182	@ 0xb6
 8002ad4:	f7ff fe4e 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002ad8:	2008      	movs	r0, #8
 8002ada:	f7ff fe6d 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002ade:	2082      	movs	r0, #130	@ 0x82
 8002ae0:	f7ff fe6a 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002ae4:	2027      	movs	r0, #39	@ 0x27
 8002ae6:	f7ff fe67 	bl	80027b8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002aea:	20f2      	movs	r0, #242	@ 0xf2
 8002aec:	f7ff fe42 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7ff fe61 	bl	80027b8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002af6:	2026      	movs	r0, #38	@ 0x26
 8002af8:	f7ff fe3c 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002afc:	2001      	movs	r0, #1
 8002afe:	f7ff fe5b 	bl	80027b8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002b02:	20e0      	movs	r0, #224	@ 0xe0
 8002b04:	f7ff fe36 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002b08:	200f      	movs	r0, #15
 8002b0a:	f7ff fe55 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002b0e:	2031      	movs	r0, #49	@ 0x31
 8002b10:	f7ff fe52 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002b14:	202b      	movs	r0, #43	@ 0x2b
 8002b16:	f7ff fe4f 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002b1a:	200c      	movs	r0, #12
 8002b1c:	f7ff fe4c 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002b20:	200e      	movs	r0, #14
 8002b22:	f7ff fe49 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002b26:	2008      	movs	r0, #8
 8002b28:	f7ff fe46 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002b2c:	204e      	movs	r0, #78	@ 0x4e
 8002b2e:	f7ff fe43 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002b32:	20f1      	movs	r0, #241	@ 0xf1
 8002b34:	f7ff fe40 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002b38:	2037      	movs	r0, #55	@ 0x37
 8002b3a:	f7ff fe3d 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002b3e:	2007      	movs	r0, #7
 8002b40:	f7ff fe3a 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002b44:	2010      	movs	r0, #16
 8002b46:	f7ff fe37 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002b4a:	2003      	movs	r0, #3
 8002b4c:	f7ff fe34 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002b50:	200e      	movs	r0, #14
 8002b52:	f7ff fe31 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002b56:	2009      	movs	r0, #9
 8002b58:	f7ff fe2e 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7ff fe2b 	bl	80027b8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002b62:	20e1      	movs	r0, #225	@ 0xe1
 8002b64:	f7ff fe06 	bl	8002774 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7ff fe25 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002b6e:	200e      	movs	r0, #14
 8002b70:	f7ff fe22 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002b74:	2014      	movs	r0, #20
 8002b76:	f7ff fe1f 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	f7ff fe1c 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002b80:	2011      	movs	r0, #17
 8002b82:	f7ff fe19 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002b86:	2007      	movs	r0, #7
 8002b88:	f7ff fe16 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002b8c:	2031      	movs	r0, #49	@ 0x31
 8002b8e:	f7ff fe13 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002b92:	20c1      	movs	r0, #193	@ 0xc1
 8002b94:	f7ff fe10 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002b98:	2048      	movs	r0, #72	@ 0x48
 8002b9a:	f7ff fe0d 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002b9e:	2008      	movs	r0, #8
 8002ba0:	f7ff fe0a 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002ba4:	200f      	movs	r0, #15
 8002ba6:	f7ff fe07 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002baa:	200c      	movs	r0, #12
 8002bac:	f7ff fe04 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002bb0:	2031      	movs	r0, #49	@ 0x31
 8002bb2:	f7ff fe01 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002bb6:	2036      	movs	r0, #54	@ 0x36
 8002bb8:	f7ff fdfe 	bl	80027b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002bbc:	200f      	movs	r0, #15
 8002bbe:	f7ff fdfb 	bl	80027b8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002bc2:	2011      	movs	r0, #17
 8002bc4:	f7ff fdd6 	bl	8002774 <ILI9341_Write_Command>
HAL_Delay(120);
 8002bc8:	2078      	movs	r0, #120	@ 0x78
 8002bca:	f003 fd01 	bl	80065d0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002bce:	2029      	movs	r0, #41	@ 0x29
 8002bd0:	f7ff fdd0 	bl	8002774 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7ff fe97 	bl	8002908 <ILI9341_Set_Rotation>
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002be4:	b08d      	sub	sp, #52	@ 0x34
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	6039      	str	r1, [r7, #0]
 8002bec:	80fb      	strh	r3, [r7, #6]
 8002bee:	466b      	mov	r3, sp
 8002bf0:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002bfe:	d202      	bcs.n	8002c06 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c04:	e002      	b.n	8002c0c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002c06:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c12:	4840      	ldr	r0, [pc, #256]	@ (8002d14 <ILI9341_Draw_Colour_Burst+0x134>)
 8002c14:	f004 fbd0 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c1e:	483d      	ldr	r0, [pc, #244]	@ (8002d14 <ILI9341_Draw_Colour_Burst+0x134>)
 8002c20:	f004 fbca 	bl	80073b8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8002c2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c30:	460b      	mov	r3, r1
 8002c32:	3b01      	subs	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	2300      	movs	r3, #0
 8002c38:	4688      	mov	r8, r1
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c50:	2300      	movs	r3, #0
 8002c52:	460c      	mov	r4, r1
 8002c54:	461d      	mov	r5, r3
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	00eb      	lsls	r3, r5, #3
 8002c60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c64:	00e2      	lsls	r2, r4, #3
 8002c66:	1dcb      	adds	r3, r1, #7
 8002c68:	08db      	lsrs	r3, r3, #3
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	ebad 0d03 	sub.w	sp, sp, r3
 8002c70:	466b      	mov	r3, sp
 8002c72:	3300      	adds	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c7a:	e00e      	b.n	8002c9a <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c80:	4413      	add	r3, r2
 8002c82:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002c86:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	88fa      	ldrh	r2, [r7, #6]
 8002c8e:	b2d1      	uxtb	r1, r2
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c96:	3302      	adds	r3, #2
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d3ec      	bcc.n	8002c7c <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cbc:	fb01 f202 	mul.w	r2, r1, r2
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cce:	e009      	b.n	8002ce4 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	230a      	movs	r3, #10
 8002cd6:	69b9      	ldr	r1, [r7, #24]
 8002cd8:	480f      	ldr	r0, [pc, #60]	@ (8002d18 <ILI9341_Draw_Colour_Burst+0x138>)
 8002cda:	f005 fe0e 	bl	80088fa <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3f1      	bcc.n	8002cd0 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	230a      	movs	r3, #10
 8002cf2:	69b9      	ldr	r1, [r7, #24]
 8002cf4:	4808      	ldr	r0, [pc, #32]	@ (8002d18 <ILI9341_Draw_Colour_Burst+0x138>)
 8002cf6:	f005 fe00 	bl	80088fa <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d00:	4804      	ldr	r0, [pc, #16]	@ (8002d14 <ILI9341_Draw_Colour_Burst+0x134>)
 8002d02:	f004 fb59 	bl	80073b8 <HAL_GPIO_WritePin>
 8002d06:	46b5      	mov	sp, r6
}
 8002d08:	bf00      	nop
 8002d0a:	3734      	adds	r7, #52	@ 0x34
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d12:	bf00      	nop
 8002d14:	40020800 	.word	0x40020800
 8002d18:	200003c0 	.word	0x200003c0

08002d1c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002d26:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <ILI9341_Fill_Screen+0x44>)
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d64 <ILI9341_Fill_Screen+0x48>)
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2100      	movs	r1, #0
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7ff fd61 	bl	80027fc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002d3a:	4b09      	ldr	r3, [pc, #36]	@ (8002d60 <ILI9341_Fill_Screen+0x44>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <ILI9341_Fill_Screen+0x48>)
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ff44 	bl	8002be0 <ILI9341_Draw_Colour_Burst>
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000012 	.word	0x20000012
 8002d64:	20000010 	.word	0x20000010

08002d68 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	80fb      	strh	r3, [r7, #6]
 8002d72:	460b      	mov	r3, r1
 8002d74:	80bb      	strh	r3, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002d7a:	4b64      	ldr	r3, [pc, #400]	@ (8002f0c <ILI9341_Draw_Pixel+0x1a4>)
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	88fa      	ldrh	r2, [r7, #6]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	f080 80be 	bcs.w	8002f04 <ILI9341_Draw_Pixel+0x19c>
 8002d88:	4b61      	ldr	r3, [pc, #388]	@ (8002f10 <ILI9341_Draw_Pixel+0x1a8>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	88ba      	ldrh	r2, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	f080 80b7 	bcs.w	8002f04 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d9c:	485d      	ldr	r0, [pc, #372]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002d9e:	f004 fb0b 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002da2:	2200      	movs	r2, #0
 8002da4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002da8:	485a      	ldr	r0, [pc, #360]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002daa:	f004 fb05 	bl	80073b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002dae:	202a      	movs	r0, #42	@ 0x2a
 8002db0:	f7ff fcce 	bl	8002750 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002db4:	2201      	movs	r2, #1
 8002db6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dba:	4856      	ldr	r0, [pc, #344]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002dbc:	f004 fafc 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dc6:	4853      	ldr	r0, [pc, #332]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002dc8:	f004 faf6 	bl	80073b8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dd2:	4850      	ldr	r0, [pc, #320]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002dd4:	f004 faf0 	bl	80073b8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	753b      	strb	r3, [r7, #20]
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	757b      	strb	r3, [r7, #21]
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	3301      	adds	r3, #1
 8002dec:	121b      	asrs	r3, r3, #8
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	75bb      	strb	r3, [r7, #22]
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002dfc:	f107 0114 	add.w	r1, r7, #20
 8002e00:	2301      	movs	r3, #1
 8002e02:	2204      	movs	r2, #4
 8002e04:	4844      	ldr	r0, [pc, #272]	@ (8002f18 <ILI9341_Draw_Pixel+0x1b0>)
 8002e06:	f005 fd78 	bl	80088fa <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e10:	4840      	ldr	r0, [pc, #256]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002e12:	f004 fad1 	bl	80073b8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002e16:	2200      	movs	r2, #0
 8002e18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e1c:	483d      	ldr	r0, [pc, #244]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002e1e:	f004 facb 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002e22:	2200      	movs	r2, #0
 8002e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e28:	483a      	ldr	r0, [pc, #232]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002e2a:	f004 fac5 	bl	80073b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002e2e:	202b      	movs	r0, #43	@ 0x2b
 8002e30:	f7ff fc8e 	bl	8002750 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002e34:	2201      	movs	r2, #1
 8002e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e3a:	4836      	ldr	r0, [pc, #216]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002e3c:	f004 fabc 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002e40:	2201      	movs	r2, #1
 8002e42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e46:	4833      	ldr	r0, [pc, #204]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002e48:	f004 fab6 	bl	80073b8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e52:	4830      	ldr	r0, [pc, #192]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002e54:	f004 fab0 	bl	80073b8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002e58:	88bb      	ldrh	r3, [r7, #4]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	743b      	strb	r3, [r7, #16]
 8002e62:	88bb      	ldrh	r3, [r7, #4]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	747b      	strb	r3, [r7, #17]
 8002e68:	88bb      	ldrh	r3, [r7, #4]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	121b      	asrs	r3, r3, #8
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	74bb      	strb	r3, [r7, #18]
 8002e72:	88bb      	ldrh	r3, [r7, #4]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002e7c:	f107 0110 	add.w	r1, r7, #16
 8002e80:	2301      	movs	r3, #1
 8002e82:	2204      	movs	r2, #4
 8002e84:	4824      	ldr	r0, [pc, #144]	@ (8002f18 <ILI9341_Draw_Pixel+0x1b0>)
 8002e86:	f005 fd38 	bl	80088fa <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e90:	4820      	ldr	r0, [pc, #128]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002e92:	f004 fa91 	bl	80073b8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002e96:	2200      	movs	r2, #0
 8002e98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e9c:	481d      	ldr	r0, [pc, #116]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002e9e:	f004 fa8b 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ea8:	481a      	ldr	r0, [pc, #104]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002eaa:	f004 fa85 	bl	80073b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002eae:	202c      	movs	r0, #44	@ 0x2c
 8002eb0:	f7ff fc4e 	bl	8002750 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002eba:	4816      	ldr	r0, [pc, #88]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002ebc:	f004 fa7c 	bl	80073b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ec6:	4813      	ldr	r0, [pc, #76]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002ec8:	f004 fa76 	bl	80073b8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ed2:	4810      	ldr	r0, [pc, #64]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002ed4:	f004 fa70 	bl	80073b8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	733b      	strb	r3, [r7, #12]
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002ee8:	f107 010c 	add.w	r1, r7, #12
 8002eec:	2301      	movs	r3, #1
 8002eee:	2202      	movs	r2, #2
 8002ef0:	4809      	ldr	r0, [pc, #36]	@ (8002f18 <ILI9341_Draw_Pixel+0x1b0>)
 8002ef2:	f005 fd02 	bl	80088fa <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002efc:	4805      	ldr	r0, [pc, #20]	@ (8002f14 <ILI9341_Draw_Pixel+0x1ac>)
 8002efe:	f004 fa5b 	bl	80073b8 <HAL_GPIO_WritePin>
 8002f02:	e000      	b.n	8002f06 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002f04:	bf00      	nop
	
}
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000012 	.word	0x20000012
 8002f10:	20000010 	.word	0x20000010
 8002f14:	40020800 	.word	0x40020800
 8002f18:	200003c0 	.word	0x200003c0

08002f1c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4604      	mov	r4, r0
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	80fb      	strh	r3, [r7, #6]
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80bb      	strh	r3, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	807b      	strh	r3, [r7, #2]
 8002f36:	4613      	mov	r3, r2
 8002f38:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002f3a:	4b24      	ldr	r3, [pc, #144]	@ (8002fcc <ILI9341_Draw_Rectangle+0xb0>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	88fa      	ldrh	r2, [r7, #6]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d23d      	bcs.n	8002fc2 <ILI9341_Draw_Rectangle+0xa6>
 8002f46:	4b22      	ldr	r3, [pc, #136]	@ (8002fd0 <ILI9341_Draw_Rectangle+0xb4>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	88ba      	ldrh	r2, [r7, #4]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d237      	bcs.n	8002fc2 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	4413      	add	r3, r2
 8002f58:	4a1c      	ldr	r2, [pc, #112]	@ (8002fcc <ILI9341_Draw_Rectangle+0xb0>)
 8002f5a:	8812      	ldrh	r2, [r2, #0]
 8002f5c:	b292      	uxth	r2, r2
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	dd05      	ble.n	8002f6e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002f62:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <ILI9341_Draw_Rectangle+0xb0>)
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002f6e:	88ba      	ldrh	r2, [r7, #4]
 8002f70:	883b      	ldrh	r3, [r7, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	4a16      	ldr	r2, [pc, #88]	@ (8002fd0 <ILI9341_Draw_Rectangle+0xb4>)
 8002f76:	8812      	ldrh	r2, [r2, #0]
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	dd05      	ble.n	8002f8a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002f7e:	4b14      	ldr	r3, [pc, #80]	@ (8002fd0 <ILI9341_Draw_Rectangle+0xb4>)
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	88bb      	ldrh	r3, [r7, #4]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	4413      	add	r3, r2
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29c      	uxth	r4, r3
 8002f96:	88ba      	ldrh	r2, [r7, #4]
 8002f98:	883b      	ldrh	r3, [r7, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	88b9      	ldrh	r1, [r7, #4]
 8002fa4:	88f8      	ldrh	r0, [r7, #6]
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	f7ff fc28 	bl	80027fc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002fac:	883b      	ldrh	r3, [r7, #0]
 8002fae:	887a      	ldrh	r2, [r7, #2]
 8002fb0:	fb02 f303 	mul.w	r3, r2, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	8b3b      	ldrh	r3, [r7, #24]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fe10 	bl	8002be0 <ILI9341_Draw_Colour_Burst>
 8002fc0:	e000      	b.n	8002fc4 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002fc2:	bf00      	nop
}
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000012 	.word	0x20000012
 8002fd0:	20000010 	.word	0x20000010

08002fd4 <ILI9341_Draw_Symbol>:
ILI9341_Set_Address(X, Y, X, Y+Height-1);
ILI9341_Draw_Colour_Burst(Colour, Height);
}

void ILI9341_Draw_Symbol(uint16_t X, uint16_t Y, uint16_t Colour, const uint32_t* symbol, const uint8_t size)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	4603      	mov	r3, r0
 8002fde:	81fb      	strh	r3, [r7, #14]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	81bb      	strh	r3, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	817b      	strh	r3, [r7, #10]
    for (uint8_t y = 0; y < 32; y++) {
 8002fe8:	2300      	movs	r3, #0
 8002fea:	75fb      	strb	r3, [r7, #23]
 8002fec:	e05d      	b.n	80030aa <ILI9341_Draw_Symbol+0xd6>
        for (uint8_t x = 0; x < 32; x++) {
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75bb      	strb	r3, [r7, #22]
 8002ff2:	e054      	b.n	800309e <ILI9341_Draw_Symbol+0xca>
            if (symbol[y] & (1 << (31 - x))) {
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	7dbb      	ldrb	r3, [r7, #22]
 8003000:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003004:	fa21 f303 	lsr.w	r3, r1, r3
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d044      	beq.n	8003098 <ILI9341_Draw_Symbol+0xc4>
            	if(size == 1) {
 800300e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d10e      	bne.n	8003034 <ILI9341_Draw_Symbol+0x60>
            		ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 8003016:	7dbb      	ldrb	r3, [r7, #22]
 8003018:	b29a      	uxth	r2, r3
 800301a:	89fb      	ldrh	r3, [r7, #14]
 800301c:	4413      	add	r3, r2
 800301e:	b298      	uxth	r0, r3
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	b29a      	uxth	r2, r3
 8003024:	89bb      	ldrh	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	b29b      	uxth	r3, r3
 800302a:	897a      	ldrh	r2, [r7, #10]
 800302c:	4619      	mov	r1, r3
 800302e:	f7ff fe9b 	bl	8002d68 <ILI9341_Draw_Pixel>
 8003032:	e031      	b.n	8003098 <ILI9341_Draw_Symbol+0xc4>
            	} else if (size == 2) {
 8003034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d12d      	bne.n	8003098 <ILI9341_Draw_Symbol+0xc4>
            		uint16_t pixelX = X + (x * 2);
 800303c:	7dbb      	ldrb	r3, [r7, #22]
 800303e:	b29b      	uxth	r3, r3
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	89fb      	ldrh	r3, [r7, #14]
 8003046:	4413      	add	r3, r2
 8003048:	82bb      	strh	r3, [r7, #20]
					uint16_t pixelY = Y + (y * 2);
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	b29b      	uxth	r3, r3
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	89bb      	ldrh	r3, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	827b      	strh	r3, [r7, #18]

					ILI9341_Draw_Pixel(pixelX, pixelY, Colour);
 8003058:	897a      	ldrh	r2, [r7, #10]
 800305a:	8a79      	ldrh	r1, [r7, #18]
 800305c:	8abb      	ldrh	r3, [r7, #20]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fe82 	bl	8002d68 <ILI9341_Draw_Pixel>
					ILI9341_Draw_Pixel(pixelX + 1, pixelY, Colour);
 8003064:	8abb      	ldrh	r3, [r7, #20]
 8003066:	3301      	adds	r3, #1
 8003068:	b29b      	uxth	r3, r3
 800306a:	897a      	ldrh	r2, [r7, #10]
 800306c:	8a79      	ldrh	r1, [r7, #18]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fe7a 	bl	8002d68 <ILI9341_Draw_Pixel>
					ILI9341_Draw_Pixel(pixelX, pixelY + 1, Colour);
 8003074:	8a7b      	ldrh	r3, [r7, #18]
 8003076:	3301      	adds	r3, #1
 8003078:	b299      	uxth	r1, r3
 800307a:	897a      	ldrh	r2, [r7, #10]
 800307c:	8abb      	ldrh	r3, [r7, #20]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fe72 	bl	8002d68 <ILI9341_Draw_Pixel>
					ILI9341_Draw_Pixel(pixelX + 1, pixelY + 1, Colour);
 8003084:	8abb      	ldrh	r3, [r7, #20]
 8003086:	3301      	adds	r3, #1
 8003088:	b298      	uxth	r0, r3
 800308a:	8a7b      	ldrh	r3, [r7, #18]
 800308c:	3301      	adds	r3, #1
 800308e:	b29b      	uxth	r3, r3
 8003090:	897a      	ldrh	r2, [r7, #10]
 8003092:	4619      	mov	r1, r3
 8003094:	f7ff fe68 	bl	8002d68 <ILI9341_Draw_Pixel>
        for (uint8_t x = 0; x < 32; x++) {
 8003098:	7dbb      	ldrb	r3, [r7, #22]
 800309a:	3301      	adds	r3, #1
 800309c:	75bb      	strb	r3, [r7, #22]
 800309e:	7dbb      	ldrb	r3, [r7, #22]
 80030a0:	2b1f      	cmp	r3, #31
 80030a2:	d9a7      	bls.n	8002ff4 <ILI9341_Draw_Symbol+0x20>
    for (uint8_t y = 0; y < 32; y++) {
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	3301      	adds	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	2b1f      	cmp	r3, #31
 80030ae:	d99e      	bls.n	8002fee <ILI9341_Draw_Symbol+0x1a>
            	}
            }
        }
    }
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <ILI9341_Draw_FirstCard>:

void ILI9341_Draw_FirstCard(const uint32_t* symbol, const char* rank, uint16_t colour) {
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af02      	add	r7, sp, #8
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	4613      	mov	r3, r2
 80030c6:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Symbol(40, 80, colour, symbol, 2);
 80030c8:	88fa      	ldrh	r2, [r7, #6]
 80030ca:	2302      	movs	r3, #2
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2150      	movs	r1, #80	@ 0x50
 80030d2:	2028      	movs	r0, #40	@ 0x28
 80030d4:	f7ff ff7e 	bl	8002fd4 <ILI9341_Draw_Symbol>
	ILI9341_Draw_Text(rank, 120, 90, BLACK, 5, WHITE);
 80030d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	2305      	movs	r3, #5
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	2300      	movs	r3, #0
 80030e4:	225a      	movs	r2, #90	@ 0x5a
 80030e6:	2178      	movs	r1, #120	@ 0x78
 80030e8:	68b8      	ldr	r0, [r7, #8]
 80030ea:	f7ff fad5 	bl	8002698 <ILI9341_Draw_Text>
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <ILI9341_Draw_SecondCard>:

void ILI9341_Draw_SecondCard(const uint32_t* symbol, const char* rank, uint16_t colour) {
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af02      	add	r7, sp, #8
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	4613      	mov	r3, r2
 8003102:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Symbol(160, 80, colour, symbol, 2);
 8003104:	88fa      	ldrh	r2, [r7, #6]
 8003106:	2302      	movs	r3, #2
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2150      	movs	r1, #80	@ 0x50
 800310e:	20a0      	movs	r0, #160	@ 0xa0
 8003110:	f7ff ff60 	bl	8002fd4 <ILI9341_Draw_Symbol>
	ILI9341_Draw_Text(rank, 240, 90, BLACK, 5, WHITE);
 8003114:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	2305      	movs	r3, #5
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2300      	movs	r3, #0
 8003120:	225a      	movs	r2, #90	@ 0x5a
 8003122:	21f0      	movs	r1, #240	@ 0xf0
 8003124:	68b8      	ldr	r0, [r7, #8]
 8003126:	f7ff fab7 	bl	8002698 <ILI9341_Draw_Text>
}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 800313a:	2310      	movs	r3, #16
 800313c:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8003142:	e019      	b.n	8003178 <TP_Read+0x44>
    {
        value <<= 1;
 8003144:	88bb      	ldrh	r3, [r7, #4]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800314a:	2201      	movs	r2, #1
 800314c:	2108      	movs	r1, #8
 800314e:	480e      	ldr	r0, [pc, #56]	@ (8003188 <TP_Read+0x54>)
 8003150:	f004 f932 	bl	80073b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003154:	2200      	movs	r2, #0
 8003156:	2108      	movs	r1, #8
 8003158:	480b      	ldr	r0, [pc, #44]	@ (8003188 <TP_Read+0x54>)
 800315a:	f004 f92d 	bl	80073b8 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 800315e:	2110      	movs	r1, #16
 8003160:	4809      	ldr	r0, [pc, #36]	@ (8003188 <TP_Read+0x54>)
 8003162:	f004 f911 	bl	8007388 <HAL_GPIO_ReadPin>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <TP_Read+0x3e>
        {
            value++;
 800316c:	88bb      	ldrh	r3, [r7, #4]
 800316e:	3301      	adds	r3, #1
 8003170:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	3b01      	subs	r3, #1
 8003176:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1e2      	bne.n	8003144 <TP_Read+0x10>
    };

    return value;
 800317e:	88bb      	ldrh	r3, [r7, #4]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000

0800318c <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8003196:	2308      	movs	r3, #8
 8003198:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 800319a:	2200      	movs	r2, #0
 800319c:	2108      	movs	r1, #8
 800319e:	4815      	ldr	r0, [pc, #84]	@ (80031f4 <TP_Write+0x68>)
 80031a0:	f004 f90a 	bl	80073b8 <HAL_GPIO_WritePin>
	
    while(i > 0)
 80031a4:	e01e      	b.n	80031e4 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	da05      	bge.n	80031ba <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 80031ae:	2201      	movs	r2, #1
 80031b0:	2120      	movs	r1, #32
 80031b2:	4810      	ldr	r0, [pc, #64]	@ (80031f4 <TP_Write+0x68>)
 80031b4:	f004 f900 	bl	80073b8 <HAL_GPIO_WritePin>
 80031b8:	e004      	b.n	80031c4 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2120      	movs	r1, #32
 80031be:	480d      	ldr	r0, [pc, #52]	@ (80031f4 <TP_Write+0x68>)
 80031c0:	f004 f8fa 	bl	80073b8 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80031ca:	2201      	movs	r2, #1
 80031cc:	2108      	movs	r1, #8
 80031ce:	4809      	ldr	r0, [pc, #36]	@ (80031f4 <TP_Write+0x68>)
 80031d0:	f004 f8f2 	bl	80073b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 80031d4:	2200      	movs	r2, #0
 80031d6:	2108      	movs	r1, #8
 80031d8:	4806      	ldr	r0, [pc, #24]	@ (80031f4 <TP_Write+0x68>)
 80031da:	f004 f8ed 	bl	80073b8 <HAL_GPIO_WritePin>
        i--;
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1dd      	bne.n	80031a6 <TP_Write+0x1a>
    };
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000

080031f8 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8003200:	2201      	movs	r2, #1
 8003202:	2108      	movs	r1, #8
 8003204:	4866      	ldr	r0, [pc, #408]	@ (80033a0 <TP_Read_Coordinates+0x1a8>)
 8003206:	f004 f8d7 	bl	80073b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800320a:	2201      	movs	r2, #1
 800320c:	2120      	movs	r1, #32
 800320e:	4864      	ldr	r0, [pc, #400]	@ (80033a0 <TP_Read_Coordinates+0x1a8>)
 8003210:	f004 f8d2 	bl	80073b8 <HAL_GPIO_WritePin>
		// HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);


    uint32_t avg_x, avg_y = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]

    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8003220:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003224:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]

		// HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);


    while((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0
 800322a:	e023      	b.n	8003274 <TP_Read_Coordinates+0x7c>
    		|| HAL_GPIO_ReadPin(TP_IRQ2_PORT, TP_IRQ2_PIN) == 0
			|| HAL_GPIO_ReadPin(TP_IRQ3_PORT, TP_IRQ3_PIN) == 0
			|| HAL_GPIO_ReadPin(TP_IRQ4_PORT, TP_IRQ4_PIN) == 0))
    {
        TP_Write(CMD_RDY);
 800322c:	2090      	movs	r0, #144	@ 0x90
 800322e:	f7ff ffad 	bl	800318c <TP_Write>

				rawy = TP_Read();
 8003232:	f7ff ff7f 	bl	8003134 <TP_Read>
 8003236:	4603      	mov	r3, r0
 8003238:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 800323a:	89fb      	ldrh	r3, [r7, #14]
 800323c:	6a3a      	ldr	r2, [r7, #32]
 800323e:	4413      	add	r3, r2
 8003240:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8003242:	89fb      	ldrh	r3, [r7, #14]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4413      	add	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]


        TP_Write(CMD_RDX);
 800324a:	20d0      	movs	r0, #208	@ 0xd0
 800324c:	f7ff ff9e 	bl	800318c <TP_Write>
        rawx = TP_Read();
 8003250:	f7ff ff70 	bl	8003134 <TP_Read>
 8003254:	4603      	mov	r3, r0
 8003256:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8003258:	89bb      	ldrh	r3, [r7, #12]
 800325a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325c:	4413      	add	r3, r2
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
				calculating_x += rawx;
 8003260:	89bb      	ldrh	r3, [r7, #12]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	61fb      	str	r3, [r7, #28]
        samples--;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3b01      	subs	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
				counted_samples++;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	3301      	adds	r3, #1
 8003272:	613b      	str	r3, [r7, #16]
    while((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01b      	beq.n	80032b2 <TP_Read_Coordinates+0xba>
 800327a:	2104      	movs	r1, #4
 800327c:	4848      	ldr	r0, [pc, #288]	@ (80033a0 <TP_Read_Coordinates+0x1a8>)
 800327e:	f004 f883 	bl	8007388 <HAL_GPIO_ReadPin>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0d1      	beq.n	800322c <TP_Read_Coordinates+0x34>
    		|| HAL_GPIO_ReadPin(TP_IRQ2_PORT, TP_IRQ2_PIN) == 0
 8003288:	2104      	movs	r1, #4
 800328a:	4846      	ldr	r0, [pc, #280]	@ (80033a4 <TP_Read_Coordinates+0x1ac>)
 800328c:	f004 f87c 	bl	8007388 <HAL_GPIO_ReadPin>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0ca      	beq.n	800322c <TP_Read_Coordinates+0x34>
			|| HAL_GPIO_ReadPin(TP_IRQ3_PORT, TP_IRQ3_PIN) == 0
 8003296:	2102      	movs	r1, #2
 8003298:	4842      	ldr	r0, [pc, #264]	@ (80033a4 <TP_Read_Coordinates+0x1ac>)
 800329a:	f004 f875 	bl	8007388 <HAL_GPIO_ReadPin>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0c3      	beq.n	800322c <TP_Read_Coordinates+0x34>
			|| HAL_GPIO_ReadPin(TP_IRQ4_PORT, TP_IRQ4_PIN) == 0))
 80032a4:	2101      	movs	r1, #1
 80032a6:	483f      	ldr	r0, [pc, #252]	@ (80033a4 <TP_Read_Coordinates+0x1ac>)
 80032a8:	f004 f86e 	bl	8007388 <HAL_GPIO_ReadPin>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0bc      	beq.n	800322c <TP_Read_Coordinates+0x34>
    };

		// HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);


		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032b8:	d162      	bne.n	8003380 <TP_Read_Coordinates+0x188>
 80032ba:	2104      	movs	r1, #4
 80032bc:	4838      	ldr	r0, [pc, #224]	@ (80033a0 <TP_Read_Coordinates+0x1a8>)
 80032be:	f004 f863 	bl	8007388 <HAL_GPIO_ReadPin>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d014      	beq.n	80032f2 <TP_Read_Coordinates+0xfa>
				|| HAL_GPIO_ReadPin(TP_IRQ2_PORT, TP_IRQ2_PIN) == 0
 80032c8:	2104      	movs	r1, #4
 80032ca:	4836      	ldr	r0, [pc, #216]	@ (80033a4 <TP_Read_Coordinates+0x1ac>)
 80032cc:	f004 f85c 	bl	8007388 <HAL_GPIO_ReadPin>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <TP_Read_Coordinates+0xfa>
				|| HAL_GPIO_ReadPin(TP_IRQ3_PORT, TP_IRQ3_PIN) == 0
 80032d6:	2102      	movs	r1, #2
 80032d8:	4832      	ldr	r0, [pc, #200]	@ (80033a4 <TP_Read_Coordinates+0x1ac>)
 80032da:	f004 f855 	bl	8007388 <HAL_GPIO_ReadPin>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <TP_Read_Coordinates+0xfa>
				|| HAL_GPIO_ReadPin(TP_IRQ4_PORT, TP_IRQ4_PIN) == 0))
 80032e4:	2101      	movs	r1, #1
 80032e6:	482f      	ldr	r0, [pc, #188]	@ (80033a4 <TP_Read_Coordinates+0x1ac>)
 80032e8:	f004 f84e 	bl	8007388 <HAL_GPIO_ReadPin>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d146      	bne.n	8003380 <TP_Read_Coordinates+0x188>
		{

		calculating_x /= counted_samples;
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	81fb      	strh	r3, [r7, #14]

		rawx *= -1;
 800330e:	89bb      	ldrh	r3, [r7, #12]
 8003310:	425b      	negs	r3, r3
 8003312:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8003314:	89fb      	ldrh	r3, [r7, #14]
 8003316:	425b      	negs	r3, r3
 8003318:	81fb      	strh	r3, [r7, #14]

		//CONVERTING 16bit Value to Screen coordinates
        // 65535/273 = 240!
		// 65535/204 = 320!
        Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 800331a:	89ba      	ldrh	r2, [r7, #12]
 800331c:	4b22      	ldr	r3, [pc, #136]	@ (80033a8 <TP_Read_Coordinates+0x1b0>)
 800331e:	fba3 1302 	umull	r1, r3, r3, r2
 8003322:	1ad2      	subs	r2, r2, r3
 8003324:	0852      	lsrs	r2, r2, #1
 8003326:	4413      	add	r3, r2
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	b29b      	uxth	r3, r3
 800332c:	f1c3 03e3 	rsb	r3, r3, #227	@ 0xe3
 8003330:	ee07 3a90 	vmov	s15, r3
 8003334:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003338:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8003398 <TP_Read_Coordinates+0x1a0>
 800333c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003340:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003344:	ee17 3a90 	vmov	r3, s15
 8003348:	b29a      	uxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 800334e:	89fb      	ldrh	r3, [r7, #14]
 8003350:	4a16      	ldr	r2, [pc, #88]	@ (80033ac <TP_Read_Coordinates+0x1b4>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	09db      	lsrs	r3, r3, #7
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b0f      	subs	r3, #15
 800335c:	ee07 3a90 	vmov	s15, r3
 8003360:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003364:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8003398 <TP_Read_Coordinates+0x1a0>
 8003368:	ee27 7b06 	vmul.f64	d7, d7, d6
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3302      	adds	r3, #2
 8003370:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003374:	ee17 2a90 	vmov	r2, s15
 8003378:	b292      	uxth	r2, r2
 800337a:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 800337c:	2301      	movs	r3, #1
 800337e:	e007      	b.n	8003390 <TP_Read_Coordinates+0x198>
		}
		else
		{
			Coordinates[0] = 0;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3302      	adds	r3, #2
 800338a:	2200      	movs	r2, #0
 800338c:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 800338e:	2300      	movs	r3, #0
		}
}
 8003390:	4618      	mov	r0, r3
 8003392:	3728      	adds	r7, #40	@ 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	28f5c28f 	.word	0x28f5c28f
 800339c:	3ff28f5c 	.word	0x3ff28f5c
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40021400 	.word	0x40021400
 80033a8:	e01e01e1 	.word	0xe01e01e1
 80033ac:	a0a0a0a1 	.word	0xa0a0a0a1

080033b0 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 80033b4:	2104      	movs	r1, #4
 80033b6:	4805      	ldr	r0, [pc, #20]	@ (80033cc <TP_Touchpad_Pressed+0x1c>)
 80033b8:	f003 ffe6 	bl	8007388 <HAL_GPIO_ReadPin>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 80033c6:	2300      	movs	r3, #0
	}
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000

080033d0 <TP_Touchpad2_Pressed>:

uint8_t TP_Touchpad2_Pressed(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ2_PORT, TP_IRQ2_PIN) == 0)
 80033d4:	2104      	movs	r1, #4
 80033d6:	4805      	ldr	r0, [pc, #20]	@ (80033ec <TP_Touchpad2_Pressed+0x1c>)
 80033d8:	f003 ffd6 	bl	8007388 <HAL_GPIO_ReadPin>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <TP_Touchpad2_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <TP_Touchpad2_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 80033e6:	2300      	movs	r3, #0
	}
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021400 	.word	0x40021400

080033f0 <TP_Touchpad3_Pressed>:

uint8_t TP_Touchpad3_Pressed(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ3_PORT, TP_IRQ3_PIN) == 0)
 80033f4:	2102      	movs	r1, #2
 80033f6:	4805      	ldr	r0, [pc, #20]	@ (800340c <TP_Touchpad3_Pressed+0x1c>)
 80033f8:	f003 ffc6 	bl	8007388 <HAL_GPIO_ReadPin>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <TP_Touchpad3_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <TP_Touchpad3_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8003406:	2300      	movs	r3, #0
	}
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021400 	.word	0x40021400

08003410 <TP_Touchpad4_Pressed>:

uint8_t TP_Touchpad4_Pressed(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ4_PORT, TP_IRQ4_PIN) == 0)
 8003414:	2101      	movs	r1, #1
 8003416:	4805      	ldr	r0, [pc, #20]	@ (800342c <TP_Touchpad4_Pressed+0x1c>)
 8003418:	f003 ffb6 	bl	8007388 <HAL_GPIO_ReadPin>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <TP_Touchpad4_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <TP_Touchpad4_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8003426:	2300      	movs	r3, #0
	}
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021400 	.word	0x40021400

08003430 <resetScreen>:
#include "gpio.h"
#include "ILI9341_Touchscreen.h"
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"

void resetScreen() {
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8003434:	2201      	movs	r2, #1
 8003436:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800343a:	480e      	ldr	r0, [pc, #56]	@ (8003474 <resetScreen+0x44>)
 800343c:	f003 ffbc 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8003440:	2201      	movs	r2, #1
 8003442:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003446:	480b      	ldr	r0, [pc, #44]	@ (8003474 <resetScreen+0x44>)
 8003448:	f003 ffb6 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_SET);
 800344c:	2201      	movs	r2, #1
 800344e:	2140      	movs	r1, #64	@ 0x40
 8003450:	4809      	ldr	r0, [pc, #36]	@ (8003478 <resetScreen+0x48>)
 8003452:	f003 ffb1 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8003456:	2201      	movs	r2, #1
 8003458:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800345c:	4805      	ldr	r0, [pc, #20]	@ (8003474 <resetScreen+0x44>)
 800345e:	f003 ffab 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS5_GPIO_Port, CS5_Pin, GPIO_PIN_SET);
 8003462:	2201      	movs	r2, #1
 8003464:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003468:	4804      	ldr	r0, [pc, #16]	@ (800347c <resetScreen+0x4c>)
 800346a:	f003 ffa5 	bl	80073b8 <HAL_GPIO_WritePin>
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40020400 	.word	0x40020400
 8003478:	40020800 	.word	0x40020800
 800347c:	40020000 	.word	0x40020000

08003480 <resetTouchScreen>:

void resetTouchScreen() {
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_CS1_GPIO_Port, T_CS1_Pin, GPIO_PIN_SET);
 8003484:	2201      	movs	r2, #1
 8003486:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800348a:	480a      	ldr	r0, [pc, #40]	@ (80034b4 <resetTouchScreen+0x34>)
 800348c:	f003 ff94 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS2_GPIO_Port, T_CS2_Pin, GPIO_PIN_SET);
 8003490:	2201      	movs	r2, #1
 8003492:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003496:	4807      	ldr	r0, [pc, #28]	@ (80034b4 <resetTouchScreen+0x34>)
 8003498:	f003 ff8e 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS3_GPIO_Port, T_CS3_Pin, GPIO_PIN_SET);
 800349c:	2201      	movs	r2, #1
 800349e:	2104      	movs	r1, #4
 80034a0:	4805      	ldr	r0, [pc, #20]	@ (80034b8 <resetTouchScreen+0x38>)
 80034a2:	f003 ff89 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS4_GPIO_Port, T_CS4_Pin, GPIO_PIN_SET);
 80034a6:	2201      	movs	r2, #1
 80034a8:	2104      	movs	r1, #4
 80034aa:	4804      	ldr	r0, [pc, #16]	@ (80034bc <resetTouchScreen+0x3c>)
 80034ac:	f003 ff84 	bl	80073b8 <HAL_GPIO_WritePin>
}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40020800 	.word	0x40020800
 80034b8:	40020c00 	.word	0x40020c00
 80034bc:	40021800 	.word	0x40021800

080034c0 <setScreen>:

void setScreen(int playerNumber) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	switch (playerNumber) {
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d82e      	bhi.n	800352e <setScreen+0x6e>
 80034d0:	a201      	add	r2, pc, #4	@ (adr r2, 80034d8 <setScreen+0x18>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034ed 	.word	0x080034ed
 80034dc:	080034fb 	.word	0x080034fb
 80034e0:	08003509 	.word	0x08003509
 80034e4:	08003515 	.word	0x08003515
 80034e8:	08003523 	.word	0x08003523
	case 1:
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80034ec:	2200      	movs	r2, #0
 80034ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034f2:	4813      	ldr	r0, [pc, #76]	@ (8003540 <setScreen+0x80>)
 80034f4:	f003 ff60 	bl	80073b8 <HAL_GPIO_WritePin>
		break;
 80034f8:	e01a      	b.n	8003530 <setScreen+0x70>
	case 2:
		HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 80034fa:	2200      	movs	r2, #0
 80034fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003500:	480f      	ldr	r0, [pc, #60]	@ (8003540 <setScreen+0x80>)
 8003502:	f003 ff59 	bl	80073b8 <HAL_GPIO_WritePin>
		break;
 8003506:	e013      	b.n	8003530 <setScreen+0x70>
	case 3:
		HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_RESET);
 8003508:	2200      	movs	r2, #0
 800350a:	2140      	movs	r1, #64	@ 0x40
 800350c:	480d      	ldr	r0, [pc, #52]	@ (8003544 <setScreen+0x84>)
 800350e:	f003 ff53 	bl	80073b8 <HAL_GPIO_WritePin>
		break;
 8003512:	e00d      	b.n	8003530 <setScreen+0x70>
	case 4:
		HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_RESET);
 8003514:	2200      	movs	r2, #0
 8003516:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800351a:	4809      	ldr	r0, [pc, #36]	@ (8003540 <setScreen+0x80>)
 800351c:	f003 ff4c 	bl	80073b8 <HAL_GPIO_WritePin>
		break;
 8003520:	e006      	b.n	8003530 <setScreen+0x70>
	case 5:
		HAL_GPIO_WritePin(CS5_GPIO_Port, CS5_Pin, GPIO_PIN_RESET);
 8003522:	2200      	movs	r2, #0
 8003524:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003528:	4807      	ldr	r0, [pc, #28]	@ (8003548 <setScreen+0x88>)
 800352a:	f003 ff45 	bl	80073b8 <HAL_GPIO_WritePin>
	default:
		break;
 800352e:	bf00      	nop
	}
	ILI9341_Fill_Screen(WHITE);
 8003530:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003534:	f7ff fbf2 	bl	8002d1c <ILI9341_Fill_Screen>
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40020400 	.word	0x40020400
 8003544:	40020800 	.word	0x40020800
 8003548:	40020000 	.word	0x40020000

0800354c <setTouchScreen>:

void setTouchScreen(int screenNumber) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	switch (screenNumber) {
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	2b03      	cmp	r3, #3
 800355a:	d825      	bhi.n	80035a8 <setTouchScreen+0x5c>
 800355c:	a201      	add	r2, pc, #4	@ (adr r2, 8003564 <setTouchScreen+0x18>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003575 	.word	0x08003575
 8003568:	08003583 	.word	0x08003583
 800356c:	08003591 	.word	0x08003591
 8003570:	0800359d 	.word	0x0800359d
	case 1:
		HAL_GPIO_WritePin(T_CS1_GPIO_Port, T_CS1_Pin, GPIO_PIN_RESET);
 8003574:	2200      	movs	r2, #0
 8003576:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800357a:	480e      	ldr	r0, [pc, #56]	@ (80035b4 <setTouchScreen+0x68>)
 800357c:	f003 ff1c 	bl	80073b8 <HAL_GPIO_WritePin>
		break;
 8003580:	e013      	b.n	80035aa <setTouchScreen+0x5e>
	case 2:
		HAL_GPIO_WritePin(T_CS2_GPIO_Port, T_CS2_Pin, GPIO_PIN_RESET);
 8003582:	2200      	movs	r2, #0
 8003584:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003588:	480a      	ldr	r0, [pc, #40]	@ (80035b4 <setTouchScreen+0x68>)
 800358a:	f003 ff15 	bl	80073b8 <HAL_GPIO_WritePin>
		break;
 800358e:	e00c      	b.n	80035aa <setTouchScreen+0x5e>
	case 3:
		HAL_GPIO_WritePin(T_CS3_GPIO_Port, T_CS3_Pin, GPIO_PIN_RESET);
 8003590:	2200      	movs	r2, #0
 8003592:	2104      	movs	r1, #4
 8003594:	4808      	ldr	r0, [pc, #32]	@ (80035b8 <setTouchScreen+0x6c>)
 8003596:	f003 ff0f 	bl	80073b8 <HAL_GPIO_WritePin>
		break;
 800359a:	e006      	b.n	80035aa <setTouchScreen+0x5e>
	case 4:
		HAL_GPIO_WritePin(T_CS4_GPIO_Port, T_CS4_Pin, GPIO_PIN_RESET);
 800359c:	2200      	movs	r2, #0
 800359e:	2104      	movs	r1, #4
 80035a0:	4806      	ldr	r0, [pc, #24]	@ (80035bc <setTouchScreen+0x70>)
 80035a2:	f003 ff09 	bl	80073b8 <HAL_GPIO_WritePin>
		break;
 80035a6:	e000      	b.n	80035aa <setTouchScreen+0x5e>
	default:
		break;
 80035a8:	bf00      	nop
	}
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40020800 	.word	0x40020800
 80035b8:	40020c00 	.word	0x40020c00
 80035bc:	40021800 	.word	0x40021800

080035c0 <drawPlayerCard>:

void drawPlayerCard(Player player) {
 80035c0:	b084      	sub	sp, #16
 80035c2:	b580      	push	{r7, lr}
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	f107 0c08 	add.w	ip, r7, #8
 80035ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ILI9341_Draw_FirstCard(player.hand[0].symbol, player.hand[0].rank, player.hand[0].colour);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	8b3a      	ldrh	r2, [r7, #24]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fd70 	bl	80030ba <ILI9341_Draw_FirstCard>
	ILI9341_Draw_SecondCard(player.hand[1].symbol, player.hand[1].rank, player.hand[1].colour);
 80035da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035dc:	69f9      	ldr	r1, [r7, #28]
 80035de:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fd88 	bl	80030f6 <ILI9341_Draw_SecondCard>
}
 80035e6:	bf00      	nop
 80035e8:	46bd      	mov	sp, r7
 80035ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035ee:	b004      	add	sp, #16
 80035f0:	4770      	bx	lr
	...

080035f4 <displayHand>:

void displayHand(Player player, int playerNumber, int currentPlayer) {
 80035f4:	b084      	sub	sp, #16
 80035f6:	b5b0      	push	{r4, r5, r7, lr}
 80035f8:	b0a6      	sub	sp, #152	@ 0x98
 80035fa:	af0c      	add	r7, sp, #48	@ 0x30
 80035fc:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8003600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char message[100];
	resetScreen();
 8003604:	f7ff ff14 	bl	8003430 <resetScreen>
	setScreen(playerNumber);
 8003608:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800360c:	f7ff ff58 	bl	80034c0 <setScreen>

	sprintf(message, "Player %d", playerNumber);
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003616:	4936      	ldr	r1, [pc, #216]	@ (80036f0 <displayHand+0xfc>)
 8003618:	4618      	mov	r0, r3
 800361a:	f008 fd27 	bl	800c06c <siprintf>
	if (playerNumber == currentPlayer + 1) {
 800361e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003622:	3301      	adds	r3, #1
 8003624:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003628:	429a      	cmp	r2, r3
 800362a:	d10b      	bne.n	8003644 <displayHand+0x50>
		ILI9341_Draw_Text(message, 170, 10, PURPLE, 2, BLACK);
 800362c:	1d38      	adds	r0, r7, #4
 800362e:	2300      	movs	r3, #0
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	2302      	movs	r3, #2
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	f647 030f 	movw	r3, #30735	@ 0x780f
 800363a:	220a      	movs	r2, #10
 800363c:	21aa      	movs	r1, #170	@ 0xaa
 800363e:	f7ff f82b 	bl	8002698 <ILI9341_Draw_Text>
 8003642:	e00a      	b.n	800365a <displayHand+0x66>
	} else {
		ILI9341_Draw_Text(message, 170, 10, BLACK, 2, WHITE);
 8003644:	1d38      	adds	r0, r7, #4
 8003646:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	2302      	movs	r3, #2
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2300      	movs	r3, #0
 8003652:	220a      	movs	r2, #10
 8003654:	21aa      	movs	r1, #170	@ 0xaa
 8003656:	f7ff f81f 	bl	8002698 <ILI9341_Draw_Text>
	}

	if (player.folded) {
 800365a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d013      	beq.n	800368a <displayHand+0x96>
		ILI9341_Fill_Screen(LIGHTGREY);
 8003662:	f24c 6018 	movw	r0, #50712	@ 0xc618
 8003666:	f7ff fb59 	bl	8002d1c <ILI9341_Fill_Screen>
		sprintf(message, "(FOLD)");
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	4921      	ldr	r1, [pc, #132]	@ (80036f4 <displayHand+0x100>)
 800366e:	4618      	mov	r0, r3
 8003670:	f008 fcfc 	bl	800c06c <siprintf>
		ILI9341_Draw_Text(message, 120, 30, BLACK, 3, WHITE);
 8003674:	1d38      	adds	r0, r7, #4
 8003676:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	2303      	movs	r3, #3
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2300      	movs	r3, #0
 8003682:	221e      	movs	r2, #30
 8003684:	2178      	movs	r1, #120	@ 0x78
 8003686:	f7ff f807 	bl	8002698 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Symbol(5, 5, BLUE, MENU, 1);
 800368a:	2301      	movs	r3, #1
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	4b1a      	ldr	r3, [pc, #104]	@ (80036f8 <displayHand+0x104>)
 8003690:	221f      	movs	r2, #31
 8003692:	2105      	movs	r1, #5
 8003694:	2005      	movs	r0, #5
 8003696:	f7ff fc9d 	bl	8002fd4 <ILI9341_Draw_Symbol>
	drawPlayerCard(player);
 800369a:	466d      	mov	r5, sp
 800369c:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 80036a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80036ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80036b0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80036b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b6:	f7ff ff83 	bl	80035c0 <drawPlayerCard>
	sprintf(message, "Chips %d", player.chips);
 80036ba:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80036be:	1d3b      	adds	r3, r7, #4
 80036c0:	490e      	ldr	r1, [pc, #56]	@ (80036fc <displayHand+0x108>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	f008 fcd2 	bl	800c06c <siprintf>
	ILI9341_Draw_Text(message, 100, 200, BLACK, 2, WHITE);
 80036c8:	1d38      	adds	r0, r7, #4
 80036ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2302      	movs	r3, #2
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	22c8      	movs	r2, #200	@ 0xc8
 80036d8:	2164      	movs	r1, #100	@ 0x64
 80036da:	f7fe ffdd 	bl	8002698 <ILI9341_Draw_Text>

	resetScreen();
 80036de:	f7ff fea7 	bl	8003430 <resetScreen>
}
 80036e2:	bf00      	nop
 80036e4:	3768      	adds	r7, #104	@ 0x68
 80036e6:	46bd      	mov	sp, r7
 80036e8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80036ec:	b004      	add	sp, #16
 80036ee:	4770      	bx	lr
 80036f0:	0800fa9c 	.word	0x0800fa9c
 80036f4:	0800faa8 	.word	0x0800faa8
 80036f8:	080106c4 	.word	0x080106c4
 80036fc:	0800fab0 	.word	0x0800fab0

08003700 <displayPokerHand>:

void displayPokerHand(Player player, int playerNumber, const char *handName) {
 8003700:	b084      	sub	sp, #16
 8003702:	b5b0      	push	{r4, r5, r7, lr}
 8003704:	b09a      	sub	sp, #104	@ 0x68
 8003706:	af0c      	add	r7, sp, #48	@ 0x30
 8003708:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 800370c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char message[50];
	resetScreen();
 8003710:	f7ff fe8e 	bl	8003430 <resetScreen>
	setScreen(playerNumber);
 8003714:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003718:	f7ff fed2 	bl	80034c0 <setScreen>
	sprintf(message, "%s", handName);
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003722:	491c      	ldr	r1, [pc, #112]	@ (8003794 <displayPokerHand+0x94>)
 8003724:	4618      	mov	r0, r3
 8003726:	f008 fca1 	bl	800c06c <siprintf>
	ILI9341_Draw_Text(message, 50, 20, BLACK, 3, WHITE);
 800372a:	1d38      	adds	r0, r7, #4
 800372c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	2303      	movs	r3, #3
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2300      	movs	r3, #0
 8003738:	2214      	movs	r2, #20
 800373a:	2132      	movs	r1, #50	@ 0x32
 800373c:	f7fe ffac 	bl	8002698 <ILI9341_Draw_Text>
	sprintf(message, "Chips %d", player.chips);
 8003740:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	4914      	ldr	r1, [pc, #80]	@ (8003798 <displayPokerHand+0x98>)
 8003746:	4618      	mov	r0, r3
 8003748:	f008 fc90 	bl	800c06c <siprintf>
	ILI9341_Draw_Text(message, 100, 200, BLACK, 2, WHITE);
 800374c:	1d38      	adds	r0, r7, #4
 800374e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	2302      	movs	r3, #2
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2300      	movs	r3, #0
 800375a:	22c8      	movs	r2, #200	@ 0xc8
 800375c:	2164      	movs	r1, #100	@ 0x64
 800375e:	f7fe ff9b 	bl	8002698 <ILI9341_Draw_Text>
	drawPlayerCard(player);
 8003762:	466d      	mov	r5, sp
 8003764:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8003768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800376a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800376c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800376e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003770:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003774:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003778:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800377c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800377e:	f7ff ff1f 	bl	80035c0 <drawPlayerCard>
	resetScreen();
 8003782:	f7ff fe55 	bl	8003430 <resetScreen>
}
 8003786:	bf00      	nop
 8003788:	3738      	adds	r7, #56	@ 0x38
 800378a:	46bd      	mov	sp, r7
 800378c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003790:	b004      	add	sp, #16
 8003792:	4770      	bx	lr
 8003794:	0800fabc 	.word	0x0800fabc
 8003798:	0800fab0 	.word	0x0800fab0

0800379c <displayWinnerPlayer>:

void displayWinnerPlayer(Player player, int playerNumber, const char *handName) {
 800379c:	b084      	sub	sp, #16
 800379e:	b5b0      	push	{r4, r5, r7, lr}
 80037a0:	b09a      	sub	sp, #104	@ 0x68
 80037a2:	af0c      	add	r7, sp, #48	@ 0x30
 80037a4:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80037a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char message[50];
	resetScreen();
 80037ac:	f7ff fe40 	bl	8003430 <resetScreen>
	HAL_GPIO_WritePin(CS5_GPIO_Port, CS5_Pin, GPIO_PIN_RESET);
 80037b0:	2200      	movs	r2, #0
 80037b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037b6:	4822      	ldr	r0, [pc, #136]	@ (8003840 <displayWinnerPlayer+0xa4>)
 80037b8:	f003 fdfe 	bl	80073b8 <HAL_GPIO_WritePin>
	ILI9341_Fill_Screen(WHITE);
 80037bc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80037c0:	f7ff faac 	bl	8002d1c <ILI9341_Fill_Screen>
	sprintf(message, "Player %d Win!!", playerNumber);
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80037ca:	491e      	ldr	r1, [pc, #120]	@ (8003844 <displayWinnerPlayer+0xa8>)
 80037cc:	4618      	mov	r0, r3
 80037ce:	f008 fc4d 	bl	800c06c <siprintf>
	ILI9341_Draw_Text(message, 50, 10, BLACK, 2, WHITE);
 80037d2:	1d38      	adds	r0, r7, #4
 80037d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	2302      	movs	r3, #2
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	2300      	movs	r3, #0
 80037e0:	220a      	movs	r2, #10
 80037e2:	2132      	movs	r1, #50	@ 0x32
 80037e4:	f7fe ff58 	bl	8002698 <ILI9341_Draw_Text>
	sprintf(message, "%s", handName);
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80037ee:	4916      	ldr	r1, [pc, #88]	@ (8003848 <displayWinnerPlayer+0xac>)
 80037f0:	4618      	mov	r0, r3
 80037f2:	f008 fc3b 	bl	800c06c <siprintf>
	ILI9341_Draw_Text(message, 70, 50, BLACK, 2, WHITE);
 80037f6:	1d38      	adds	r0, r7, #4
 80037f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	2302      	movs	r3, #2
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2300      	movs	r3, #0
 8003804:	2232      	movs	r2, #50	@ 0x32
 8003806:	2146      	movs	r1, #70	@ 0x46
 8003808:	f7fe ff46 	bl	8002698 <ILI9341_Draw_Text>
	drawPlayerCard(player);
 800380c:	466d      	mov	r5, sp
 800380e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8003812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800381e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003822:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003828:	f7ff feca 	bl	80035c0 <drawPlayerCard>
	resetScreen();
 800382c:	f7ff fe00 	bl	8003430 <resetScreen>
}
 8003830:	bf00      	nop
 8003832:	3738      	adds	r7, #56	@ 0x38
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800383a:	b004      	add	sp, #16
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40020000 	.word	0x40020000
 8003844:	0800fac0 	.word	0x0800fac0
 8003848:	0800fabc 	.word	0x0800fabc

0800384c <disPlayCommunityCard>:

void disPlayCommunityCard(Card card, int index) {
 800384c:	b084      	sub	sp, #16
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af02      	add	r7, sp, #8
 8003854:	f107 0c08 	add.w	ip, r7, #8
 8003858:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	resetScreen();
 800385c:	f7ff fde8 	bl	8003430 <resetScreen>
	HAL_GPIO_WritePin(CS5_GPIO_Port, CS5_Pin, GPIO_PIN_RESET);
 8003860:	2200      	movs	r2, #0
 8003862:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003866:	4843      	ldr	r0, [pc, #268]	@ (8003974 <disPlayCommunityCard+0x128>)
 8003868:	f003 fda6 	bl	80073b8 <HAL_GPIO_WritePin>
	switch (index) {
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	3b01      	subs	r3, #1
 8003870:	2b04      	cmp	r3, #4
 8003872:	d871      	bhi.n	8003958 <disPlayCommunityCard+0x10c>
 8003874:	a201      	add	r2, pc, #4	@ (adr r2, 800387c <disPlayCommunityCard+0x30>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	08003891 	.word	0x08003891
 8003880:	080038b9 	.word	0x080038b9
 8003884:	080038e1 	.word	0x080038e1
 8003888:	08003909 	.word	0x08003909
 800388c:	08003931 	.word	0x08003931
	case 1:
		ILI9341_Draw_Symbol(10, 10, card.colour, card.symbol, 2);
 8003890:	8b3a      	ldrh	r2, [r7, #24]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2102      	movs	r1, #2
 8003896:	9100      	str	r1, [sp, #0]
 8003898:	210a      	movs	r1, #10
 800389a:	200a      	movs	r0, #10
 800389c:	f7ff fb9a 	bl	8002fd4 <ILI9341_Draw_Symbol>
		ILI9341_Draw_Text(card.rank, 80, 20, BLACK, 5, WHITE);
 80038a0:	68b8      	ldr	r0, [r7, #8]
 80038a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	2305      	movs	r3, #5
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2300      	movs	r3, #0
 80038ae:	2214      	movs	r2, #20
 80038b0:	2150      	movs	r1, #80	@ 0x50
 80038b2:	f7fe fef1 	bl	8002698 <ILI9341_Draw_Text>
		break;
 80038b6:	e050      	b.n	800395a <disPlayCommunityCard+0x10e>
	case 2:
		ILI9341_Draw_Symbol(110, 10, card.colour, card.symbol, 2);
 80038b8:	8b3a      	ldrh	r2, [r7, #24]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2102      	movs	r1, #2
 80038be:	9100      	str	r1, [sp, #0]
 80038c0:	210a      	movs	r1, #10
 80038c2:	206e      	movs	r0, #110	@ 0x6e
 80038c4:	f7ff fb86 	bl	8002fd4 <ILI9341_Draw_Symbol>
		ILI9341_Draw_Text(card.rank, 180, 20, BLACK, 5, WHITE);
 80038c8:	68b8      	ldr	r0, [r7, #8]
 80038ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	2305      	movs	r3, #5
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	2300      	movs	r3, #0
 80038d6:	2214      	movs	r2, #20
 80038d8:	21b4      	movs	r1, #180	@ 0xb4
 80038da:	f7fe fedd 	bl	8002698 <ILI9341_Draw_Text>
		break;
 80038de:	e03c      	b.n	800395a <disPlayCommunityCard+0x10e>
	case 3:
		ILI9341_Draw_Symbol(10, 90, card.colour, card.symbol, 2);
 80038e0:	8b3a      	ldrh	r2, [r7, #24]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2102      	movs	r1, #2
 80038e6:	9100      	str	r1, [sp, #0]
 80038e8:	215a      	movs	r1, #90	@ 0x5a
 80038ea:	200a      	movs	r0, #10
 80038ec:	f7ff fb72 	bl	8002fd4 <ILI9341_Draw_Symbol>
		ILI9341_Draw_Text(card.rank, 80, 100, BLACK, 5, WHITE);
 80038f0:	68b8      	ldr	r0, [r7, #8]
 80038f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	2305      	movs	r3, #5
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2300      	movs	r3, #0
 80038fe:	2264      	movs	r2, #100	@ 0x64
 8003900:	2150      	movs	r1, #80	@ 0x50
 8003902:	f7fe fec9 	bl	8002698 <ILI9341_Draw_Text>
		break;
 8003906:	e028      	b.n	800395a <disPlayCommunityCard+0x10e>
	case 4:
		ILI9341_Draw_Symbol(110, 90, card.colour, card.symbol, 2);
 8003908:	8b3a      	ldrh	r2, [r7, #24]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2102      	movs	r1, #2
 800390e:	9100      	str	r1, [sp, #0]
 8003910:	215a      	movs	r1, #90	@ 0x5a
 8003912:	206e      	movs	r0, #110	@ 0x6e
 8003914:	f7ff fb5e 	bl	8002fd4 <ILI9341_Draw_Symbol>
		ILI9341_Draw_Text(card.rank, 180, 100, BLACK, 5, WHITE);
 8003918:	68b8      	ldr	r0, [r7, #8]
 800391a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	2305      	movs	r3, #5
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2300      	movs	r3, #0
 8003926:	2264      	movs	r2, #100	@ 0x64
 8003928:	21b4      	movs	r1, #180	@ 0xb4
 800392a:	f7fe feb5 	bl	8002698 <ILI9341_Draw_Text>
		break;
 800392e:	e014      	b.n	800395a <disPlayCommunityCard+0x10e>
	case 5:
		ILI9341_Draw_Symbol(10, 170, card.colour, card.symbol, 2);
 8003930:	8b3a      	ldrh	r2, [r7, #24]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2102      	movs	r1, #2
 8003936:	9100      	str	r1, [sp, #0]
 8003938:	21aa      	movs	r1, #170	@ 0xaa
 800393a:	200a      	movs	r0, #10
 800393c:	f7ff fb4a 	bl	8002fd4 <ILI9341_Draw_Symbol>
		ILI9341_Draw_Text(card.rank, 80, 180, BLACK, 5, WHITE);
 8003940:	68b8      	ldr	r0, [r7, #8]
 8003942:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	2305      	movs	r3, #5
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2300      	movs	r3, #0
 800394e:	22b4      	movs	r2, #180	@ 0xb4
 8003950:	2150      	movs	r1, #80	@ 0x50
 8003952:	f7fe fea1 	bl	8002698 <ILI9341_Draw_Text>
		break;
 8003956:	e000      	b.n	800395a <disPlayCommunityCard+0x10e>
	default:
		break;
 8003958:	bf00      	nop
	}
	HAL_Delay(500);
 800395a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800395e:	f002 fe37 	bl	80065d0 <HAL_Delay>
	resetScreen();
 8003962:	f7ff fd65 	bl	8003430 <resetScreen>
}
 8003966:	bf00      	nop
 8003968:	46bd      	mov	sp, r7
 800396a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800396e:	b004      	add	sp, #16
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40020000 	.word	0x40020000

08003978 <Process_Touch>:

void Process_Touch(int screenNumber, int *choice, Game *game, Player *player) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b0a2      	sub	sp, #136	@ 0x88
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
	uint16_t x_pos, y_pos;
	char message[100];
	uint16_t position_array[2];
	resetTouchScreen();
 8003986:	f7ff fd7b 	bl	8003480 <resetTouchScreen>
	setTouchScreen(screenNumber);
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff fdde 	bl	800354c <setTouchScreen>
	if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fc2f 	bl	80031f8 <TP_Read_Coordinates>
 800399a:	4603      	mov	r3, r0
 800399c:	2b01      	cmp	r3, #1
 800399e:	d14b      	bne.n	8003a38 <Process_Touch+0xc0>
	{
	  x_pos = position_array[0];
 80039a0:	8abb      	ldrh	r3, [r7, #20]
 80039a2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	  y_pos = position_array[1];
 80039a6:	8afb      	ldrh	r3, [r7, #22]
 80039a8:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

	  if (x_pos != 0 && y_pos != 0) {
 80039ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d041      	beq.n	8003a38 <Process_Touch+0xc0>
 80039b4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d03d      	beq.n	8003a38 <Process_Touch+0xc0>
		  sprintf(message, "Press Screen %d at (%d,%d)\r\n", screenNumber, x_pos, y_pos);
 80039bc:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 80039c0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80039c4:	f107 0018 	add.w	r0, r7, #24
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	491d      	ldr	r1, [pc, #116]	@ (8003a44 <Process_Touch+0xcc>)
 80039d0:	f008 fb4c 	bl	800c06c <siprintf>
		  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 80039d4:	bf00      	nop
 80039d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a48 <Process_Touch+0xd0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e0:	2b40      	cmp	r3, #64	@ 0x40
 80039e2:	d1f8      	bne.n	80039d6 <Process_Touch+0x5e>
		  HAL_UART_Transmit(&huart3, (uint8_t*) message, strlen(message), 10);
 80039e4:	f107 0318 	add.w	r3, r7, #24
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fc fc79 	bl	80002e0 <strlen>
 80039ee:	4603      	mov	r3, r0
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	f107 0118 	add.w	r1, r7, #24
 80039f6:	230a      	movs	r3, #10
 80039f8:	4813      	ldr	r0, [pc, #76]	@ (8003a48 <Process_Touch+0xd0>)
 80039fa:	f006 fd79 	bl	800a4f0 <HAL_UART_Transmit>
		  if ( x_pos >= 0 && x_pos < 90 && y_pos >= 200 && y_pos < 350) {
 80039fe:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003a02:	2b59      	cmp	r3, #89	@ 0x59
 8003a04:	d80d      	bhi.n	8003a22 <Process_Touch+0xaa>
 8003a06:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8003a0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a0c:	d909      	bls.n	8003a22 <Process_Touch+0xaa>
 8003a0e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8003a12:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8003a16:	d204      	bcs.n	8003a22 <Process_Touch+0xaa>
			  displayMenu(screenNumber, game, player);
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f83f 	bl	8003aa0 <displayMenu>
		  }
		  *choice = selectedChoice(x_pos, y_pos);
 8003a22:	f8b7 207c 	ldrh.w	r2, [r7, #124]	@ 0x7c
 8003a26:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 f893 	bl	8003b58 <selectedChoice>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	601a      	str	r2, [r3, #0]
	  }
	}
	resetTouchScreen();
 8003a38:	f7ff fd22 	bl	8003480 <resetTouchScreen>
}
 8003a3c:	bf00      	nop
 8003a3e:	3780      	adds	r7, #128	@ 0x80
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	0800fad0 	.word	0x0800fad0
 8003a48:	2000050c 	.word	0x2000050c

08003a4c <Check_Touch>:

uint8_t Check_Touch(int currentPlayer) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	switch (currentPlayer) {
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d81b      	bhi.n	8003a94 <Check_Touch+0x48>
 8003a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <Check_Touch+0x18>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a7d 	.word	0x08003a7d
 8003a6c:	08003a85 	.word	0x08003a85
 8003a70:	08003a8d 	.word	0x08003a8d
	case 1:
		return TP_Touchpad_Pressed();
 8003a74:	f7ff fc9c 	bl	80033b0 <TP_Touchpad_Pressed>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	e00c      	b.n	8003a96 <Check_Touch+0x4a>
		break;
	case 2:
		return TP_Touchpad2_Pressed();
 8003a7c:	f7ff fca8 	bl	80033d0 <TP_Touchpad2_Pressed>
 8003a80:	4603      	mov	r3, r0
 8003a82:	e008      	b.n	8003a96 <Check_Touch+0x4a>
		break;
	case 3:
		return TP_Touchpad3_Pressed();
 8003a84:	f7ff fcb4 	bl	80033f0 <TP_Touchpad3_Pressed>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	e004      	b.n	8003a96 <Check_Touch+0x4a>
		break;
	case 4:
		return TP_Touchpad4_Pressed();
 8003a8c:	f7ff fcc0 	bl	8003410 <TP_Touchpad4_Pressed>
 8003a90:	4603      	mov	r3, r0
 8003a92:	e000      	b.n	8003a96 <Check_Touch+0x4a>
		break;
	default:
		return 0;
 8003a94:	2300      	movs	r3, #0
		break;
	}
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop

08003aa0 <displayMenu>:

void displayMenu(int playerNumber, Game *game, Player *player) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b094      	sub	sp, #80	@ 0x50
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
	resetScreen();
 8003aac:	f7ff fcc0 	bl	8003430 <resetScreen>
	setScreen(playerNumber);
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f7ff fd05 	bl	80034c0 <setScreen>
	ILI9341_Fill_Screen(BLUE);
 8003ab6:	201f      	movs	r0, #31
 8003ab8:	f7ff f930 	bl	8002d1c <ILI9341_Fill_Screen>
	if (game->currentBet == player->currentBet) {
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d10b      	bne.n	8003ae0 <displayMenu+0x40>
		ILI9341_Draw_Text("Check", 80, 20, WHITE, 4, BLACK);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	2304      	movs	r3, #4
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ad4:	2214      	movs	r2, #20
 8003ad6:	2150      	movs	r1, #80	@ 0x50
 8003ad8:	481b      	ldr	r0, [pc, #108]	@ (8003b48 <displayMenu+0xa8>)
 8003ada:	f7fe fddd 	bl	8002698 <ILI9341_Draw_Text>
 8003ade:	e016      	b.n	8003b0e <displayMenu+0x6e>
	}
	else {
		char message[50];
		sprintf(message, "Call %d", game->currentBet - player->currentBet);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	1ad2      	subs	r2, r2, r3
 8003aea:	f107 0314 	add.w	r3, r7, #20
 8003aee:	4917      	ldr	r1, [pc, #92]	@ (8003b4c <displayMenu+0xac>)
 8003af0:	4618      	mov	r0, r3
 8003af2:	f008 fabb 	bl	800c06c <siprintf>
		ILI9341_Draw_Text(message, 80, 20, WHITE, 4, BLACK);
 8003af6:	f107 0014 	add.w	r0, r7, #20
 8003afa:	2300      	movs	r3, #0
 8003afc:	9301      	str	r3, [sp, #4]
 8003afe:	2304      	movs	r3, #4
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b06:	2214      	movs	r2, #20
 8003b08:	2150      	movs	r1, #80	@ 0x50
 8003b0a:	f7fe fdc5 	bl	8002698 <ILI9341_Draw_Text>
	}
	ILI9341_Draw_Text("Fold", 110, 90, WHITE, 4, BLACK);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	2304      	movs	r3, #4
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b1a:	225a      	movs	r2, #90	@ 0x5a
 8003b1c:	216e      	movs	r1, #110	@ 0x6e
 8003b1e:	480c      	ldr	r0, [pc, #48]	@ (8003b50 <displayMenu+0xb0>)
 8003b20:	f7fe fdba 	bl	8002698 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Bet", 120, 160, WHITE, 4, BLACK);
 8003b24:	2300      	movs	r3, #0
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	2304      	movs	r3, #4
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b30:	22a0      	movs	r2, #160	@ 0xa0
 8003b32:	2178      	movs	r1, #120	@ 0x78
 8003b34:	4807      	ldr	r0, [pc, #28]	@ (8003b54 <displayMenu+0xb4>)
 8003b36:	f7fe fdaf 	bl	8002698 <ILI9341_Draw_Text>

	resetScreen();
 8003b3a:	f7ff fc79 	bl	8003430 <resetScreen>
}
 8003b3e:	bf00      	nop
 8003b40:	3748      	adds	r7, #72	@ 0x48
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	0800faf0 	.word	0x0800faf0
 8003b4c:	0800faf8 	.word	0x0800faf8
 8003b50:	0800fb00 	.word	0x0800fb00
 8003b54:	0800fb08 	.word	0x0800fb08

08003b58 <selectedChoice>:

int selectedChoice(uint16_t x, uint16_t y) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	460a      	mov	r2, r1
 8003b62:	80fb      	strh	r3, [r7, #6]
 8003b64:	4613      	mov	r3, r2
 8003b66:	80bb      	strh	r3, [r7, #4]
//	if (x >= 20 && x <= 80 && y >= 80 && y <= 150) {
	if (x >= 0 && x <= 300 && y >= 0 && y <= 300) {
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003b6e:	d813      	bhi.n	8003b98 <selectedChoice+0x40>
 8003b70:	88bb      	ldrh	r3, [r7, #4]
 8003b72:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003b76:	d80f      	bhi.n	8003b98 <selectedChoice+0x40>
		while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 8003b78:	bf00      	nop
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba4 <selectedChoice+0x4c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b84:	2b40      	cmp	r3, #64	@ 0x40
 8003b86:	d1f8      	bne.n	8003b7a <selectedChoice+0x22>
		HAL_UART_Transmit(&huart3, (uint8_t*) "CHECK\r\n", strlen("CHECK\r\n"), 10);
 8003b88:	230a      	movs	r3, #10
 8003b8a:	2207      	movs	r2, #7
 8003b8c:	4906      	ldr	r1, [pc, #24]	@ (8003ba8 <selectedChoice+0x50>)
 8003b8e:	4805      	ldr	r0, [pc, #20]	@ (8003ba4 <selectedChoice+0x4c>)
 8003b90:	f006 fcae 	bl	800a4f0 <HAL_UART_Transmit>
		return 1;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <selectedChoice+0x42>
//	} else if (x >= 160 && x <= 200 && y >= 80 && y <= 150) {
//		while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
//		HAL_UART_Transmit(&huart3, (uint8_t*) "BET\r\n", strlen("BET\r\n"), 10);
//		return 3;
//	}
	return 0;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	2000050c 	.word	0x2000050c
 8003ba8:	0800fb0c 	.word	0x0800fb0c

08003bac <displayBet>:

void displayBet(int playerNumber, int raiseAmount) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	@ 0x28
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
	resetScreen();
 8003bb6:	f7ff fc3b 	bl	8003430 <resetScreen>
	setScreen(playerNumber);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff fc80 	bl	80034c0 <setScreen>
	ILI9341_Draw_Text("+", 40, 90, WHITE, 4, BLACK);
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bcc:	225a      	movs	r2, #90	@ 0x5a
 8003bce:	2128      	movs	r1, #40	@ 0x28
 8003bd0:	4818      	ldr	r0, [pc, #96]	@ (8003c34 <displayBet+0x88>)
 8003bd2:	f7fe fd61 	bl	8002698 <ILI9341_Draw_Text>
	char message[20];
	sprintf(message, "%d", raiseAmount);
 8003bd6:	f107 030c 	add.w	r3, r7, #12
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	4916      	ldr	r1, [pc, #88]	@ (8003c38 <displayBet+0x8c>)
 8003bde:	4618      	mov	r0, r3
 8003be0:	f008 fa44 	bl	800c06c <siprintf>
	ILI9341_Draw_Text(message, 130, 90, BLACK, 4, WHITE);
 8003be4:	f107 000c 	add.w	r0, r7, #12
 8003be8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	2304      	movs	r3, #4
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	225a      	movs	r2, #90	@ 0x5a
 8003bf6:	2182      	movs	r1, #130	@ 0x82
 8003bf8:	f7fe fd4e 	bl	8002698 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("-", 230, 90, WHITE, 4, BLACK);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	2304      	movs	r3, #4
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c08:	225a      	movs	r2, #90	@ 0x5a
 8003c0a:	21e6      	movs	r1, #230	@ 0xe6
 8003c0c:	480b      	ldr	r0, [pc, #44]	@ (8003c3c <displayBet+0x90>)
 8003c0e:	f7fe fd43 	bl	8002698 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Enter", 90, 190, WHITE, 4, BLACK);
 8003c12:	2300      	movs	r3, #0
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	2304      	movs	r3, #4
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c1e:	22be      	movs	r2, #190	@ 0xbe
 8003c20:	215a      	movs	r1, #90	@ 0x5a
 8003c22:	4807      	ldr	r0, [pc, #28]	@ (8003c40 <displayBet+0x94>)
 8003c24:	f7fe fd38 	bl	8002698 <ILI9341_Draw_Text>
	resetScreen();
 8003c28:	f7ff fc02 	bl	8003430 <resetScreen>
}
 8003c2c:	bf00      	nop
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	0800fb14 	.word	0x0800fb14
 8003c38:	0800fb18 	.word	0x0800fb18
 8003c3c:	0800fb1c 	.word	0x0800fb1c
 8003c40:	0800fb20 	.word	0x0800fb20

08003c44 <processBet>:

void processBet(int screenNumber, int *endBet, int *raiseAmount) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b0a2      	sub	sp, #136	@ 0x88
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
	uint16_t x_pos, y_pos;
	char message[100];
	uint16_t position_array[2];
	resetTouchScreen();
 8003c50:	f7ff fc16 	bl	8003480 <resetTouchScreen>
	setTouchScreen(screenNumber);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff fc79 	bl	800354c <setTouchScreen>
	if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK && count % 2 == 0)
 8003c5a:	f107 0314 	add.w	r3, r7, #20
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff faca 	bl	80031f8 <TP_Read_Coordinates>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d179      	bne.n	8003d5e <processBet+0x11a>
 8003c6a:	4b40      	ldr	r3, [pc, #256]	@ (8003d6c <processBet+0x128>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d172      	bne.n	8003d5e <processBet+0x11a>
	{
		x_pos = position_array[0];
 8003c78:	8abb      	ldrh	r3, [r7, #20]
 8003c7a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		y_pos = position_array[1];
 8003c7e:	8afb      	ldrh	r3, [r7, #22]
 8003c80:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

		sprintf(message, "Press Bet Screen %d at (%d,%d)\r\n", screenNumber, x_pos, y_pos);
 8003c84:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8003c88:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8003c8c:	f107 0018 	add.w	r0, r7, #24
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4936      	ldr	r1, [pc, #216]	@ (8003d70 <processBet+0x12c>)
 8003c98:	f008 f9e8 	bl	800c06c <siprintf>
		while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 8003c9c:	bf00      	nop
 8003c9e:	4b35      	ldr	r3, [pc, #212]	@ (8003d74 <processBet+0x130>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca8:	2b40      	cmp	r3, #64	@ 0x40
 8003caa:	d1f8      	bne.n	8003c9e <processBet+0x5a>
		HAL_UART_Transmit(&huart3, (uint8_t*) message, strlen(message), 10);
 8003cac:	f107 0318 	add.w	r3, r7, #24
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fc fb15 	bl	80002e0 <strlen>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	f107 0118 	add.w	r1, r7, #24
 8003cbe:	230a      	movs	r3, #10
 8003cc0:	482c      	ldr	r0, [pc, #176]	@ (8003d74 <processBet+0x130>)
 8003cc2:	f006 fc15 	bl	800a4f0 <HAL_UART_Transmit>

		if ( x_pos >= 90 && x_pos < 130 && y_pos >= 250 && y_pos < 300) {
 8003cc6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003cca:	2b59      	cmp	r3, #89	@ 0x59
 8003ccc:	d913      	bls.n	8003cf6 <processBet+0xb2>
 8003cce:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003cd2:	2b81      	cmp	r3, #129	@ 0x81
 8003cd4:	d80f      	bhi.n	8003cf6 <processBet+0xb2>
 8003cd6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8003cda:	2bf9      	cmp	r3, #249	@ 0xf9
 8003cdc:	d90b      	bls.n	8003cf6 <processBet+0xb2>
 8003cde:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8003ce2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003ce6:	d206      	bcs.n	8003cf6 <processBet+0xb2>
		  // +
		  *raiseAmount += 10;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f103 020a 	add.w	r2, r3, #10
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e02d      	b.n	8003d52 <processBet+0x10e>
		} else if ( x_pos >= 90 && x_pos < 130 && y_pos >= 40 && y_pos < 100) {
 8003cf6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003cfa:	2b59      	cmp	r3, #89	@ 0x59
 8003cfc:	d916      	bls.n	8003d2c <processBet+0xe8>
 8003cfe:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003d02:	2b81      	cmp	r3, #129	@ 0x81
 8003d04:	d812      	bhi.n	8003d2c <processBet+0xe8>
 8003d06:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8003d0a:	2b27      	cmp	r3, #39	@ 0x27
 8003d0c:	d90e      	bls.n	8003d2c <processBet+0xe8>
 8003d0e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8003d12:	2b63      	cmp	r3, #99	@ 0x63
 8003d14:	d80a      	bhi.n	8003d2c <processBet+0xe8>
		  // -
		  if (*raiseAmount > 0) {
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	dd19      	ble.n	8003d52 <processBet+0x10e>
			  *raiseAmount -= 10;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1a3 020a 	sub.w	r2, r3, #10
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	601a      	str	r2, [r3, #0]
		  if (*raiseAmount > 0) {
 8003d2a:	e012      	b.n	8003d52 <processBet+0x10e>
		  }
		} else if ( x_pos >= 190 && x_pos < 240 && y_pos >= 100 && y_pos < 230) {
 8003d2c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003d30:	2bbd      	cmp	r3, #189	@ 0xbd
 8003d32:	d90e      	bls.n	8003d52 <processBet+0x10e>
 8003d34:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8003d38:	2bef      	cmp	r3, #239	@ 0xef
 8003d3a:	d80a      	bhi.n	8003d52 <processBet+0x10e>
 8003d3c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8003d40:	2b63      	cmp	r3, #99	@ 0x63
 8003d42:	d906      	bls.n	8003d52 <processBet+0x10e>
 8003d44:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8003d48:	2be5      	cmp	r3, #229	@ 0xe5
 8003d4a:	d802      	bhi.n	8003d52 <processBet+0x10e>
		  // End Bet
		  *endBet = 1;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
		}
		displayBet(screenNumber, *raiseAmount);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4619      	mov	r1, r3
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff ff27 	bl	8003bac <displayBet>
	}
	resetTouchScreen();
 8003d5e:	f7ff fb8f 	bl	8003480 <resetTouchScreen>
}
 8003d62:	bf00      	nop
 8003d64:	3780      	adds	r7, #128	@ 0x80
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000594 	.word	0x20000594
 8003d70:	0800fb28 	.word	0x0800fb28
 8003d74:	2000050c 	.word	0x2000050c

08003d78 <Joystick_Init>:

static JoystickConfig joystick_config;
static uint32_t previous_x_val = 0;
static uint32_t previous_y_val = 0;

void Joystick_Init(JoystickConfig* config) {
 8003d78:	b4b0      	push	{r4, r5, r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
    joystick_config = *config;
 8003d80:	4a07      	ldr	r2, [pc, #28]	@ (8003da0 <Joystick_Init+0x28>)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4614      	mov	r4, r2
 8003d86:	461d      	mov	r5, r3
 8003d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003d90:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bcb0      	pop	{r4, r5, r7}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000598 	.word	0x20000598

08003da4 <UpdateDisplay>:

static void UpdateDisplay(uint8_t n_players, uint8_t n_bots, const char* status_message) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b092      	sub	sp, #72	@ 0x48
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	4603      	mov	r3, r0
 8003dac:	603a      	str	r2, [r7, #0]
 8003dae:	71fb      	strb	r3, [r7, #7]
 8003db0:	460b      	mov	r3, r1
 8003db2:	71bb      	strb	r3, [r7, #6]
    char buffer[50];

    sprintf(buffer, "PLAYERS: %d", n_players);
 8003db4:	79fa      	ldrb	r2, [r7, #7]
 8003db6:	f107 030c 	add.w	r3, r7, #12
 8003dba:	4920      	ldr	r1, [pc, #128]	@ (8003e3c <UpdateDisplay+0x98>)
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f008 f955 	bl	800c06c <siprintf>
    ILI9341_Draw_Text(buffer, 30, 30, BLACK, 3, WHITE);
 8003dc2:	f107 000c 	add.w	r0, r7, #12
 8003dc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	2303      	movs	r3, #3
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	221e      	movs	r2, #30
 8003dd4:	211e      	movs	r1, #30
 8003dd6:	f7fe fc5f 	bl	8002698 <ILI9341_Draw_Text>

    sprintf(buffer, "BOTS: %d", n_bots);
 8003dda:	79ba      	ldrb	r2, [r7, #6]
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	4917      	ldr	r1, [pc, #92]	@ (8003e40 <UpdateDisplay+0x9c>)
 8003de2:	4618      	mov	r0, r3
 8003de4:	f008 f942 	bl	800c06c <siprintf>
    ILI9341_Draw_Text(buffer, 30, 50, BLACK, 3, WHITE);
 8003de8:	f107 000c 	add.w	r0, r7, #12
 8003dec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	2303      	movs	r3, #3
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2300      	movs	r3, #0
 8003df8:	2232      	movs	r2, #50	@ 0x32
 8003dfa:	211e      	movs	r1, #30
 8003dfc:	f7fe fc4c 	bl	8002698 <ILI9341_Draw_Text>

    if (status_message) {
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <UpdateDisplay+0x78>
        ILI9341_Draw_Text(status_message, 30, 100, BLACK, 3, WHITE);
 8003e06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2300      	movs	r3, #0
 8003e12:	2264      	movs	r2, #100	@ 0x64
 8003e14:	211e      	movs	r1, #30
 8003e16:	6838      	ldr	r0, [r7, #0]
 8003e18:	f7fe fc3e 	bl	8002698 <ILI9341_Draw_Text>
    }

    ILI9341_Draw_Text("Play Game", 40, 140, WHITE, 3, BLACK);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	2303      	movs	r3, #3
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e28:	228c      	movs	r2, #140	@ 0x8c
 8003e2a:	2128      	movs	r1, #40	@ 0x28
 8003e2c:	4805      	ldr	r0, [pc, #20]	@ (8003e44 <UpdateDisplay+0xa0>)
 8003e2e:	f7fe fc33 	bl	8002698 <ILI9341_Draw_Text>
}
 8003e32:	bf00      	nop
 8003e34:	3740      	adds	r7, #64	@ 0x40
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	0800fb4c 	.word	0x0800fb4c
 8003e40:	0800fb58 	.word	0x0800fb58
 8003e44:	0800fb64 	.word	0x0800fb64

08003e48 <Joystick_GetXValue>:

uint32_t Joystick_GetXValue(void) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
    HAL_ADC_Start(joystick_config.adc_x);
 8003e4c:	4b09      	ldr	r3, [pc, #36]	@ (8003e74 <Joystick_GetXValue+0x2c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f002 fc25 	bl	80066a0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(joystick_config.adc_x, HAL_MAX_DELAY);
 8003e56:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <Joystick_GetXValue+0x2c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f002 fcec 	bl	800683c <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(joystick_config.adc_x);
 8003e64:	4b03      	ldr	r3, [pc, #12]	@ (8003e74 <Joystick_GetXValue+0x2c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f002 fd72 	bl	8006952 <HAL_ADC_GetValue>
 8003e6e:	4603      	mov	r3, r0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000598 	.word	0x20000598

08003e78 <Joystick_GetYValue>:

uint32_t Joystick_GetYValue(void) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
    HAL_ADC_Start(joystick_config.adc_y);
 8003e7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ea4 <Joystick_GetYValue+0x2c>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f002 fc0d 	bl	80066a0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(joystick_config.adc_y, HAL_MAX_DELAY);
 8003e86:	4b07      	ldr	r3, [pc, #28]	@ (8003ea4 <Joystick_GetYValue+0x2c>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f002 fcd4 	bl	800683c <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(joystick_config.adc_y);
 8003e94:	4b03      	ldr	r3, [pc, #12]	@ (8003ea4 <Joystick_GetYValue+0x2c>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f002 fd5a 	bl	8006952 <HAL_ADC_GetValue>
 8003e9e:	4603      	mov	r3, r0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000598 	.word	0x20000598

08003ea8 <Joystick_Update>:

void Joystick_Update(uint8_t* n_players, uint8_t* n_bots, JoystickState* current_state, int *playGame) {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b094      	sub	sp, #80	@ 0x50
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
    uint32_t x_val = Joystick_GetXValue();
 8003eb6:	f7ff ffc7 	bl	8003e48 <Joystick_GetXValue>
 8003eba:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t y_val = Joystick_GetYValue();
 8003ebc:	f7ff ffdc 	bl	8003e78 <Joystick_GetYValue>
 8003ec0:	64b8      	str	r0, [r7, #72]	@ 0x48
    char status_message[50] = {0};
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	f107 0318 	add.w	r3, r7, #24
 8003eca:	222e      	movs	r2, #46	@ 0x2e
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f009 f8d6 	bl	800d080 <memset>

    // Check for mode switching based on y_val
    if (y_val > joystick_config.mode_switch_high) {
 8003ed4:	4b53      	ldr	r3, [pc, #332]	@ (8004024 <Joystick_Update+0x17c>)
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d909      	bls.n	8003ef2 <Joystick_Update+0x4a>
        *current_state = STATE_MODIFY_PLAYERS;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
        sprintf(status_message, "Switched to Player Mode");
 8003ee4:	f107 0314 	add.w	r3, r7, #20
 8003ee8:	494f      	ldr	r1, [pc, #316]	@ (8004028 <Joystick_Update+0x180>)
 8003eea:	4618      	mov	r0, r3
 8003eec:	f008 f8be 	bl	800c06c <siprintf>
 8003ef0:	e00d      	b.n	8003f0e <Joystick_Update+0x66>
    } else if (y_val < joystick_config.mode_switch_low) {
 8003ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8004024 <Joystick_Update+0x17c>)
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d208      	bcs.n	8003f0e <Joystick_Update+0x66>
        *current_state = STATE_MODIFY_BOTS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
        sprintf(status_message, "Switched to Bot Mode");
 8003f02:	f107 0314 	add.w	r3, r7, #20
 8003f06:	4949      	ldr	r1, [pc, #292]	@ (800402c <Joystick_Update+0x184>)
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f008 f8af 	bl	800c06c <siprintf>
    }

    // Modify players or bots based on current state
    if (*current_state == STATE_MODIFY_PLAYERS) {
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d135      	bne.n	8003f82 <Joystick_Update+0xda>
        if (x_val > joystick_config.threshold_increase && (*n_players + *n_bots < 4)) {
 8003f16:	4b43      	ldr	r3, [pc, #268]	@ (8004024 <Joystick_Update+0x17c>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d917      	bls.n	8003f50 <Joystick_Update+0xa8>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	dc0f      	bgt.n	8003f50 <Joystick_Update+0xa8>
            (*n_players)++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	701a      	strb	r2, [r3, #0]
            sprintf(status_message, "Players increased: %d", *n_players);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	f107 0314 	add.w	r3, r7, #20
 8003f46:	493a      	ldr	r1, [pc, #232]	@ (8004030 <Joystick_Update+0x188>)
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f008 f88f 	bl	800c06c <siprintf>
 8003f4e:	e051      	b.n	8003ff4 <Joystick_Update+0x14c>
        } else if (x_val < joystick_config.threshold_decrease && *n_players > 0) {
 8003f50:	4b34      	ldr	r3, [pc, #208]	@ (8004024 <Joystick_Update+0x17c>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d24c      	bcs.n	8003ff4 <Joystick_Update+0x14c>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d048      	beq.n	8003ff4 <Joystick_Update+0x14c>
            (*n_players)--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	701a      	strb	r2, [r3, #0]
            sprintf(status_message, "Players decreased: %d", *n_players);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	492e      	ldr	r1, [pc, #184]	@ (8004034 <Joystick_Update+0x18c>)
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f008 f876 	bl	800c06c <siprintf>
 8003f80:	e038      	b.n	8003ff4 <Joystick_Update+0x14c>
        }
    } else if (*current_state == STATE_MODIFY_BOTS) {
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d134      	bne.n	8003ff4 <Joystick_Update+0x14c>
        if (x_val > joystick_config.threshold_increase && (*n_players + *n_bots < 4)) {
 8003f8a:	4b26      	ldr	r3, [pc, #152]	@ (8004024 <Joystick_Update+0x17c>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d917      	bls.n	8003fc4 <Joystick_Update+0x11c>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	dc0f      	bgt.n	8003fc4 <Joystick_Update+0x11c>
            (*n_bots)++;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	701a      	strb	r2, [r3, #0]
            sprintf(status_message, "Bots increased: %d", *n_bots);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f107 0314 	add.w	r3, r7, #20
 8003fba:	491f      	ldr	r1, [pc, #124]	@ (8004038 <Joystick_Update+0x190>)
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f008 f855 	bl	800c06c <siprintf>
 8003fc2:	e017      	b.n	8003ff4 <Joystick_Update+0x14c>
        } else if (x_val < joystick_config.threshold_decrease && *n_bots > 0) {
 8003fc4:	4b17      	ldr	r3, [pc, #92]	@ (8004024 <Joystick_Update+0x17c>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d212      	bcs.n	8003ff4 <Joystick_Update+0x14c>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00e      	beq.n	8003ff4 <Joystick_Update+0x14c>
            (*n_bots)--;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	701a      	strb	r2, [r3, #0]
            sprintf(status_message, "Bots decreased: %d", *n_bots);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	4913      	ldr	r1, [pc, #76]	@ (800403c <Joystick_Update+0x194>)
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f008 f83c 	bl	800c06c <siprintf>
    } else if (*current_state == STATE_PLAYGAME) {

    }

    // Update display
    UpdateDisplay(*n_players, *n_bots, status_message);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	7818      	ldrb	r0, [r3, #0]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	f107 0214 	add.w	r2, r7, #20
 8004000:	4619      	mov	r1, r3
 8004002:	f7ff fecf 	bl	8003da4 <UpdateDisplay>

    // Update previous values
    previous_x_val = x_val;
 8004006:	4a0e      	ldr	r2, [pc, #56]	@ (8004040 <Joystick_Update+0x198>)
 8004008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800400a:	6013      	str	r3, [r2, #0]
    previous_y_val = y_val;
 800400c:	4a0d      	ldr	r2, [pc, #52]	@ (8004044 <Joystick_Update+0x19c>)
 800400e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004010:	6013      	str	r3, [r2, #0]

    HAL_Delay(300); // Delay for debouncing
 8004012:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004016:	f002 fadb 	bl	80065d0 <HAL_Delay>
}
 800401a:	bf00      	nop
 800401c:	3750      	adds	r7, #80	@ 0x50
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000598 	.word	0x20000598
 8004028:	0800fb70 	.word	0x0800fb70
 800402c:	0800fb88 	.word	0x0800fb88
 8004030:	0800fba0 	.word	0x0800fba0
 8004034:	0800fbb8 	.word	0x0800fbb8
 8004038:	0800fbd0 	.word	0x0800fbd0
 800403c:	0800fbe4 	.word	0x0800fbe4
 8004040:	200005b0 	.word	0x200005b0
 8004044:	200005b4 	.word	0x200005b4

08004048 <teraPrint>:
    "FULL HOUSE",
    "FOUR OF KIND",
    "STRAIGHT FLUSH"
};

void teraPrint(char message[]) {
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 8004050:	bf00      	nop
 8004052:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <teraPrint+0x34>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b40      	cmp	r3, #64	@ 0x40
 800405e:	d1f8      	bne.n	8004052 <teraPrint+0xa>
	HAL_UART_Transmit(&huart3, (uint8_t*) message, strlen(message), 10);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7fc f93d 	bl	80002e0 <strlen>
 8004066:	4603      	mov	r3, r0
 8004068:	b29a      	uxth	r2, r3
 800406a:	230a      	movs	r3, #10
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4803      	ldr	r0, [pc, #12]	@ (800407c <teraPrint+0x34>)
 8004070:	f006 fa3e 	bl	800a4f0 <HAL_UART_Transmit>
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	2000050c 	.word	0x2000050c

08004080 <initializeGame>:

void initializeGame(Game *game)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
    game->pot = 0;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
    game->currentBet = 0;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	605a      	str	r2, [r3, #4]
    game->state = PREFLOP;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	721a      	strb	r2, [r3, #8]
    game->button = 0;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	60da      	str	r2, [r3, #12]
    game->numCommunityCards = 0;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <createDeck>:
        game->pot += BIG_BLIND;
    }
}

void createDeck(Card deck[])
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
    int index = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
    for (int suit = 0; suit < NUM_SUITS; suit++)
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	e097      	b.n	80041f6 <createDeck+0x142>
    {
        for (int rank = 0; rank < NUM_RANKS; rank++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e08d      	b.n	80041e8 <createDeck+0x134>
        {
            deck[index].rank = (char *)ranks[rank];
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4413      	add	r3, r2
 80040dc:	494b      	ldr	r1, [pc, #300]	@ (800420c <createDeck+0x158>)
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80040e4:	601a      	str	r2, [r3, #0]
            deck[index].suit = (char *)suits[suit];
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4413      	add	r3, r2
 80040f6:	4946      	ldr	r1, [pc, #280]	@ (8004210 <createDeck+0x15c>)
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80040fe:	605a      	str	r2, [r3, #4]
            deck[index].rankValue = rankValues[rank];
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	461a      	mov	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	4940      	ldr	r1, [pc, #256]	@ (8004214 <createDeck+0x160>)
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004118:	609a      	str	r2, [r3, #8]
            if (suit == 0) {
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d115      	bne.n	800414c <createDeck+0x98>
            	deck[index].symbol = HEART;
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	461a      	mov	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	4a39      	ldr	r2, [pc, #228]	@ (8004218 <createDeck+0x164>)
 8004132:	60da      	str	r2, [r3, #12]
            	deck[index].colour = RED;
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	461a      	mov	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004148:	821a      	strh	r2, [r3, #16]
 800414a:	e047      	b.n	80041dc <createDeck+0x128>
            } else if (suit == 1) {
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d115      	bne.n	800417e <createDeck+0xca>
            	deck[index].symbol = DIAMOND;
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	461a      	mov	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	4a2e      	ldr	r2, [pc, #184]	@ (800421c <createDeck+0x168>)
 8004164:	60da      	str	r2, [r3, #12]
            	deck[index].colour = RED;
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	461a      	mov	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800417a:	821a      	strh	r2, [r3, #16]
 800417c:	e02e      	b.n	80041dc <createDeck+0x128>
            } else if (suit == 2) {
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d114      	bne.n	80041ae <createDeck+0xfa>
            	deck[index].symbol = CLUB;
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4413      	add	r3, r2
 8004194:	4a22      	ldr	r2, [pc, #136]	@ (8004220 <createDeck+0x16c>)
 8004196:	60da      	str	r2, [r3, #12]
            	deck[index].colour = BLACK;
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	461a      	mov	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4413      	add	r3, r2
 80041a8:	2200      	movs	r2, #0
 80041aa:	821a      	strh	r2, [r3, #16]
 80041ac:	e016      	b.n	80041dc <createDeck+0x128>
            } else if (suit == 3) {
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d113      	bne.n	80041dc <createDeck+0x128>
            	deck[index].symbol = SPADE;
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4413      	add	r3, r2
 80041c4:	4a17      	ldr	r2, [pc, #92]	@ (8004224 <createDeck+0x170>)
 80041c6:	60da      	str	r2, [r3, #12]
            	deck[index].colour = BLACK;
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	2200      	movs	r2, #0
 80041da:	821a      	strh	r2, [r3, #16]
            }
            index++;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	3301      	adds	r3, #1
 80041e0:	617b      	str	r3, [r7, #20]
        for (int rank = 0; rank < NUM_RANKS; rank++)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3301      	adds	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	f77f af6e 	ble.w	80040cc <createDeck+0x18>
    for (int suit = 0; suit < NUM_SUITS; suit++)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	3301      	adds	r3, #1
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	f77f af64 	ble.w	80040c6 <createDeck+0x12>
        }
    }
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	20000024 	.word	0x20000024
 8004210:	20000014 	.word	0x20000014
 8004214:	08010490 	.word	0x08010490
 8004218:	080105c4 	.word	0x080105c4
 800421c:	08010544 	.word	0x08010544
 8004220:	08010644 	.word	0x08010644
 8004224:	080104c4 	.word	0x080104c4

08004228 <shuffleDeck>:

void shuffleDeck(Card deck[])
{
 8004228:	b5b0      	push	{r4, r5, r7, lr}
 800422a:	b08a      	sub	sp, #40	@ 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 52; i++)
 8004230:	2300      	movs	r3, #0
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
 8004234:	e044      	b.n	80042c0 <shuffleDeck+0x98>
    {
        int j = rand() % 52;
 8004236:	f007 ff67 	bl	800c108 <rand>
 800423a:	4603      	mov	r3, r0
 800423c:	4a24      	ldr	r2, [pc, #144]	@ (80042d0 <shuffleDeck+0xa8>)
 800423e:	fb82 1203 	smull	r1, r2, r2, r3
 8004242:	1111      	asrs	r1, r2, #4
 8004244:	17da      	asrs	r2, r3, #31
 8004246:	1a8a      	subs	r2, r1, r2
 8004248:	2134      	movs	r1, #52	@ 0x34
 800424a:	fb01 f202 	mul.w	r2, r1, r2
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	623b      	str	r3, [r7, #32]
        Card temp = deck[i];
 8004252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	461a      	mov	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	f107 040c 	add.w	r4, r7, #12
 8004266:	461d      	mov	r5, r3
 8004268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800426a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	6023      	str	r3, [r4, #0]
        deck[i] = deck[j];
 8004270:	6a3a      	ldr	r2, [r7, #32]
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	461a      	mov	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	1899      	adds	r1, r3, r2
 8004280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	461a      	mov	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4413      	add	r3, r2
 8004290:	461c      	mov	r4, r3
 8004292:	460d      	mov	r5, r1
 8004294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004298:	682b      	ldr	r3, [r5, #0]
 800429a:	6023      	str	r3, [r4, #0]
        deck[j] = temp;
 800429c:	6a3a      	ldr	r2, [r7, #32]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	461a      	mov	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4413      	add	r3, r2
 80042ac:	461d      	mov	r5, r3
 80042ae:	f107 040c 	add.w	r4, r7, #12
 80042b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	602b      	str	r3, [r5, #0]
    for (int i = 0; i < 52; i++)
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	3301      	adds	r3, #1
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	2b33      	cmp	r3, #51	@ 0x33
 80042c4:	ddb7      	ble.n	8004236 <shuffleDeck+0xe>
    }
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	3728      	adds	r7, #40	@ 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bdb0      	pop	{r4, r5, r7, pc}
 80042d0:	4ec4ec4f 	.word	0x4ec4ec4f

080042d4 <initializePlayers>:

void initializePlayers(Player players[], uint8_t n_players, uint8_t n_bots)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
 80042e0:	4613      	mov	r3, r2
 80042e2:	70bb      	strb	r3, [r7, #2]
	int i = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
    while (i < n_players)
 80042e8:	e035      	b.n	8004356 <initializePlayers+0x82>
    {
        players[i].chips = STARTING_CHIPS;
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042fe:	629a      	str	r2, [r3, #40]	@ 0x28
        players[i].currentBet = 0;
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	461a      	mov	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4413      	add	r3, r2
 8004310:	2200      	movs	r2, #0
 8004312:	62da      	str	r2, [r3, #44]	@ 0x2c
        players[i].folded = 0;
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30
        players[i].allIn = 0;
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4613      	mov	r3, r2
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	461a      	mov	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4413      	add	r3, r2
 8004338:	2200      	movs	r2, #0
 800433a:	635a      	str	r2, [r3, #52]	@ 0x34
        players[i].is_bot = 0;
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	461a      	mov	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	2200      	movs	r2, #0
 800434e:	639a      	str	r2, [r3, #56]	@ 0x38
        i++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3301      	adds	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
    while (i < n_players)
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	429a      	cmp	r2, r3
 800435c:	dbc5      	blt.n	80042ea <initializePlayers+0x16>
    }
    while (i < NUM_PLAYERS){
 800435e:	e035      	b.n	80043cc <initializePlayers+0xf8>
        players[i].chips = STARTING_CHIPS;
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	461a      	mov	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4413      	add	r3, r2
 8004370:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004374:	629a      	str	r2, [r3, #40]	@ 0x28
        players[i].currentBet = 0;
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4613      	mov	r3, r2
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	461a      	mov	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	2200      	movs	r2, #0
 8004388:	62da      	str	r2, [r3, #44]	@ 0x2c
        players[i].folded = 0;
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4613      	mov	r3, r2
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	461a      	mov	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	@ 0x30
        players[i].allIn = 0;
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4613      	mov	r3, r2
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	461a      	mov	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	2200      	movs	r2, #0
 80043b0:	635a      	str	r2, [r3, #52]	@ 0x34
        players[i].is_bot = 1;
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4613      	mov	r3, r2
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4413      	add	r3, r2
 80043c2:	2201      	movs	r2, #1
 80043c4:	639a      	str	r2, [r3, #56]	@ 0x38
        i++;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3301      	adds	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
    while (i < NUM_PLAYERS){
 80043cc:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <initializePlayers+0x110>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	dbc4      	blt.n	8004360 <initializePlayers+0x8c>
    }
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	20000058 	.word	0x20000058

080043e8 <dealInitialCards>:

void dealInitialCards(Card deck[], Player players[], int *deckIndex)
{
 80043e8:	b4b0      	push	{r4, r5, r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < NUM_PLAYERS; i++)
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	e02c      	b.n	8004454 <dealInitialCards+0x6c>
    {
        for (int j = 0; j < 2; j++)
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	e023      	b.n	8004448 <dealInitialCards+0x60>
        {
            players[i].hand[j] = deck[(*deckIndex)++];
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	1c59      	adds	r1, r3, #1
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6011      	str	r1, [r2, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	461a      	mov	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1898      	adds	r0, r3, r2
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	461a      	mov	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	1899      	adds	r1, r3, r2
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	461c      	mov	r4, r3
 8004438:	4605      	mov	r5, r0
 800443a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800443c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800443e:	682b      	ldr	r3, [r5, #0]
 8004440:	6023      	str	r3, [r4, #0]
        for (int j = 0; j < 2; j++)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	3301      	adds	r3, #1
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b01      	cmp	r3, #1
 800444c:	ddd8      	ble.n	8004400 <dealInitialCards+0x18>
    for (int i = 0; i < NUM_PLAYERS; i++)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	3301      	adds	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	4b05      	ldr	r3, [pc, #20]	@ (800446c <dealInitialCards+0x84>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	429a      	cmp	r2, r3
 800445c:	dbcd      	blt.n	80043fa <dealInitialCards+0x12>
        }
    }
}
 800445e:	bf00      	nop
 8004460:	bf00      	nop
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	bcb0      	pop	{r4, r5, r7}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000058 	.word	0x20000058

08004470 <dealCommunityCards>:

void dealCommunityCards(Card deck[], Game *game, int numCards, int *deckIndex)
{
 8004470:	b4b0      	push	{r4, r5, r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < numCards; i++)
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	e021      	b.n	80044c8 <dealCommunityCards+0x58>
    {
        game->communityCards[game->numCommunityCards++] = deck[(*deckIndex)++];
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	1c59      	adds	r1, r3, #1
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	461a      	mov	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1898      	adds	r0, r3, r2
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80044a2:	1c51      	adds	r1, r2, #1
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6759      	str	r1, [r3, #116]	@ 0x74
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	3310      	adds	r3, #16
 80044b6:	461c      	mov	r4, r3
 80044b8:	4605      	mov	r5, r0
 80044ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044be:	682b      	ldr	r3, [r5, #0]
 80044c0:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < numCards; i++)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	3301      	adds	r3, #1
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	dbd9      	blt.n	8004484 <dealCommunityCards+0x14>
    }
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bcb0      	pop	{r4, r5, r7}
 80044da:	4770      	bx	lr

080044dc <displayPlayerStatus>:

void displayPlayerStatus(Player players[], int currentPlayer)
{
 80044dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044de:	b0ab      	sub	sp, #172	@ 0xac
 80044e0:	af0e      	add	r7, sp, #56	@ 0x38
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < NUM_PLAYERS; i++)
 80044e6:	2300      	movs	r3, #0
 80044e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044ea:	e066      	b.n	80045ba <displayPlayerStatus+0xde>
    {
    	char message[100];
        sprintf(message, "Player %d: Chips: %d, Bet: %d%s%s%s\r\n",
 80044ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ee:	1c5d      	adds	r5, r3, #1
               i + 1,
               players[i].chips,
 80044f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	461a      	mov	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4413      	add	r3, r2
        sprintf(message, "Player %d: Chips: %d, Bet: %d%s%s%s\r\n",
 8004500:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
               players[i].currentBet,
 8004502:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4413      	add	r3, r2
        sprintf(message, "Player %d: Chips: %d, Bet: %d%s%s%s\r\n",
 8004512:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
               players[i].folded ? " (FOLDED)" : "",
 8004514:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004516:	4613      	mov	r3, r2
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	461a      	mov	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4413      	add	r3, r2
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        sprintf(message, "Player %d: Chips: %d, Bet: %d%s%s%s\r\n",
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <displayPlayerStatus+0x52>
 800452a:	4829      	ldr	r0, [pc, #164]	@ (80045d0 <displayPlayerStatus+0xf4>)
 800452c:	e000      	b.n	8004530 <displayPlayerStatus+0x54>
 800452e:	4829      	ldr	r0, [pc, #164]	@ (80045d4 <displayPlayerStatus+0xf8>)
               players[i].allIn ? " (ALL-IN)" : "",
 8004530:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	461a      	mov	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4413      	add	r3, r2
 8004540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        sprintf(message, "Player %d: Chips: %d, Bet: %d%s%s%s\r\n",
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <displayPlayerStatus+0x6e>
 8004546:	4b24      	ldr	r3, [pc, #144]	@ (80045d8 <displayPlayerStatus+0xfc>)
 8004548:	e000      	b.n	800454c <displayPlayerStatus+0x70>
 800454a:	4b22      	ldr	r3, [pc, #136]	@ (80045d4 <displayPlayerStatus+0xf8>)
 800454c:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	4294      	cmp	r4, r2
 8004552:	d101      	bne.n	8004558 <displayPlayerStatus+0x7c>
 8004554:	4a21      	ldr	r2, [pc, #132]	@ (80045dc <displayPlayerStatus+0x100>)
 8004556:	e000      	b.n	800455a <displayPlayerStatus+0x7e>
 8004558:	4a1e      	ldr	r2, [pc, #120]	@ (80045d4 <displayPlayerStatus+0xf8>)
 800455a:	f107 0408 	add.w	r4, r7, #8
 800455e:	9203      	str	r2, [sp, #12]
 8004560:	9302      	str	r3, [sp, #8]
 8004562:	9001      	str	r0, [sp, #4]
 8004564:	9100      	str	r1, [sp, #0]
 8004566:	4633      	mov	r3, r6
 8004568:	462a      	mov	r2, r5
 800456a:	491d      	ldr	r1, [pc, #116]	@ (80045e0 <displayPlayerStatus+0x104>)
 800456c:	4620      	mov	r0, r4
 800456e:	f007 fd7d 	bl	800c06c <siprintf>
               i == currentPlayer ? " <- CURRENT" : "");
        teraPrint(message);
 8004572:	f107 0308 	add.w	r3, r7, #8
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fd66 	bl	8004048 <teraPrint>
        displayHand(players[i], i+1, currentPlayer);
 800457c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800457e:	4613      	mov	r3, r2
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	461a      	mov	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	189e      	adds	r6, r3, r2
 800458c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800458e:	3301      	adds	r3, #1
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	920c      	str	r2, [sp, #48]	@ 0x30
 8004594:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004596:	466d      	mov	r5, sp
 8004598:	f106 0410 	add.w	r4, r6, #16
 800459c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800459e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80045a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80045ac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80045b0:	f7ff f820 	bl	80035f4 <displayHand>
    for (int i = 0; i < NUM_PLAYERS; i++)
 80045b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045b6:	3301      	adds	r3, #1
 80045b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045ba:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <displayPlayerStatus+0x108>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045c0:	429a      	cmp	r2, r3
 80045c2:	db93      	blt.n	80044ec <displayPlayerStatus+0x10>
    }
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	3774      	adds	r7, #116	@ 0x74
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ce:	bf00      	nop
 80045d0:	0800fcc4 	.word	0x0800fcc4
 80045d4:	0800fcd0 	.word	0x0800fcd0
 80045d8:	0800fcd4 	.word	0x0800fcd4
 80045dc:	0800fce0 	.word	0x0800fce0
 80045e0:	0800fcec 	.word	0x0800fcec
 80045e4:	20000058 	.word	0x20000058

080045e8 <displayCommunityCards>:

void displayCommunityCards(Game *game)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b09f      	sub	sp, #124	@ 0x7c
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	6078      	str	r0, [r7, #4]
    printf("Community cards: ");
 80045f0:	482d      	ldr	r0, [pc, #180]	@ (80046a8 <displayCommunityCards+0xc0>)
 80045f2:	f008 fcbb 	bl	800cf6c <iprintf>
    for (int i = 0; i < game->numCommunityCards; i++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045fa:	e046      	b.n	800468a <displayCommunityCards+0xa2>
    {
    	char message[100];
        printf("[%s of %s] ", game->communityCards[i].rank, game->communityCards[i].suit);
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	3310      	adds	r3, #16
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	3314      	adds	r3, #20
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	4601      	mov	r1, r0
 8004624:	4821      	ldr	r0, [pc, #132]	@ (80046ac <displayCommunityCards+0xc4>)
 8004626:	f008 fca1 	bl	800cf6c <iprintf>
        sprintf(message, "[%s of %s] ", game->communityCards[i].rank, game->communityCards[i].suit);
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	3310      	adds	r3, #16
 800463a:	681c      	ldr	r4, [r3, #0]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	3314      	adds	r3, #20
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f107 0008 	add.w	r0, r7, #8
 8004652:	4622      	mov	r2, r4
 8004654:	4915      	ldr	r1, [pc, #84]	@ (80046ac <displayCommunityCards+0xc4>)
 8004656:	f007 fd09 	bl	800c06c <siprintf>
        teraPrint(message);
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fcf2 	bl	8004048 <teraPrint>
        disPlayCommunityCard(game->communityCards[i],i + 1);
 8004664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004666:	1c59      	adds	r1, r3, #1
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4403      	add	r3, r0
 8004676:	3310      	adds	r3, #16
 8004678:	9101      	str	r1, [sp, #4]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	9200      	str	r2, [sp, #0]
 800467e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004680:	f7ff f8e4 	bl	800384c <disPlayCommunityCard>
    for (int i = 0; i < game->numCommunityCards; i++)
 8004684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004686:	3301      	adds	r3, #1
 8004688:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800468e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004690:	429a      	cmp	r2, r3
 8004692:	dbb3      	blt.n	80045fc <displayCommunityCards+0x14>
    }
    printf("\n");
 8004694:	200a      	movs	r0, #10
 8004696:	f008 fc7b 	bl	800cf90 <putchar>
    teraPrint("\r\n");
 800469a:	4805      	ldr	r0, [pc, #20]	@ (80046b0 <displayCommunityCards+0xc8>)
 800469c:	f7ff fcd4 	bl	8004048 <teraPrint>
}
 80046a0:	bf00      	nop
 80046a2:	3774      	adds	r7, #116	@ 0x74
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd90      	pop	{r4, r7, pc}
 80046a8:	0800fd14 	.word	0x0800fd14
 80046ac:	0800fd28 	.word	0x0800fd28
 80046b0:	0800fd34 	.word	0x0800fd34

080046b4 <displayGameState>:

void displayGameState(Game *game) {
 80046b4:	b5b0      	push	{r4, r5, r7, lr}
 80046b6:	b0a0      	sub	sp, #128	@ 0x80
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
    const char *stateNames[] = {"PREFLOP", "FLOP", "TURN", "RIVER", "SHOWDOWN"};
 80046bc:	4b30      	ldr	r3, [pc, #192]	@ (8004780 <displayGameState+0xcc>)
 80046be:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 80046c2:	461d      	mov	r5, r3
 80046c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	6023      	str	r3, [r4, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80046cc:	2201      	movs	r2, #1
 80046ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046d2:	482c      	ldr	r0, [pc, #176]	@ (8004784 <displayGameState+0xd0>)
 80046d4:	f002 fe70 	bl	80073b8 <HAL_GPIO_WritePin>
    char message[100];
    printf("=== Game Status ===\n");
 80046d8:	482b      	ldr	r0, [pc, #172]	@ (8004788 <displayGameState+0xd4>)
 80046da:	f008 fcb7 	bl	800d04c <puts>
    teraPrint("=== Game Status ===\r\n");
 80046de:	482b      	ldr	r0, [pc, #172]	@ (800478c <displayGameState+0xd8>)
 80046e0:	f7ff fcb2 	bl	8004048 <teraPrint>
    printf("State: %s\n", stateNames[game->state]);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7a1b      	ldrb	r3, [r3, #8]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	3380      	adds	r3, #128	@ 0x80
 80046ec:	443b      	add	r3, r7
 80046ee:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80046f2:	4619      	mov	r1, r3
 80046f4:	4826      	ldr	r0, [pc, #152]	@ (8004790 <displayGameState+0xdc>)
 80046f6:	f008 fc39 	bl	800cf6c <iprintf>
    sprintf(message, "State: %s\r\n", stateNames[game->state]);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	7a1b      	ldrb	r3, [r3, #8]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	3380      	adds	r3, #128	@ 0x80
 8004702:	443b      	add	r3, r7
 8004704:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8004708:	f107 0308 	add.w	r3, r7, #8
 800470c:	4921      	ldr	r1, [pc, #132]	@ (8004794 <displayGameState+0xe0>)
 800470e:	4618      	mov	r0, r3
 8004710:	f007 fcac 	bl	800c06c <siprintf>
    teraPrint(message);
 8004714:	f107 0308 	add.w	r3, r7, #8
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fc95 	bl	8004048 <teraPrint>
    printf("Pot: %d\n", game->pot);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4619      	mov	r1, r3
 8004724:	481c      	ldr	r0, [pc, #112]	@ (8004798 <displayGameState+0xe4>)
 8004726:	f008 fc21 	bl	800cf6c <iprintf>
    sprintf(message, "Pot: %d\r\n", game->pot);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	491a      	ldr	r1, [pc, #104]	@ (800479c <displayGameState+0xe8>)
 8004734:	4618      	mov	r0, r3
 8004736:	f007 fc99 	bl	800c06c <siprintf>
	teraPrint(message);
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fc82 	bl	8004048 <teraPrint>
    printf("Current bet: %d\n", game->currentBet);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4619      	mov	r1, r3
 800474a:	4815      	ldr	r0, [pc, #84]	@ (80047a0 <displayGameState+0xec>)
 800474c:	f008 fc0e 	bl	800cf6c <iprintf>
    sprintf(message, "Current bet: %d\r\n", game->currentBet);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	f107 0308 	add.w	r3, r7, #8
 8004758:	4912      	ldr	r1, [pc, #72]	@ (80047a4 <displayGameState+0xf0>)
 800475a:	4618      	mov	r0, r3
 800475c:	f007 fc86 	bl	800c06c <siprintf>
    teraPrint(message);
 8004760:	f107 0308 	add.w	r3, r7, #8
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fc6f 	bl	8004048 <teraPrint>
    printf("==================\n\n");
 800476a:	480f      	ldr	r0, [pc, #60]	@ (80047a8 <displayGameState+0xf4>)
 800476c:	f008 fc6e 	bl	800d04c <puts>
    teraPrint("==================\r\n\n");
 8004770:	480e      	ldr	r0, [pc, #56]	@ (80047ac <displayGameState+0xf8>)
 8004772:	f7ff fc69 	bl	8004048 <teraPrint>
}
 8004776:	bf00      	nop
 8004778:	3780      	adds	r7, #128	@ 0x80
 800477a:	46bd      	mov	sp, r7
 800477c:	bdb0      	pop	{r4, r5, r7, pc}
 800477e:	bf00      	nop
 8004780:	0800fe14 	.word	0x0800fe14
 8004784:	40020000 	.word	0x40020000
 8004788:	0800fd38 	.word	0x0800fd38
 800478c:	0800fd4c 	.word	0x0800fd4c
 8004790:	0800fd64 	.word	0x0800fd64
 8004794:	0800fd70 	.word	0x0800fd70
 8004798:	0800fd7c 	.word	0x0800fd7c
 800479c:	0800fd88 	.word	0x0800fd88
 80047a0:	0800fd94 	.word	0x0800fd94
 80047a4:	0800fda8 	.word	0x0800fda8
 80047a8:	0800fdbc 	.word	0x0800fdbc
 80047ac:	0800fdd0 	.word	0x0800fdd0

080047b0 <getPlayerAction>:

Action getPlayerAction(Player *player, Game *game, int currentPlayer)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
    printf("Your hand: [%s of %s] [%s of %s]\n",
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6819      	ldr	r1, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6958      	ldr	r0, [r3, #20]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	4603      	mov	r3, r0
 80047d0:	4816      	ldr	r0, [pc, #88]	@ (800482c <getPlayerAction+0x7c>)
 80047d2:	f008 fbcb 	bl	800cf6c <iprintf>
//    printf("2. Fold\n");
//    printf("3. Raise\n");
//
//    int choice;
//    scanf("%d", &choice);
    int choice = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]

    while (!choice)
 80047da:	e00f      	b.n	80047fc <getPlayerAction+0x4c>
    {
    	if (Check_Touch(currentPlayer + 1)) {
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3301      	adds	r3, #1
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff f933 	bl	8003a4c <Check_Touch>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d007      	beq.n	80047fc <getPlayerAction+0x4c>
			Process_Touch(currentPlayer + 1, &choice, game, player);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	1c58      	adds	r0, r3, #1
 80047f0:	f107 0114 	add.w	r1, r7, #20
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	f7ff f8be 	bl	8003978 <Process_Touch>
    while (!choice)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0ec      	beq.n	80047dc <getPlayerAction+0x2c>
		}
    }

	switch (choice)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d00a      	beq.n	800481e <getPlayerAction+0x6e>
 8004808:	2b03      	cmp	r3, #3
 800480a:	dc0a      	bgt.n	8004822 <getPlayerAction+0x72>
 800480c:	2b01      	cmp	r3, #1
 800480e:	d002      	beq.n	8004816 <getPlayerAction+0x66>
 8004810:	2b02      	cmp	r3, #2
 8004812:	d002      	beq.n	800481a <getPlayerAction+0x6a>
 8004814:	e005      	b.n	8004822 <getPlayerAction+0x72>
	{
	case 1:
		return CHECK;
 8004816:	2300      	movs	r3, #0
 8004818:	e004      	b.n	8004824 <getPlayerAction+0x74>
	case 2:
		return FOLD;
 800481a:	2301      	movs	r3, #1
 800481c:	e002      	b.n	8004824 <getPlayerAction+0x74>
	case 3:
		return RAISE;
 800481e:	2302      	movs	r3, #2
 8004820:	e000      	b.n	8004824 <getPlayerAction+0x74>
	default:
		return CHECK;
 8004822:	2300      	movs	r3, #0
	}
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	0800fe28 	.word	0x0800fe28

08004830 <handlePlayerAction>:

void handlePlayerAction(Player *player, Game *game, Action action, int currentPlayer)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	@ 0x28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	71fb      	strb	r3, [r7, #7]
    switch (action)
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d03e      	beq.n	80048c4 <handlePlayerAction+0x94>
 8004846:	2b02      	cmp	r3, #2
 8004848:	f300 809e 	bgt.w	8004988 <handlePlayerAction+0x158>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <handlePlayerAction+0x26>
 8004850:	2b01      	cmp	r3, #1
 8004852:	d030      	beq.n	80048b6 <handlePlayerAction+0x86>
            game->currentBet = raiseAmount;
            printf("Player raises to %d\n", raiseAmount);
        }
        break;
    }
}
 8004854:	e098      	b.n	8004988 <handlePlayerAction+0x158>
        if (game->currentBet > player->currentBet)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	429a      	cmp	r2, r3
 8004860:	dd25      	ble.n	80048ae <handlePlayerAction+0x7e>
            int callAmount = game->currentBet - player->currentBet;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
            if (callAmount >= player->chips)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004874:	429a      	cmp	r2, r3
 8004876:	db05      	blt.n	8004884 <handlePlayerAction+0x54>
                callAmount = player->chips;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	627b      	str	r3, [r7, #36]	@ 0x24
                player->allIn = 1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	635a      	str	r2, [r3, #52]	@ 0x34
            player->chips -= callAmount;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	1ad2      	subs	r2, r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	629a      	str	r2, [r3, #40]	@ 0x28
            game->pot += callAmount;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	441a      	add	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	601a      	str	r2, [r3, #0]
            player->currentBet = game->currentBet;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	62da      	str	r2, [r3, #44]	@ 0x2c
            printf("Player calls %d\n", callAmount);
 80048a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048a6:	483a      	ldr	r0, [pc, #232]	@ (8004990 <handlePlayerAction+0x160>)
 80048a8:	f008 fb60 	bl	800cf6c <iprintf>
        break;
 80048ac:	e06c      	b.n	8004988 <handlePlayerAction+0x158>
            printf("Player checks\n");
 80048ae:	4839      	ldr	r0, [pc, #228]	@ (8004994 <handlePlayerAction+0x164>)
 80048b0:	f008 fbcc 	bl	800d04c <puts>
        break;
 80048b4:	e068      	b.n	8004988 <handlePlayerAction+0x158>
        player->folded = 1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
        printf("Player folds\n");
 80048bc:	4836      	ldr	r0, [pc, #216]	@ (8004998 <handlePlayerAction+0x168>)
 80048be:	f008 fbc5 	bl	800d04c <puts>
        break;
 80048c2:	e061      	b.n	8004988 <handlePlayerAction+0x158>
        if (!player->allIn)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d15c      	bne.n	8004986 <handlePlayerAction+0x156>
            int minRaise = game->currentBet * 2;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	623b      	str	r3, [r7, #32]
            int raiseAmount = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
            int endBet = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
            displayBet(currentPlayer + 1, raiseAmount);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	3301      	adds	r3, #1
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4611      	mov	r1, r2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff f961 	bl	8003bac <displayBet>
                printf("Current bet: %d\n", game->currentBet);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4619      	mov	r1, r3
 80048f0:	482a      	ldr	r0, [pc, #168]	@ (800499c <handlePlayerAction+0x16c>)
 80048f2:	f008 fb3b 	bl	800cf6c <iprintf>
                printf("Enter raise amount (minimum %d): ", minRaise - game->currentBet);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	6a3a      	ldr	r2, [r7, #32]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	4619      	mov	r1, r3
 8004900:	4827      	ldr	r0, [pc, #156]	@ (80049a0 <handlePlayerAction+0x170>)
 8004902:	f008 fb33 	bl	800cf6c <iprintf>
                if (Check_Touch(currentPlayer + 1)) {
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	3301      	adds	r3, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff f89e 	bl	8003a4c <Check_Touch>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <handlePlayerAction+0xf8>
                	processBet(currentPlayer + 1, &endBet, &raiseAmount);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	f107 0218 	add.w	r2, r7, #24
 800491e:	f107 0114 	add.w	r1, r7, #20
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff f98e 	bl	8003c44 <processBet>
            } while (!endBet);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0dd      	beq.n	80048ea <handlePlayerAction+0xba>
            raiseAmount += game->currentBet; // Total bet including call
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4413      	add	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
            if (raiseAmount >= player->chips)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	429a      	cmp	r2, r3
 8004940:	dc05      	bgt.n	800494e <handlePlayerAction+0x11e>
                raiseAmount = player->chips;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004946:	61bb      	str	r3, [r7, #24]
                player->allIn = 1;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	635a      	str	r2, [r3, #52]	@ 0x34
            int actualRaise = raiseAmount - player->currentBet;
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	61fb      	str	r3, [r7, #28]
            player->chips -= actualRaise;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	629a      	str	r2, [r3, #40]	@ 0x28
            game->pot += actualRaise;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	441a      	add	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	601a      	str	r2, [r3, #0]
            player->currentBet = raiseAmount;
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	62da      	str	r2, [r3, #44]	@ 0x2c
            game->currentBet = raiseAmount;
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	605a      	str	r2, [r3, #4]
            printf("Player raises to %d\n", raiseAmount);
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	4619      	mov	r1, r3
 8004980:	4808      	ldr	r0, [pc, #32]	@ (80049a4 <handlePlayerAction+0x174>)
 8004982:	f008 faf3 	bl	800cf6c <iprintf>
        break;
 8004986:	bf00      	nop
}
 8004988:	bf00      	nop
 800498a:	3728      	adds	r7, #40	@ 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	0800fe4c 	.word	0x0800fe4c
 8004994:	0800fe60 	.word	0x0800fe60
 8004998:	0800fe70 	.word	0x0800fe70
 800499c:	0800fd94 	.word	0x0800fd94
 80049a0:	0800fe80 	.word	0x0800fe80
 80049a4:	0800fea4 	.word	0x0800fea4

080049a8 <bettingRound>:

int bettingRound(Player players[], Game *game, int startPlayer)
{
 80049a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049aa:	b0b7      	sub	sp, #220	@ 0xdc
 80049ac:	af2a      	add	r7, sp, #168	@ 0xa8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
    int currentPlayer = startPlayer;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int playersInHand = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    int lastRaisePlayer = -1;
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
    int playersActed = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	623b      	str	r3, [r7, #32]

    if (!game || !players)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8124 	beq.w	8004c16 <bettingRound+0x26e>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8120 	beq.w	8004c16 <bettingRound+0x26e>
    		return;
    for (int i = 0; i < NUM_PLAYERS; i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	e01b      	b.n	8004a14 <bettingRound+0x6c>
    {
        if (!players[i].folded && !players[i].allIn)
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	461a      	mov	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <bettingRound+0x66>
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	4613      	mov	r3, r2
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	461a      	mov	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <bettingRound+0x66>
        {
            playersInHand++;
 8004a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < NUM_PLAYERS; i++)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	3301      	adds	r3, #1
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	4b83      	ldr	r3, [pc, #524]	@ (8004c24 <bettingRound+0x27c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	dbde      	blt.n	80049dc <bettingRound+0x34>
        }
    }

    if (game->state == PREFLOP)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	7a1b      	ldrb	r3, [r3, #8]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d103      	bne.n	8004a2e <bettingRound+0x86>
    {
        game->currentBet = BIG_BLIND;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2214      	movs	r2, #20
 8004a2a:	605a      	str	r2, [r3, #4]
 8004a2c:	e0d8      	b.n	8004be0 <bettingRound+0x238>
    } else {
        game->currentBet = 0;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2200      	movs	r2, #0
 8004a32:	605a      	str	r2, [r3, #4]
    }

    while (playersInHand > 1)
 8004a34:	e0d4      	b.n	8004be0 <bettingRound+0x238>
    {
        if (players[currentPlayer].folded || players[currentPlayer].allIn)
 8004a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a38:	4613      	mov	r3, r2
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	461a      	mov	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <bettingRound+0xba>
 8004a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a4e:	4613      	mov	r3, r2
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	461a      	mov	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <bettingRound+0xd0>
        {
            currentPlayer = (currentPlayer + 1) % NUM_PLAYERS;
 8004a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a64:	3301      	adds	r3, #1
 8004a66:	4a6f      	ldr	r2, [pc, #444]	@ (8004c24 <bettingRound+0x27c>)
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a6e:	fb01 f202 	mul.w	r2, r1, r2
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
            continue;
 8004a76:	e0b3      	b.n	8004be0 <bettingRound+0x238>
        }

        system("cls");
 8004a78:	486b      	ldr	r0, [pc, #428]	@ (8004c28 <bettingRound+0x280>)
 8004a7a:	f008 fb58 	bl	800d12e <system>

        printf("Current bet: %d\n", game->currentBet);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4619      	mov	r1, r3
 8004a84:	4869      	ldr	r0, [pc, #420]	@ (8004c2c <bettingRound+0x284>)
 8004a86:	f008 fa71 	bl	800cf6c <iprintf>
        printf("Pot: %d\n", game->pot);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4867      	ldr	r0, [pc, #412]	@ (8004c30 <bettingRound+0x288>)
 8004a92:	f008 fa6b 	bl	800cf6c <iprintf>

        displayGameState(game);
 8004a96:	68b8      	ldr	r0, [r7, #8]
 8004a98:	f7ff fe0c 	bl	80046b4 <displayGameState>
        displayCommunityCards(game);
 8004a9c:	68b8      	ldr	r0, [r7, #8]
 8004a9e:	f7ff fda3 	bl	80045e8 <displayCommunityCards>
        displayPlayerStatus(players, currentPlayer);
 8004aa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff fd19 	bl	80044dc <displayPlayerStatus>

        printf("\nPlayer %d's turn\n", currentPlayer + 1);
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	3301      	adds	r3, #1
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4860      	ldr	r0, [pc, #384]	@ (8004c34 <bettingRound+0x28c>)
 8004ab2:	f008 fa5b 	bl	800cf6c <iprintf>
        Action action;
        if (!players[currentPlayer].is_bot){
 8004ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ab8:	4613      	mov	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d12d      	bne.n	8004b28 <bettingRound+0x180>
        	show_suggest(players[currentPlayer], *game);
 8004acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ace:	4613      	mov	r3, r2
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	189e      	adds	r6, r3, r2
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	2278      	movs	r2, #120	@ 0x78
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f008 fb14 	bl	800d112 <memcpy>
 8004aea:	466d      	mov	r5, sp
 8004aec:	f106 0410 	add.w	r4, r6, #16
 8004af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004afc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004b00:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b04:	f000 fc44 	bl	8005390 <show_suggest>
        	action = getPlayerAction(&players[currentPlayer], game, currentPlayer);
 8004b08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	461a      	mov	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fe47 	bl	80047b0 <getPlayerAction>
 8004b22:	4603      	mov	r3, r0
 8004b24:	76fb      	strb	r3, [r7, #27]
 8004b26:	e01f      	b.n	8004b68 <bettingRound+0x1c0>
        }
        else {
        	action = show_suggest(players[currentPlayer], *game);
 8004b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	461a      	mov	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	189e      	adds	r6, r3, r2
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	2278      	movs	r2, #120	@ 0x78
 8004b40:	4618      	mov	r0, r3
 8004b42:	f008 fae6 	bl	800d112 <memcpy>
 8004b46:	466d      	mov	r5, sp
 8004b48:	f106 0410 	add.w	r4, r6, #16
 8004b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004b58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004b5c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b60:	f000 fc16 	bl	8005390 <show_suggest>
 8004b64:	4603      	mov	r3, r0
 8004b66:	76fb      	strb	r3, [r7, #27]
        }
        handlePlayerAction(&players[currentPlayer], game, action, currentPlayer);
 8004b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	461a      	mov	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1898      	adds	r0, r3, r2
 8004b78:	7efa      	ldrb	r2, [r7, #27]
 8004b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	f7ff fe57 	bl	8004830 <handlePlayerAction>

        if (action == RAISE)
 8004b82:	7efb      	ldrb	r3, [r7, #27]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d104      	bne.n	8004b92 <bettingRound+0x1ea>
        {
            lastRaisePlayer = currentPlayer;
 8004b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
            playersActed = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	623b      	str	r3, [r7, #32]
 8004b90:	e005      	b.n	8004b9e <bettingRound+0x1f6>
        }
        else if (action == FOLD)
 8004b92:	7efb      	ldrb	r3, [r7, #27]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d102      	bne.n	8004b9e <bettingRound+0x1f6>
        {
            playersInHand--;
 8004b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        playersActed++;
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	623b      	str	r3, [r7, #32]

        if ((lastRaisePlayer == -1 && playersActed >= playersInHand) ||
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004baa:	d103      	bne.n	8004bb4 <bettingRound+0x20c>
 8004bac:	6a3a      	ldr	r2, [r7, #32]
 8004bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	da19      	bge.n	8004be8 <bettingRound+0x240>
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bba:	d007      	beq.n	8004bcc <bettingRound+0x224>
            (lastRaisePlayer != -1 && currentPlayer == lastRaisePlayer && playersActed >= playersInHand))
 8004bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d103      	bne.n	8004bcc <bettingRound+0x224>
 8004bc4:	6a3a      	ldr	r2, [r7, #32]
 8004bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	da0d      	bge.n	8004be8 <bettingRound+0x240>
        {
            break;
        }

        currentPlayer = (currentPlayer + 1) % NUM_PLAYERS;
 8004bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bce:	3301      	adds	r3, #1
 8004bd0:	4a14      	ldr	r2, [pc, #80]	@ (8004c24 <bettingRound+0x27c>)
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	fb93 f1f2 	sdiv	r1, r3, r2
 8004bd8:	fb01 f202 	mul.w	r2, r1, r2
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (playersInHand > 1)
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	f73f af27 	bgt.w	8004a36 <bettingRound+0x8e>
    }

    for (int i = 0; i < NUM_PLAYERS; i++)
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	e00c      	b.n	8004c08 <bettingRound+0x260>
    {
        players[i].currentBet = 0;
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (int i = 0; i < NUM_PLAYERS; i++)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	3301      	adds	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <bettingRound+0x27c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	dbed      	blt.n	8004bee <bettingRound+0x246>
    }

    return playersInHand;
 8004c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c14:	e001      	b.n	8004c1a <bettingRound+0x272>
    		return;
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3734      	adds	r7, #52	@ 0x34
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000058 	.word	0x20000058
 8004c28:	0800febc 	.word	0x0800febc
 8004c2c:	0800fd94 	.word	0x0800fd94
 8004c30:	0800fd7c 	.word	0x0800fd7c
 8004c34:	0800fec0 	.word	0x0800fec0

08004c38 <getFullHand>:

void getFullHand(Card fullHand[], Player player, Card communityCards[])
{
 8004c38:	b084      	sub	sp, #16
 8004c3a:	b4b0      	push	{r4, r5, r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    fullHand[0] = player.hand[0];
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	461d      	mov	r5, r3
 8004c4e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8004c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	602b      	str	r3, [r5, #0]
    fullHand[1] = player.hand[1];
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	461d      	mov	r5, r3
 8004c60:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8004c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	602b      	str	r3, [r5, #0]
    for (int i = 0; i < 5; i++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e018      	b.n	8004ca4 <getFullHand+0x6c>
    {
        fullHand[i + 2] = communityCards[i];
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c80:	1899      	adds	r1, r3, r2
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	3328      	adds	r3, #40	@ 0x28
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4413      	add	r3, r2
 8004c92:	461c      	mov	r4, r3
 8004c94:	460d      	mov	r5, r1
 8004c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 5; i++)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	dde3      	ble.n	8004c72 <getFullHand+0x3a>
    }
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bcb0      	pop	{r4, r5, r7}
 8004cb4:	b004      	add	sp, #16
 8004cb6:	4770      	bx	lr

08004cb8 <compareCards>:

int compareCards(const void *a, const void *b)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
    return ((Card *)b)->rankValue - ((Card *)a)->rankValue;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	1ad3      	subs	r3, r2, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <evaluateHand>:

int evaluateHand(Player player, Card communityCards[])
{
 8004cd8:	b084      	sub	sp, #16
 8004cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cdc:	b0cf      	sub	sp, #316	@ 0x13c
 8004cde:	af0e      	add	r7, sp, #56	@ 0x38
 8004ce0:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8004ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Card fullHand[NUM_CARDS_IN_HAND];
    getFullHand(fullHand, player, communityCards);
 8004ce8:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 8004cec:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004cf0:	930c      	str	r3, [sp, #48]	@ 0x30
 8004cf2:	466d      	mov	r5, sp
 8004cf4:	f507 7492 	add.w	r4, r7, #292	@ 0x124
 8004cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d04:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004d08:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f7ff ff92 	bl	8004c38 <getFullHand>
    qsort(fullHand, NUM_CARDS_IN_HAND, sizeof(Card), compareCards);
 8004d14:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8004d18:	4ba7      	ldr	r3, [pc, #668]	@ (8004fb8 <evaluateHand+0x2e0>)
 8004d1a:	2214      	movs	r2, #20
 8004d1c:	2107      	movs	r1, #7
 8004d1e:	f006 f929 	bl	800af74 <qsort>

    // Count occurrences of ranks and suits
    int rankCount[NUM_RANKS] = {0};
 8004d22:	f107 0314 	add.w	r3, r7, #20
 8004d26:	2234      	movs	r2, #52	@ 0x34
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f008 f9a8 	bl	800d080 <memset>
    int suitCount[NUM_SUITS] = {0};
 8004d30:	1d3b      	adds	r3, r7, #4
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	605a      	str	r2, [r3, #4]
 8004d38:	609a      	str	r2, [r3, #8]
 8004d3a:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < NUM_CARDS_IN_HAND; i++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004d42:	e053      	b.n	8004dec <evaluateHand+0x114>
    {
        rankCount[fullHand[i].rankValue - 2]++;
 8004d44:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004d54:	443b      	add	r3, r7
 8004d56:	3bb0      	subs	r3, #176	@ 0xb0
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	1e9a      	subs	r2, r3, #2
 8004d5c:	0093      	lsls	r3, r2, #2
 8004d5e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004d62:	443b      	add	r3, r7
 8004d64:	f853 3cec 	ldr.w	r3, [r3, #-236]
 8004d68:	1c59      	adds	r1, r3, #1
 8004d6a:	0093      	lsls	r3, r2, #2
 8004d6c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004d70:	443b      	add	r3, r7
 8004d72:	f843 1cec 	str.w	r1, [r3, #-236]
        for (int j = 0; j < NUM_SUITS; j++)
 8004d76:	2300      	movs	r3, #0
 8004d78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d7c:	e02d      	b.n	8004dda <evaluateHand+0x102>
        {
            if (strcmp(fullHand[i].suit, suits[j]) == 0)
 8004d7e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004d8e:	443b      	add	r3, r7
 8004d90:	3bb4      	subs	r3, #180	@ 0xb4
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4989      	ldr	r1, [pc, #548]	@ (8004fbc <evaluateHand+0x2e4>)
 8004d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f7fb faa5 	bl	80002f0 <strcmp>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d111      	bne.n	8004dd0 <evaluateHand+0xf8>
            {
                suitCount[j]++;
 8004dac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004db6:	443b      	add	r3, r7
 8004db8:	f853 3cfc 	ldr.w	r3, [r3, #-252]
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004dc8:	443b      	add	r3, r7
 8004dca:	f843 2cfc 	str.w	r2, [r3, #-252]
                break;
 8004dce:	e008      	b.n	8004de2 <evaluateHand+0x10a>
        for (int j = 0; j < NUM_SUITS; j++)
 8004dd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	ddcd      	ble.n	8004d7e <evaluateHand+0xa6>
    for (int i = 0; i < NUM_CARDS_IN_HAND; i++)
 8004de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de6:	3301      	adds	r3, #1
 8004de8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df0:	2b06      	cmp	r3, #6
 8004df2:	dda7      	ble.n	8004d44 <evaluateHand+0x6c>
            }
        }
    }

    // Check for flush
    int flush = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (int i = 0; i < NUM_SUITS; i++)
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004e00:	e012      	b.n	8004e28 <evaluateHand+0x150>
    {
        if (suitCount[i] >= 5)
 8004e02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004e0c:	443b      	add	r3, r7
 8004e0e:	f853 3cfc 	ldr.w	r3, [r3, #-252]
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	dd03      	ble.n	8004e1e <evaluateHand+0x146>
        {
            flush = 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
            break;
 8004e1c:	e008      	b.n	8004e30 <evaluateHand+0x158>
    for (int i = 0; i < NUM_SUITS; i++)
 8004e1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004e22:	3301      	adds	r3, #1
 8004e24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004e28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	dde8      	ble.n	8004e02 <evaluateHand+0x12a>
        }
    }

    // Check for straight
    int straight = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int consecutive = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    for (int i = NUM_RANKS - 1; i >= 0; i--)
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e42:	e01e      	b.n	8004e82 <evaluateHand+0x1aa>
    {
        if (rankCount[i] > 0)
 8004e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004e4e:	443b      	add	r3, r7
 8004e50:	f853 3cec 	ldr.w	r3, [r3, #-236]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	dd0c      	ble.n	8004e72 <evaluateHand+0x19a>
        {
            consecutive++;
 8004e58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            if (consecutive >= 5)
 8004e62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	dd06      	ble.n	8004e78 <evaluateHand+0x1a0>
            {
                straight = 1;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                break;
 8004e70:	e00b      	b.n	8004e8a <evaluateHand+0x1b2>
            }
        }
        else
        {
            consecutive = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    for (int i = NUM_RANKS - 1; i >= 0; i--)
 8004e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	dadc      	bge.n	8004e44 <evaluateHand+0x16c>
        }
    }

    // Special case for Ace-low straight (A, 2, 3, 4, 5)
    if (rankCount[12] > 0 && rankCount[0] > 0 && rankCount[1] > 0 &&
 8004e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	dd0e      	ble.n	8004eae <evaluateHand+0x1d6>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	dd0b      	ble.n	8004eae <evaluateHand+0x1d6>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	dd08      	ble.n	8004eae <evaluateHand+0x1d6>
        rankCount[2] > 0 && rankCount[3] > 0)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
    if (rankCount[12] > 0 && rankCount[0] > 0 && rankCount[1] > 0 &&
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	dd05      	ble.n	8004eae <evaluateHand+0x1d6>
        rankCount[2] > 0 && rankCount[3] > 0)
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	dd02      	ble.n	8004eae <evaluateHand+0x1d6>
    {
        straight = 1;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    }

    // Count pairs, three of a kind, four of a kind
    int pairs = 0, threeOfKind = 0, fourOfKind = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (int i = 0; i < NUM_RANKS; i++)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ec6:	e031      	b.n	8004f2c <evaluateHand+0x254>
    {
        if (rankCount[i] == 2)
 8004ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ed2:	443b      	add	r3, r7
 8004ed4:	f853 3cec 	ldr.w	r3, [r3, #-236]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d104      	bne.n	8004ee6 <evaluateHand+0x20e>
            pairs++;
 8004edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        if (rankCount[i] == 3)
 8004ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ef0:	443b      	add	r3, r7
 8004ef2:	f853 3cec 	ldr.w	r3, [r3, #-236]
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d104      	bne.n	8004f04 <evaluateHand+0x22c>
            threeOfKind++;
 8004efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004efe:	3301      	adds	r3, #1
 8004f00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        if (rankCount[i] == 4)
 8004f04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004f0e:	443b      	add	r3, r7
 8004f10:	f853 3cec 	ldr.w	r3, [r3, #-236]
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d104      	bne.n	8004f22 <evaluateHand+0x24a>
            fourOfKind++;
 8004f18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (int i = 0; i < NUM_RANKS; i++)
 8004f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f26:	3301      	adds	r3, #1
 8004f28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f30:	2b0c      	cmp	r3, #12
 8004f32:	ddc9      	ble.n	8004ec8 <evaluateHand+0x1f0>
    }

    // Determine hand rank
    if (straight && flush)
 8004f34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <evaluateHand+0x270>
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <evaluateHand+0x270>
        return 9; // Straight Flush
 8004f44:	2309      	movs	r3, #9
 8004f46:	e02e      	b.n	8004fa6 <evaluateHand+0x2ce>
    if (fourOfKind)
 8004f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <evaluateHand+0x27c>
        return 8; // Four of a Kind
 8004f50:	2308      	movs	r3, #8
 8004f52:	e028      	b.n	8004fa6 <evaluateHand+0x2ce>
    if (threeOfKind && pairs)
 8004f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <evaluateHand+0x290>
 8004f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <evaluateHand+0x290>
        return 7; // Full House
 8004f64:	2307      	movs	r3, #7
 8004f66:	e01e      	b.n	8004fa6 <evaluateHand+0x2ce>
    if (flush)
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <evaluateHand+0x29c>
        return 6; // Flush
 8004f70:	2306      	movs	r3, #6
 8004f72:	e018      	b.n	8004fa6 <evaluateHand+0x2ce>
    if (straight)
 8004f74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <evaluateHand+0x2a8>
        return 5; // Straight
 8004f7c:	2305      	movs	r3, #5
 8004f7e:	e012      	b.n	8004fa6 <evaluateHand+0x2ce>
    if (threeOfKind)
 8004f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <evaluateHand+0x2b4>
        return 4; // Three of a Kind
 8004f88:	2304      	movs	r3, #4
 8004f8a:	e00c      	b.n	8004fa6 <evaluateHand+0x2ce>
    if (pairs == 2)
 8004f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d101      	bne.n	8004f98 <evaluateHand+0x2c0>
        return 3; // Two Pair
 8004f94:	2303      	movs	r3, #3
 8004f96:	e006      	b.n	8004fa6 <evaluateHand+0x2ce>
    if (pairs == 1)
 8004f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <evaluateHand+0x2cc>
        return 2; // One Pair
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e000      	b.n	8004fa6 <evaluateHand+0x2ce>
    return 1;     // High Card
 8004fa4:	2301      	movs	r3, #1
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8004fac:	46bd      	mov	sp, r7
 8004fae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004fb2:	b004      	add	sp, #16
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	08004cb9 	.word	0x08004cb9
 8004fbc:	20000014 	.word	0x20000014

08004fc0 <findWinner>:
    }
    return highest;
}

void findWinner(Player players[], Card communityCards[])
{
 8004fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc2:	b0f5      	sub	sp, #468	@ 0x1d4
 8004fc4:	af0e      	add	r7, sp, #56	@ 0x38
 8004fc6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8004fca:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004fce:	6018      	str	r0, [r3, #0]
 8004fd0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8004fd4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004fd8:	6019      	str	r1, [r3, #0]
    int bestPlayer = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    Card bestFullHand[NUM_CARDS_IN_HAND];
    getFullHand(bestFullHand, players[0], communityCards);
 8004fe0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8004fe4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004fe8:	681e      	ldr	r6, [r3, #0]
 8004fea:	f107 0cf8 	add.w	ip, r7, #248	@ 0xf8
 8004fee:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8004ff2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	930c      	str	r3, [sp, #48]	@ 0x30
 8004ffa:	466d      	mov	r5, sp
 8004ffc:	f106 040c 	add.w	r4, r6, #12
 8005000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005008:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800500c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005010:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8005014:	4660      	mov	r0, ip
 8005016:	f7ff fe0f 	bl	8004c38 <getFullHand>
    int bestHandRank = evaluateHand(players[0], communityCards);
 800501a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800501e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005022:	681e      	ldr	r6, [r3, #0]
 8005024:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8005028:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005030:	466d      	mov	r5, sp
 8005032:	f106 0410 	add.w	r4, r6, #16
 8005036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800503a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800503c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800503e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005042:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005046:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800504a:	f7ff fe45 	bl	8004cd8 <evaluateHand>
 800504e:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190

    char message[100];
    printf("Player 1's hand rank: %d\n", bestHandRank);
 8005052:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 8005056:	48c5      	ldr	r0, [pc, #788]	@ (800536c <findWinner+0x3ac>)
 8005058:	f007 ff88 	bl	800cf6c <iprintf>
    sprintf(message, "Player 1's hand rank: %d\r\n", bestHandRank);
 800505c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005060:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8005064:	49c2      	ldr	r1, [pc, #776]	@ (8005370 <findWinner+0x3b0>)
 8005066:	4618      	mov	r0, r3
 8005068:	f007 f800 	bl	800c06c <siprintf>
    teraPrint(message);
 800506c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe ffe9 	bl	8004048 <teraPrint>
    displayPokerHand(players[0], 1, handNames[bestHandRank - 1]);
 8005076:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800507a:	3b01      	subs	r3, #1
 800507c:	4abd      	ldr	r2, [pc, #756]	@ (8005374 <findWinner+0x3b4>)
 800507e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005082:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8005086:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 800508a:	6816      	ldr	r6, [r2, #0]
 800508c:	930c      	str	r3, [sp, #48]	@ 0x30
 800508e:	2301      	movs	r3, #1
 8005090:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005092:	466d      	mov	r5, sp
 8005094:	f106 0410 	add.w	r4, r6, #16
 8005098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800509a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800509c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800509e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80050a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80050a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80050ac:	f7fe fb28 	bl	8003700 <displayPokerHand>

    for (int i = 1; i < NUM_PLAYERS; i++)
 80050b0:	2301      	movs	r3, #1
 80050b2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80050b6:	e10d      	b.n	80052d4 <findWinner+0x314>
    {
        Card currentFullHand[NUM_CARDS_IN_HAND];
        getFullHand(currentFullHand, players[i], communityCards);
 80050b8:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80050bc:	4613      	mov	r3, r2
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	461a      	mov	r2, r3
 80050c6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80050ca:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	189e      	adds	r6, r3, r2
 80050d2:	f107 0c08 	add.w	ip, r7, #8
 80050d6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80050da:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80050e2:	466d      	mov	r5, sp
 80050e4:	f106 040c 	add.w	r4, r6, #12
 80050e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80050f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80050f8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80050fc:	4660      	mov	r0, ip
 80050fe:	f7ff fd9b 	bl	8004c38 <getFullHand>
        int handRank = evaluateHand(players[i], communityCards);
 8005102:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8005106:	4613      	mov	r3, r2
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	461a      	mov	r2, r3
 8005110:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8005114:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	189e      	adds	r6, r3, r2
 800511c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8005120:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005128:	466d      	mov	r5, sp
 800512a:	f106 0410 	add.w	r4, r6, #16
 800512e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005136:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800513a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800513e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005142:	f7ff fdc9 	bl	8004cd8 <evaluateHand>
 8005146:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
        printf("Player %d's hand rank: %d\n", i + 1, handRank);
 800514a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800514e:	3301      	adds	r3, #1
 8005150:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005154:	4619      	mov	r1, r3
 8005156:	4888      	ldr	r0, [pc, #544]	@ (8005378 <findWinner+0x3b8>)
 8005158:	f007 ff08 	bl	800cf6c <iprintf>
        sprintf(message, "Player %d's hand rank: %d\r\n", i + 1, handRank);
 800515c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8005166:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800516a:	4984      	ldr	r1, [pc, #528]	@ (800537c <findWinner+0x3bc>)
 800516c:	f006 ff7e 	bl	800c06c <siprintf>
		teraPrint(message);
 8005170:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe ff67 	bl	8004048 <teraPrint>
        displayPokerHand(players[i], i + 1, handNames[handRank - 1]);
 800517a:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 800517e:	4613      	mov	r3, r2
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	1a9b      	subs	r3, r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	461a      	mov	r2, r3
 8005188:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800518c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	189e      	adds	r6, r3, r2
 8005194:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005198:	3301      	adds	r3, #1
 800519a:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800519e:	3a01      	subs	r2, #1
 80051a0:	4974      	ldr	r1, [pc, #464]	@ (8005374 <findWinner+0x3b4>)
 80051a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80051a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80051a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051aa:	466d      	mov	r5, sp
 80051ac:	f106 0410 	add.w	r4, r6, #16
 80051b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80051bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80051c0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80051c4:	f7fe fa9c 	bl	8003700 <displayPokerHand>

        if (handRank > bestHandRank)
 80051c8:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 80051cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80051d0:	429a      	cmp	r2, r3
 80051d2:	dd13      	ble.n	80051fc <findWinner+0x23c>
        {
            bestHandRank = handRank;
 80051d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80051d8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
            bestPlayer = i;
 80051dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80051e0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
            memcpy(bestFullHand, currentFullHand, sizeof(Card) * NUM_CARDS_IN_HAND);
 80051e4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80051e8:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 80051ec:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80051f0:	4611      	mov	r1, r2
 80051f2:	228c      	movs	r2, #140	@ 0x8c
 80051f4:	4618      	mov	r0, r3
 80051f6:	f007 ff8c 	bl	800d112 <memcpy>
 80051fa:	e066      	b.n	80052ca <findWinner+0x30a>
        }
        else if (handRank == bestHandRank)
 80051fc:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005200:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005204:	429a      	cmp	r2, r3
 8005206:	d160      	bne.n	80052ca <findWinner+0x30a>
        {
            qsort(bestFullHand, NUM_CARDS_IN_HAND, sizeof(Card), compareCards);
 8005208:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 800520c:	4b5c      	ldr	r3, [pc, #368]	@ (8005380 <findWinner+0x3c0>)
 800520e:	2214      	movs	r2, #20
 8005210:	2107      	movs	r1, #7
 8005212:	f005 feaf 	bl	800af74 <qsort>
            qsort(currentFullHand, NUM_CARDS_IN_HAND, sizeof(Card), compareCards);
 8005216:	f107 0008 	add.w	r0, r7, #8
 800521a:	4b59      	ldr	r3, [pc, #356]	@ (8005380 <findWinner+0x3c0>)
 800521c:	2214      	movs	r2, #20
 800521e:	2107      	movs	r1, #7
 8005220:	f005 fea8 	bl	800af74 <qsort>

            for (int j = 0; j < NUM_CARDS_IN_HAND; j++)
 8005224:	2300      	movs	r3, #0
 8005226:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800522a:	e048      	b.n	80052be <findWinner+0x2fe>
            {
                if (currentFullHand[j].rankValue > bestFullHand[j].rankValue)
 800522c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8005230:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
 8005234:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	3308      	adds	r3, #8
 8005244:	6819      	ldr	r1, [r3, #0]
 8005246:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8005256:	443b      	add	r3, r7
 8005258:	3b98      	subs	r3, #152	@ 0x98
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4299      	cmp	r1, r3
 800525e:	dd0f      	ble.n	8005280 <findWinner+0x2c0>
                {
                    bestPlayer = i;
 8005260:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005264:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                    memcpy(bestFullHand, currentFullHand, sizeof(Card) * NUM_CARDS_IN_HAND);
 8005268:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800526c:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8005270:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8005274:	4611      	mov	r1, r2
 8005276:	228c      	movs	r2, #140	@ 0x8c
 8005278:	4618      	mov	r0, r3
 800527a:	f007 ff4a 	bl	800d112 <memcpy>
                    break;
 800527e:	e024      	b.n	80052ca <findWinner+0x30a>
                }
                else if (currentFullHand[j].rankValue < bestFullHand[j].rankValue)
 8005280:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8005284:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
 8005288:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	3308      	adds	r3, #8
 8005298:	6819      	ldr	r1, [r3, #0]
 800529a:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80052aa:	443b      	add	r3, r7
 80052ac:	3b98      	subs	r3, #152	@ 0x98
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4299      	cmp	r1, r3
 80052b2:	db09      	blt.n	80052c8 <findWinner+0x308>
            for (int j = 0; j < NUM_CARDS_IN_HAND; j++)
 80052b4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80052b8:	3301      	adds	r3, #1
 80052ba:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80052be:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80052c2:	2b06      	cmp	r3, #6
 80052c4:	ddb2      	ble.n	800522c <findWinner+0x26c>
 80052c6:	e000      	b.n	80052ca <findWinner+0x30a>
                {
                    break;
 80052c8:	bf00      	nop
    for (int i = 1; i < NUM_PLAYERS; i++)
 80052ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80052ce:	3301      	adds	r3, #1
 80052d0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80052d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005384 <findWinner+0x3c4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80052dc:	429a      	cmp	r2, r3
 80052de:	f6ff aeeb 	blt.w	80050b8 <findWinner+0xf8>
                }
            }
        }
    }

    printf("Player %d wins with hand rank: %d!\n", bestPlayer + 1, bestHandRank);
 80052e2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80052e6:	3301      	adds	r3, #1
 80052e8:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80052ec:	4619      	mov	r1, r3
 80052ee:	4826      	ldr	r0, [pc, #152]	@ (8005388 <findWinner+0x3c8>)
 80052f0:	f007 fe3c 	bl	800cf6c <iprintf>
    sprintf(message, "Winner is Player %d hand rank: %d\r\n", bestPlayer + 1, bestHandRank);
 80052f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80052fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005302:	4922      	ldr	r1, [pc, #136]	@ (800538c <findWinner+0x3cc>)
 8005304:	f006 feb2 	bl	800c06c <siprintf>
    teraPrint(message);
 8005308:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800530c:	4618      	mov	r0, r3
 800530e:	f7fe fe9b 	bl	8004048 <teraPrint>
    displayWinnerPlayer(players[bestPlayer], bestPlayer + 1, handNames[bestHandRank - 1]);
 8005312:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005316:	4613      	mov	r3, r2
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	461a      	mov	r2, r3
 8005320:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8005324:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	189e      	adds	r6, r3, r2
 800532c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8005330:	3301      	adds	r3, #1
 8005332:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8005336:	3a01      	subs	r2, #1
 8005338:	490e      	ldr	r1, [pc, #56]	@ (8005374 <findWinner+0x3b4>)
 800533a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800533e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005342:	466d      	mov	r5, sp
 8005344:	f106 0410 	add.w	r4, r6, #16
 8005348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800534a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800534c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800534e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005350:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005354:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005358:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800535c:	f7fe fa1e 	bl	800379c <displayWinnerPlayer>
}
 8005360:	bf00      	nop
 8005362:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 8005366:	46bd      	mov	sp, r7
 8005368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800536a:	bf00      	nop
 800536c:	0800fed4 	.word	0x0800fed4
 8005370:	0800fef0 	.word	0x0800fef0
 8005374:	2000005c 	.word	0x2000005c
 8005378:	0800ff0c 	.word	0x0800ff0c
 800537c:	0800ff28 	.word	0x0800ff28
 8005380:	08004cb9 	.word	0x08004cb9
 8005384:	20000058 	.word	0x20000058
 8005388:	0800ff44 	.word	0x0800ff44
 800538c:	0800ff68 	.word	0x0800ff68

08005390 <show_suggest>:

Action show_suggest(Player player, Game game){
 8005390:	b084      	sub	sp, #16
 8005392:	b5b0      	push	{r4, r5, r7, lr}
 8005394:	b08c      	sub	sp, #48	@ 0x30
 8005396:	af0c      	add	r7, sp, #48	@ 0x30
 8005398:	f107 0410 	add.w	r4, r7, #16
 800539c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (evaluateHand(player, game.communityCards) > HIGH_CARD){
 80053a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80053a4:	3310      	adds	r3, #16
 80053a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053a8:	466d      	mov	r5, sp
 80053aa:	f107 0420 	add.w	r4, r7, #32
 80053ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80053ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80053be:	f107 0310 	add.w	r3, r7, #16
 80053c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053c4:	f7ff fc88 	bl	8004cd8 <evaluateHand>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	dd04      	ble.n	80053d8 <show_suggest+0x48>
    // if can find pair -> raise
	teraPrint("[suggest] player should raise\n");
 80053ce:	4817      	ldr	r0, [pc, #92]	@ (800542c <show_suggest+0x9c>)
 80053d0:	f7fe fe3a 	bl	8004048 <teraPrint>
    return (RAISE);
 80053d4:	2302      	movs	r3, #2
 80053d6:	e023      	b.n	8005420 <show_suggest+0x90>
  }

  else if (evaluateHand(player, game.communityCards) <= HIGH_CARD && player.chips > player.currentBet){
 80053d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80053dc:	3310      	adds	r3, #16
 80053de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053e0:	466d      	mov	r5, sp
 80053e2:	f107 0420 	add.w	r4, r7, #32
 80053e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80053f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80053f6:	f107 0310 	add.w	r3, r7, #16
 80053fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053fc:	f7ff fc6c 	bl	8004cd8 <evaluateHand>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	dc08      	bgt.n	8005418 <show_suggest+0x88>
 8005406:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540a:	429a      	cmp	r2, r3
 800540c:	dd04      	ble.n	8005418 <show_suggest+0x88>
    // if have only one card and get pare -> check
	  teraPrint("[suggest] player should check\n");
 800540e:	4808      	ldr	r0, [pc, #32]	@ (8005430 <show_suggest+0xa0>)
 8005410:	f7fe fe1a 	bl	8004048 <teraPrint>
    return (CHECK);
 8005414:	2300      	movs	r3, #0
 8005416:	e003      	b.n	8005420 <show_suggest+0x90>
  }
  else {
	  teraPrint("[suggest] player should fold\n");
 8005418:	4806      	ldr	r0, [pc, #24]	@ (8005434 <show_suggest+0xa4>)
 800541a:	f7fe fe15 	bl	8004048 <teraPrint>
    return (FOLD);
 800541e:	2301      	movs	r3, #1
  }
}
 8005420:	4618      	mov	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005428:	b004      	add	sp, #16
 800542a:	4770      	bx	lr
 800542c:	0800ff8c 	.word	0x0800ff8c
 8005430:	0800ffac 	.word	0x0800ffac
 8005434:	0800ffcc 	.word	0x0800ffcc

08005438 <playPokerGame>:

void playPokerGame(uint8_t n_players, uint8_t n_bots)
{
 8005438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543c:	f2ad 6d6c 	subw	sp, sp, #1644	@ 0x66c
 8005440:	af0e      	add	r7, sp, #56	@ 0x38
 8005442:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005446:	f2a3 6201 	subw	r2, r3, #1537	@ 0x601
 800544a:	4603      	mov	r3, r0
 800544c:	7013      	strb	r3, [r2, #0]
 800544e:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005452:	f2a3 6202 	subw	r2, r3, #1538	@ 0x602
 8005456:	460b      	mov	r3, r1
 8005458:	7013      	strb	r3, [r2, #0]
 800545a:	466b      	mov	r3, sp
 800545c:	62bb      	str	r3, [r7, #40]	@ 0x28
    Card deck[52];
    NUM_PLAYERS = n_players + n_bots;
 800545e:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005462:	f2a3 6301 	subw	r3, r3, #1537	@ 0x601
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 800546e:	f2a3 6302 	subw	r3, r3, #1538	@ 0x602
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	441a      	add	r2, r3
 8005476:	4bde      	ldr	r3, [pc, #888]	@ (80057f0 <playPokerGame+0x3b8>)
 8005478:	601a      	str	r2, [r3, #0]
    Player players[NUM_PLAYERS];
 800547a:	4bdd      	ldr	r3, [pc, #884]	@ (80057f0 <playPokerGame+0x3b8>)
 800547c:	681e      	ldr	r6, [r3, #0]
 800547e:	1e73      	subs	r3, r6, #1
 8005480:	f8c7 3610 	str.w	r3, [r7, #1552]	@ 0x610
 8005484:	4632      	mov	r2, r6
 8005486:	2300      	movs	r3, #0
 8005488:	623a      	str	r2, [r7, #32]
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
 800548c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005490:	f04f 0000 	mov.w	r0, #0
 8005494:	f04f 0100 	mov.w	r1, #0
 8005498:	0119      	lsls	r1, r3, #4
 800549a:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800549e:	0110      	lsls	r0, r2, #4
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	6a39      	ldr	r1, [r7, #32]
 80054a6:	1a54      	subs	r4, r2, r1
 80054a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054aa:	eb63 0501 	sbc.w	r5, r3, r1
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	016b      	lsls	r3, r5, #5
 80054b8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80054bc:	0162      	lsls	r2, r4, #5
 80054be:	4632      	mov	r2, r6
 80054c0:	2300      	movs	r3, #0
 80054c2:	61ba      	str	r2, [r7, #24]
 80054c4:	61fb      	str	r3, [r7, #28]
 80054c6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80054ca:	4622      	mov	r2, r4
 80054cc:	462b      	mov	r3, r5
 80054ce:	f04f 0000 	mov.w	r0, #0
 80054d2:	f04f 0100 	mov.w	r1, #0
 80054d6:	0119      	lsls	r1, r3, #4
 80054d8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80054dc:	0110      	lsls	r0, r2, #4
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4621      	mov	r1, r4
 80054e4:	ebb2 0801 	subs.w	r8, r2, r1
 80054e8:	4629      	mov	r1, r5
 80054ea:	eb63 0901 	sbc.w	r9, r3, r1
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80054fa:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80054fe:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8005502:	4632      	mov	r2, r6
 8005504:	4613      	mov	r3, r2
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	3307      	adds	r3, #7
 800550e:	08db      	lsrs	r3, r3, #3
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	ebad 0d03 	sub.w	sp, sp, r3
 8005516:	ab0e      	add	r3, sp, #56	@ 0x38
 8005518:	3303      	adds	r3, #3
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
    Game game;
    int deckIndex = 0;
 8005522:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005526:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]

    int playGame = 0;
 800552e:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005532:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]

    int amountCard = (NUM_PLAYERS * 2) + 5;
 800553a:	4bad      	ldr	r3, [pc, #692]	@ (80057f0 <playPokerGame+0x3b8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	3305      	adds	r3, #5
 8005542:	f8c7 3608 	str.w	r3, [r7, #1544]	@ 0x608
    Card rfdi_deck[amountCard];
 8005546:	f8d7 4608 	ldr.w	r4, [r7, #1544]	@ 0x608
 800554a:	1e63      	subs	r3, r4, #1
 800554c:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8005550:	4622      	mov	r2, r4
 8005552:	2300      	movs	r3, #0
 8005554:	613a      	str	r2, [r7, #16]
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800555c:	462a      	mov	r2, r5
 800555e:	4633      	mov	r3, r6
 8005560:	f04f 0000 	mov.w	r0, #0
 8005564:	f04f 0100 	mov.w	r1, #0
 8005568:	0099      	lsls	r1, r3, #2
 800556a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800556e:	0090      	lsls	r0, r2, #2
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4629      	mov	r1, r5
 8005576:	1851      	adds	r1, r2, r1
 8005578:	6039      	str	r1, [r7, #0]
 800557a:	4631      	mov	r1, r6
 800557c:	eb43 0101 	adc.w	r1, r3, r1
 8005580:	6079      	str	r1, [r7, #4]
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800558e:	4631      	mov	r1, r6
 8005590:	014b      	lsls	r3, r1, #5
 8005592:	4629      	mov	r1, r5
 8005594:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8005598:	4629      	mov	r1, r5
 800559a:	014a      	lsls	r2, r1, #5
 800559c:	4622      	mov	r2, r4
 800559e:	2300      	movs	r3, #0
 80055a0:	60ba      	str	r2, [r7, #8]
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80055a8:	462a      	mov	r2, r5
 80055aa:	4633      	mov	r3, r6
 80055ac:	f04f 0000 	mov.w	r0, #0
 80055b0:	f04f 0100 	mov.w	r1, #0
 80055b4:	0099      	lsls	r1, r3, #2
 80055b6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80055ba:	0090      	lsls	r0, r2, #2
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4629      	mov	r1, r5
 80055c2:	eb12 0a01 	adds.w	sl, r2, r1
 80055c6:	4631      	mov	r1, r6
 80055c8:	eb43 0b01 	adc.w	fp, r3, r1
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80055d8:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80055dc:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80055e0:	4622      	mov	r2, r4
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	3307      	adds	r3, #7
 80055ec:	08db      	lsrs	r3, r3, #3
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	ebad 0d03 	sub.w	sp, sp, r3
 80055f4:	ab0e      	add	r3, sp, #56	@ 0x38
 80055f6:	3303      	adds	r3, #3
 80055f8:	089b      	lsrs	r3, r3, #2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600

    JoystickState current_state = STATE_IDLE;
 8005600:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005604:	f2a3 43cd 	subw	r3, r3, #1229	@ 0x4cd
 8005608:	2202      	movs	r2, #2
 800560a:	701a      	strb	r2, [r3, #0]

    JoystickConfig config = {
 800560c:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005610:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8005614:	4a77      	ldr	r2, [pc, #476]	@ (80057f4 <playPokerGame+0x3bc>)
 8005616:	461c      	mov	r4, r3
 8005618:	4615      	mov	r5, r2
 800561a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800561c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800561e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005622:	e884 0003 	stmia.w	r4, {r0, r1}
        .threshold_increase = 3000,
        .threshold_decrease = 1000,
        .mode_switch_high = 3000,
        .mode_switch_low = 1000
    };
    Joystick_Init(&config);
 8005626:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fba4 	bl	8003d78 <Joystick_Init>

    initializeGame(&game);
 8005630:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8005634:	4618      	mov	r0, r3
 8005636:	f7fe fd23 	bl	8004080 <initializeGame>
    createDeck(deck);
 800563a:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fd38 	bl	80040b4 <createDeck>
    shuffleDeck(deck);
 8005644:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe fded 	bl	8004228 <shuffleDeck>
    initializePlayers(players, n_players, n_bots);
 800564e:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005652:	f2a3 6301 	subw	r3, r3, #1537	@ 0x601
 8005656:	7819      	ldrb	r1, [r3, #0]
 8005658:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 800565c:	f2a3 6302 	subw	r3, r3, #1538	@ 0x602
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	f8d7 060c 	ldr.w	r0, [r7, #1548]	@ 0x60c
 8005668:	f7fe fe34 	bl	80042d4 <initializePlayers>

    // postBlinds(players, &game);

    dealInitialCards(deck, players, &deckIndex);
 800566c:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8005670:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8005674:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe feb5 	bl	80043e8 <dealInitialCards>

	for (int i = 0; i < 5; i++) {
 800567e:	2300      	movs	r3, #0
 8005680:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 8005684:	e018      	b.n	80056b8 <playPokerGame+0x280>
		disPlayCommunityCard(deck[i], i + 1);
 8005686:	f8d7 362c 	ldr.w	r3, [r7, #1580]	@ 0x62c
 800568a:	1c59      	adds	r1, r3, #1
 800568c:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005690:	f2a3 404c 	subw	r0, r3, #1100	@ 0x44c
 8005694:	f8d7 262c 	ldr.w	r2, [r7, #1580]	@ 0x62c
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4403      	add	r3, r0
 80056a2:	9101      	str	r1, [sp, #4]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	9200      	str	r2, [sp, #0]
 80056a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056aa:	f7fe f8cf 	bl	800384c <disPlayCommunityCard>
	for (int i = 0; i < 5; i++) {
 80056ae:	f8d7 362c 	ldr.w	r3, [r7, #1580]	@ 0x62c
 80056b2:	3301      	adds	r3, #1
 80056b4:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 80056b8:	f8d7 362c 	ldr.w	r3, [r7, #1580]	@ 0x62c
 80056bc:	2b04      	cmp	r3, #4
 80056be:	dde2      	ble.n	8005686 <playPokerGame+0x24e>
	}

    // Main game loop
    while (game.state != SHOWDOWN)
 80056c0:	e282      	b.n	8005bc8 <playPokerGame+0x790>
    {
    	HAL_Delay(200);
 80056c2:	20c8      	movs	r0, #200	@ 0xc8
 80056c4:	f000 ff84 	bl	80065d0 <HAL_Delay>
        int activePlayers;
        int startPlayer;

        switch (game.state)
 80056c8:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 80056cc:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80056d0:	7a1b      	ldrb	r3, [r3, #8]
 80056d2:	2b06      	cmp	r3, #6
 80056d4:	f200 8277 	bhi.w	8005bc6 <playPokerGame+0x78e>
 80056d8:	a201      	add	r2, pc, #4	@ (adr r2, 80056e0 <playPokerGame+0x2a8>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	08005711 	.word	0x08005711
 80056e4:	08005721 	.word	0x08005721
 80056e8:	08005741 	.word	0x08005741
 80056ec:	08005793 	.word	0x08005793
 80056f0:	08005793 	.word	0x08005793
 80056f4:	08005793 	.word	0x08005793
 80056f8:	08005807 	.word	0x08005807
        {
        case PREGAME:
        	while (!playGame) {
        		Joystick_Update(&n_players, &n_bots, &current_state, &playGame);
 80056fc:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8005700:	f207 1263 	addw	r2, r7, #355	@ 0x163
 8005704:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 8005708:	f107 002f 	add.w	r0, r7, #47	@ 0x2f
 800570c:	f7fe fbcc 	bl	8003ea8 <Joystick_Update>
        	while (!playGame) {
 8005710:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005714:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0ee      	beq.n	80056fc <playPokerGame+0x2c4>
        	}
        	break;
 800571e:	e253      	b.n	8005bc8 <playPokerGame+0x790>

        case DEALCARD:
        	processRFID(amountCard, rfdi_deck);
 8005720:	f8d7 1600 	ldr.w	r1, [r7, #1536]	@ 0x600
 8005724:	f8d7 0608 	ldr.w	r0, [r7, #1544]	@ 0x608
 8005728:	f000 fca8 	bl	800607c <processRFID>
        	dealInitialCards(rfdi_deck, players, &deckIndex);
 800572c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8005730:	461a      	mov	r2, r3
 8005732:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 8005736:	f8d7 0600 	ldr.w	r0, [r7, #1536]	@ 0x600
 800573a:	f7fe fe55 	bl	80043e8 <dealInitialCards>
        	break;
 800573e:	e243      	b.n	8005bc8 <playPokerGame+0x790>

        case PREFLOP:
            startPlayer = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	f8c7 35f8 	str.w	r3, [r7, #1528]	@ 0x5f8
            activePlayers = bettingRound(players, &game, startPlayer);
 8005746:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800574a:	f8d7 25f8 	ldr.w	r2, [r7, #1528]	@ 0x5f8
 800574e:	4619      	mov	r1, r3
 8005750:	f8d7 060c 	ldr.w	r0, [r7, #1548]	@ 0x60c
 8005754:	f7ff f928 	bl	80049a8 <bettingRound>
 8005758:	f8c7 05f4 	str.w	r0, [r7, #1524]	@ 0x5f4
            if (activePlayers > 1)
 800575c:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 8005760:	2b01      	cmp	r3, #1
 8005762:	dd0f      	ble.n	8005784 <playPokerGame+0x34c>
            {
                dealCommunityCards(rfdi_deck, &game, 3, &deckIndex);
 8005764:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8005768:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 800576c:	2203      	movs	r2, #3
 800576e:	f8d7 0600 	ldr.w	r0, [r7, #1536]	@ 0x600
 8005772:	f7fe fe7d 	bl	8004470 <dealCommunityCards>
                game.state = FLOP;
 8005776:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 800577a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800577e:	2203      	movs	r2, #3
 8005780:	721a      	strb	r2, [r3, #8]
            }
            else
            {
                game.state = FINISH;
            }
            break;
 8005782:	e221      	b.n	8005bc8 <playPokerGame+0x790>
                game.state = FINISH;
 8005784:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005788:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800578c:	2206      	movs	r2, #6
 800578e:	721a      	strb	r2, [r3, #8]
            break;
 8005790:	e21a      	b.n	8005bc8 <playPokerGame+0x790>

        case FLOP:
        case TURN:
        case RIVER:
            startPlayer = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	f8c7 35f8 	str.w	r3, [r7, #1528]	@ 0x5f8
            activePlayers = bettingRound(players, &game, startPlayer);
 8005798:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800579c:	f8d7 25f8 	ldr.w	r2, [r7, #1528]	@ 0x5f8
 80057a0:	4619      	mov	r1, r3
 80057a2:	f8d7 060c 	ldr.w	r0, [r7, #1548]	@ 0x60c
 80057a6:	f7ff f8ff 	bl	80049a8 <bettingRound>
 80057aa:	f8c7 05f4 	str.w	r0, [r7, #1524]	@ 0x5f4
            if (activePlayers > 1 && game.state != RIVER)
 80057ae:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	@ 0x5f4
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	dd20      	ble.n	80057f8 <playPokerGame+0x3c0>
 80057b6:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 80057ba:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80057be:	7a1b      	ldrb	r3, [r3, #8]
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d019      	beq.n	80057f8 <playPokerGame+0x3c0>
            {
                dealCommunityCards(rfdi_deck, &game, 1, &deckIndex);
 80057c4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80057c8:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 80057cc:	2201      	movs	r2, #1
 80057ce:	f8d7 0600 	ldr.w	r0, [r7, #1536]	@ 0x600
 80057d2:	f7fe fe4d 	bl	8004470 <dealCommunityCards>
                game.state++;
 80057d6:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 80057da:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80057de:	7a1b      	ldrb	r3, [r3, #8]
 80057e0:	3301      	adds	r3, #1
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 80057e8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80057ec:	721a      	strb	r2, [r3, #8]
            }
            else
            {
                game.state = FINISH;
            }
            break;
 80057ee:	e1eb      	b.n	8005bc8 <playPokerGame+0x790>
 80057f0:	20000058 	.word	0x20000058
 80057f4:	080100a4 	.word	0x080100a4
                game.state = FINISH;
 80057f8:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 80057fc:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8005800:	2206      	movs	r2, #6
 8005802:	721a      	strb	r2, [r3, #8]
            break;
 8005804:	e1e0      	b.n	8005bc8 <playPokerGame+0x790>

        case FINISH:
        	system("cls");
 8005806:	48d8      	ldr	r0, [pc, #864]	@ (8005b68 <playPokerGame+0x730>)
 8005808:	f007 fc91 	bl	800d12e <system>
			printf("\n=== SHOWDOWN ===\n");
 800580c:	48d7      	ldr	r0, [pc, #860]	@ (8005b6c <playPokerGame+0x734>)
 800580e:	f007 fc1d 	bl	800d04c <puts>
			displayGameState(&game);
 8005812:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe ff4c 	bl	80046b4 <displayGameState>
			displayCommunityCards(&game);
 800581c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8005820:	4618      	mov	r0, r3
 8005822:	f7fe fee1 	bl	80045e8 <displayCommunityCards>

			// Display all player hands
			for (int i = 0; i < NUM_PLAYERS; i++)
 8005826:	2300      	movs	r3, #0
 8005828:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 800582c:	e047      	b.n	80058be <playPokerGame+0x486>
			{
				if (!players[i].folded)
 800582e:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 8005832:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 8005836:	4613      	mov	r3, r2
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	3330      	adds	r3, #48	@ 0x30
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d135      	bne.n	80058b4 <playPokerGame+0x47c>
				{
					printf("\nPlayer %d's hand: [%s of %s] [%s of %s]\n",
 8005848:	f8d7 3628 	ldr.w	r3, [r7, #1576]	@ 0x628
 800584c:	1c5c      	adds	r4, r3, #1
 800584e:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 8005852:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 8005856:	4613      	mov	r3, r2
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	681d      	ldr	r5, [r3, #0]
 8005862:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 8005866:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 800586a:	4613      	mov	r3, r2
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	3304      	adds	r3, #4
 8005876:	681e      	ldr	r6, [r3, #0]
 8005878:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 800587c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 8005880:	4613      	mov	r3, r2
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	1a9b      	subs	r3, r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	3314      	adds	r3, #20
 800588c:	6819      	ldr	r1, [r3, #0]
 800588e:	f8d7 060c 	ldr.w	r0, [r7, #1548]	@ 0x60c
 8005892:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 8005896:	4613      	mov	r3, r2
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4403      	add	r3, r0
 80058a0:	3318      	adds	r3, #24
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	9100      	str	r1, [sp, #0]
 80058a8:	4633      	mov	r3, r6
 80058aa:	462a      	mov	r2, r5
 80058ac:	4621      	mov	r1, r4
 80058ae:	48b0      	ldr	r0, [pc, #704]	@ (8005b70 <playPokerGame+0x738>)
 80058b0:	f007 fb5c 	bl	800cf6c <iprintf>
			for (int i = 0; i < NUM_PLAYERS; i++)
 80058b4:	f8d7 3628 	ldr.w	r3, [r7, #1576]	@ 0x628
 80058b8:	3301      	adds	r3, #1
 80058ba:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 80058be:	4bad      	ldr	r3, [pc, #692]	@ (8005b74 <playPokerGame+0x73c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 80058c6:	429a      	cmp	r2, r3
 80058c8:	dbb1      	blt.n	800582e <playPokerGame+0x3f6>
						   players[i].hand[0].rank, players[i].hand[0].suit,
						   players[i].hand[1].rank, players[i].hand[1].suit);
				}
			}

			findWinner(players, game.communityCards);
 80058ca:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80058ce:	3310      	adds	r3, #16
 80058d0:	4619      	mov	r1, r3
 80058d2:	f8d7 060c 	ldr.w	r0, [r7, #1548]	@ 0x60c
 80058d6:	f7ff fb73 	bl	8004fc0 <findWinner>

			int winningPlayer = -1;
 80058da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058de:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
			int bestHandRank = -1;
 80058e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058e6:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
			Card bestFullHand[NUM_CARDS_IN_HAND];

			for (int i = 0; i < NUM_PLAYERS; i++)
 80058ea:	2300      	movs	r3, #0
 80058ec:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 80058f0:	e0ec      	b.n	8005acc <playPokerGame+0x694>
			{
				if (!players[i].folded)
 80058f2:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 80058f6:	f8d7 261c 	ldr.w	r2, [r7, #1564]	@ 0x61c
 80058fa:	4613      	mov	r3, r2
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	3330      	adds	r3, #48	@ 0x30
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	f040 80da 	bne.w	8005ac2 <playPokerGame+0x68a>
				{
					int handRank = evaluateHand(players[i], game.communityCards);
 800590e:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 8005912:	f8d7 261c 	ldr.w	r2, [r7, #1564]	@ 0x61c
 8005916:	4613      	mov	r3, r2
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	18ce      	adds	r6, r1, r3
 8005920:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8005924:	3310      	adds	r3, #16
 8005926:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005928:	466d      	mov	r5, sp
 800592a:	f106 0410 	add.w	r4, r6, #16
 800592e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005936:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800593a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800593e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005942:	f7ff f9c9 	bl	8004cd8 <evaluateHand>
 8005946:	f8c7 05fc 	str.w	r0, [r7, #1532]	@ 0x5fc
					if (handRank > bestHandRank)
 800594a:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	@ 0x5fc
 800594e:	f8d7 3620 	ldr.w	r3, [r7, #1568]	@ 0x620
 8005952:	429a      	cmp	r2, r3
 8005954:	dd27      	ble.n	80059a6 <playPokerGame+0x56e>
					{
						bestHandRank = handRank;
 8005956:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 800595a:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
						winningPlayer = i;
 800595e:	f8d7 361c 	ldr.w	r3, [r7, #1564]	@ 0x61c
 8005962:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
						getFullHand(bestFullHand, players[i], game.communityCards);
 8005966:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 800596a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	@ 0x61c
 800596e:	4613      	mov	r3, r2
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	1a9b      	subs	r3, r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	18ce      	adds	r6, r1, r3
 8005978:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 800597c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8005980:	3310      	adds	r3, #16
 8005982:	930c      	str	r3, [sp, #48]	@ 0x30
 8005984:	466d      	mov	r5, sp
 8005986:	f106 040c 	add.w	r4, r6, #12
 800598a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800598c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800598e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005992:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005996:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800599a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800599e:	4660      	mov	r0, ip
 80059a0:	f7ff f94a 	bl	8004c38 <getFullHand>
 80059a4:	e08d      	b.n	8005ac2 <playPokerGame+0x68a>
					}
					else if (handRank == bestHandRank)
 80059a6:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	@ 0x5fc
 80059aa:	f8d7 3620 	ldr.w	r3, [r7, #1568]	@ 0x620
 80059ae:	429a      	cmp	r2, r3
 80059b0:	f040 8087 	bne.w	8005ac2 <playPokerGame+0x68a>
					{
						Card currentFullHand[NUM_CARDS_IN_HAND];
						getFullHand(currentFullHand, players[i], game.communityCards);
 80059b4:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 80059b8:	f8d7 261c 	ldr.w	r2, [r7, #1564]	@ 0x61c
 80059bc:	4613      	mov	r3, r2
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	18ce      	adds	r6, r1, r3
 80059c6:	f107 0cbc 	add.w	ip, r7, #188	@ 0xbc
 80059ca:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80059ce:	3310      	adds	r3, #16
 80059d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80059d2:	466d      	mov	r5, sp
 80059d4:	f106 040c 	add.w	r4, r6, #12
 80059d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80059e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80059e8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80059ec:	4660      	mov	r0, ip
 80059ee:	f7ff f923 	bl	8004c38 <getFullHand>
						qsort(bestFullHand, NUM_CARDS_IN_HAND, sizeof(Card), compareCards);
 80059f2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80059f6:	4b60      	ldr	r3, [pc, #384]	@ (8005b78 <playPokerGame+0x740>)
 80059f8:	2214      	movs	r2, #20
 80059fa:	2107      	movs	r1, #7
 80059fc:	f005 faba 	bl	800af74 <qsort>
						qsort(currentFullHand, NUM_CARDS_IN_HAND, sizeof(Card), compareCards);
 8005a00:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8005a04:	4b5c      	ldr	r3, [pc, #368]	@ (8005b78 <playPokerGame+0x740>)
 8005a06:	2214      	movs	r2, #20
 8005a08:	2107      	movs	r1, #7
 8005a0a:	f005 fab3 	bl	800af74 <qsort>

						for (int j = 0; j < NUM_CARDS_IN_HAND; j++)
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f8c7 3618 	str.w	r3, [r7, #1560]	@ 0x618
 8005a14:	e04f      	b.n	8005ab6 <playPokerGame+0x67e>
						{
							if (currentFullHand[j].rankValue > bestFullHand[j].rankValue)
 8005a16:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005a1a:	f2a3 5174 	subw	r1, r3, #1396	@ 0x574
 8005a1e:	f8d7 2618 	ldr.w	r2, [r7, #1560]	@ 0x618
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	6819      	ldr	r1, [r3, #0]
 8005a30:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005a34:	f5a3 60c0 	sub.w	r0, r3, #1536	@ 0x600
 8005a38:	f8d7 2618 	ldr.w	r2, [r7, #1560]	@ 0x618
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4403      	add	r3, r0
 8005a46:	3308      	adds	r3, #8
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4299      	cmp	r1, r3
 8005a4c:	dd12      	ble.n	8005a74 <playPokerGame+0x63c>
							{
								winningPlayer = i;
 8005a4e:	f8d7 361c 	ldr.w	r3, [r7, #1564]	@ 0x61c
 8005a52:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
								memcpy(bestFullHand, currentFullHand, sizeof(Card) * NUM_CARDS_IN_HAND);
 8005a56:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005a5a:	f5a3 62c0 	sub.w	r2, r3, #1536	@ 0x600
 8005a5e:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005a62:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
 8005a66:	4610      	mov	r0, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	238c      	movs	r3, #140	@ 0x8c
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f007 fb50 	bl	800d112 <memcpy>
								break;
 8005a72:	e026      	b.n	8005ac2 <playPokerGame+0x68a>
							}
							else if (currentFullHand[j].rankValue < bestFullHand[j].rankValue)
 8005a74:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005a78:	f2a3 5174 	subw	r1, r3, #1396	@ 0x574
 8005a7c:	f8d7 2618 	ldr.w	r2, [r7, #1560]	@ 0x618
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	440b      	add	r3, r1
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005a92:	f5a3 60c0 	sub.w	r0, r3, #1536	@ 0x600
 8005a96:	f8d7 2618 	ldr.w	r2, [r7, #1560]	@ 0x618
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4403      	add	r3, r0
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4299      	cmp	r1, r3
 8005aaa:	db09      	blt.n	8005ac0 <playPokerGame+0x688>
						for (int j = 0; j < NUM_CARDS_IN_HAND; j++)
 8005aac:	f8d7 3618 	ldr.w	r3, [r7, #1560]	@ 0x618
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	f8c7 3618 	str.w	r3, [r7, #1560]	@ 0x618
 8005ab6:	f8d7 3618 	ldr.w	r3, [r7, #1560]	@ 0x618
 8005aba:	2b06      	cmp	r3, #6
 8005abc:	ddab      	ble.n	8005a16 <playPokerGame+0x5de>
 8005abe:	e000      	b.n	8005ac2 <playPokerGame+0x68a>
							{
								break;
 8005ac0:	bf00      	nop
			for (int i = 0; i < NUM_PLAYERS; i++)
 8005ac2:	f8d7 361c 	ldr.w	r3, [r7, #1564]	@ 0x61c
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 8005acc:	4b29      	ldr	r3, [pc, #164]	@ (8005b74 <playPokerGame+0x73c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	@ 0x61c
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	f6ff af0c 	blt.w	80058f2 <playPokerGame+0x4ba>
						}
					}
				}
			}

			if (winningPlayer != -1)
 8005ada:	f8d7 3624 	ldr.w	r3, [r7, #1572]	@ 0x624
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ae2:	d03a      	beq.n	8005b5a <playPokerGame+0x722>
			{
				players[winningPlayer].chips += game.pot;
 8005ae4:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 8005ae8:	f8d7 2624 	ldr.w	r2, [r7, #1572]	@ 0x624
 8005aec:	4613      	mov	r3, r2
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	3328      	adds	r3, #40	@ 0x28
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005afe:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	18d1      	adds	r1, r2, r3
 8005b06:	f8d7 060c 	ldr.w	r0, [r7, #1548]	@ 0x60c
 8005b0a:	f8d7 2624 	ldr.w	r2, [r7, #1572]	@ 0x624
 8005b0e:	4613      	mov	r3, r2
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	1a9b      	subs	r3, r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4403      	add	r3, r0
 8005b18:	3328      	adds	r3, #40	@ 0x28
 8005b1a:	6019      	str	r1, [r3, #0]
				printf("\nPlayer %d wins the pot of %d chips!\n", winningPlayer + 1, game.pot);
 8005b1c:	f8d7 3624 	ldr.w	r3, [r7, #1572]	@ 0x624
 8005b20:	1c59      	adds	r1, r3, #1
 8005b22:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005b26:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4813      	ldr	r0, [pc, #76]	@ (8005b7c <playPokerGame+0x744>)
 8005b30:	f007 fa1c 	bl	800cf6c <iprintf>
				printf("New chip count for Player %d: %d\n", winningPlayer + 1, players[winningPlayer].chips);
 8005b34:	f8d7 3624 	ldr.w	r3, [r7, #1572]	@ 0x624
 8005b38:	1c58      	adds	r0, r3, #1
 8005b3a:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 8005b3e:	f8d7 2624 	ldr.w	r2, [r7, #1572]	@ 0x624
 8005b42:	4613      	mov	r3, r2
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	3328      	adds	r3, #40	@ 0x28
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	461a      	mov	r2, r3
 8005b52:	4601      	mov	r1, r0
 8005b54:	480a      	ldr	r0, [pc, #40]	@ (8005b80 <playPokerGame+0x748>)
 8005b56:	f007 fa09 	bl	800cf6c <iprintf>
			}

			printf("\nFinal chip counts:\n");
 8005b5a:	480a      	ldr	r0, [pc, #40]	@ (8005b84 <playPokerGame+0x74c>)
 8005b5c:	f007 fa76 	bl	800d04c <puts>
			for (int i = 0; i < NUM_PLAYERS; i++)
 8005b60:	2300      	movs	r3, #0
 8005b62:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 8005b66:	e027      	b.n	8005bb8 <playPokerGame+0x780>
 8005b68:	0800febc 	.word	0x0800febc
 8005b6c:	0800ffec 	.word	0x0800ffec
 8005b70:	08010000 	.word	0x08010000
 8005b74:	20000058 	.word	0x20000058
 8005b78:	08004cb9 	.word	0x08004cb9
 8005b7c:	0801002c 	.word	0x0801002c
 8005b80:	08010054 	.word	0x08010054
 8005b84:	08010078 	.word	0x08010078
			{
				printf("Player %d: %d chips\n", i + 1, players[i].chips);
 8005b88:	f8d7 3614 	ldr.w	r3, [r7, #1556]	@ 0x614
 8005b8c:	1c58      	adds	r0, r3, #1
 8005b8e:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 8005b92:	f8d7 2614 	ldr.w	r2, [r7, #1556]	@ 0x614
 8005b96:	4613      	mov	r3, r2
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	1a9b      	subs	r3, r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	3328      	adds	r3, #40	@ 0x28
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	480f      	ldr	r0, [pc, #60]	@ (8005be8 <playPokerGame+0x7b0>)
 8005baa:	f007 f9df 	bl	800cf6c <iprintf>
			for (int i = 0; i < NUM_PLAYERS; i++)
 8005bae:	f8d7 3614 	ldr.w	r3, [r7, #1556]	@ 0x614
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 8005bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005bec <playPokerGame+0x7b4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8d7 2614 	ldr.w	r2, [r7, #1556]	@ 0x614
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	dbe1      	blt.n	8005b88 <playPokerGame+0x750>
			}
        	break;
 8005bc4:	e000      	b.n	8005bc8 <playPokerGame+0x790>

        default:
            break;
 8005bc6:	bf00      	nop
    while (game.state != SHOWDOWN)
 8005bc8:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 8005bcc:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8005bd0:	7a1b      	ldrb	r3, [r3, #8]
 8005bd2:	2b07      	cmp	r3, #7
 8005bd4:	f47f ad75 	bne.w	80056c2 <playPokerGame+0x28a>
 8005bd8:	f8d7 d028 	ldr.w	sp, [r7, #40]	@ 0x28
        }
    }
}
 8005bdc:	bf00      	nop
 8005bde:	f207 6734 	addw	r7, r7, #1588	@ 0x634
 8005be2:	46bd      	mov	sp, r7
 8005be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be8:	0801008c 	.word	0x0801008c
 8005bec:	20000058 	.word	0x20000058

08005bf0 <debug_print>:
static char *append_word(char *s, char c);
static size_t count_word(char const *s, char c);
static char **ft_split(char const *s, char c);

void debug_print(const char *message)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(DEBUG_UART, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7fa fb71 	bl	80002e0 <strlen>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	4806      	ldr	r0, [pc, #24]	@ (8005c24 <debug_print+0x34>)
 8005c0a:	f004 fc71 	bl	800a4f0 <HAL_UART_Transmit>
    HAL_UART_Transmit(DEBUG_UART, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c12:	2202      	movs	r2, #2
 8005c14:	4904      	ldr	r1, [pc, #16]	@ (8005c28 <debug_print+0x38>)
 8005c16:	4803      	ldr	r0, [pc, #12]	@ (8005c24 <debug_print+0x34>)
 8005c18:	f004 fc6a 	bl	800a4f0 <HAL_UART_Transmit>
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	2000050c 	.word	0x2000050c
 8005c28:	080100bc 	.word	0x080100bc

08005c2c <word_len>:
        HAL_UART_Transmit(&huart3, (uint8_t *)newline, 2, HAL_MAX_DELAY);
    }
}

static size_t word_len(char *s, char c)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
    size_t i = 0, len = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60bb      	str	r3, [r7, #8]
    while (s[i] && s[i] != c)
 8005c40:	e005      	b.n	8005c4e <word_len+0x22>
    {
        len++;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	3301      	adds	r3, #1
 8005c46:	60bb      	str	r3, [r7, #8]
        i++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
    while (s[i] && s[i] != c)
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d006      	beq.n	8005c68 <word_len+0x3c>
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d1ec      	bne.n	8005c42 <word_len+0x16>
    }
    return len;
 8005c68:	68bb      	ldr	r3, [r7, #8]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <append_word>:

static char *append_word(char *s, char c)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b086      	sub	sp, #24
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	70fb      	strb	r3, [r7, #3]
    size_t len = word_len(s, c);
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff ffd0 	bl	8005c2c <word_len>
 8005c8c:	60f8      	str	r0, [r7, #12]
    char *buffer = malloc(sizeof(char) * (len + 1));
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3301      	adds	r3, #1
 8005c92:	4618      	mov	r0, r3
 8005c94:	f005 fd5e 	bl	800b754 <malloc>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	60bb      	str	r3, [r7, #8]
    if (!buffer)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <append_word+0x30>
        return NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e022      	b.n	8005cec <append_word+0x76>

    size_t i = 0, j = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
    while (i < len)
 8005cae:	e013      	b.n	8005cd8 <append_word+0x62>
    {
        if (s[i] != c)
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	78fa      	ldrb	r2, [r7, #3]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d009      	beq.n	8005cd2 <append_word+0x5c>
            buffer[j++] = s[i];
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	441a      	add	r2, r3
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	1c59      	adds	r1, r3, #1
 8005cc8:	6139      	str	r1, [r7, #16]
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	440b      	add	r3, r1
 8005cce:	7812      	ldrb	r2, [r2, #0]
 8005cd0:	701a      	strb	r2, [r3, #0]
        i++;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
    while (i < len)
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d3e7      	bcc.n	8005cb0 <append_word+0x3a>
    }
    buffer[j] = '\0';
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
    return buffer;
 8005cea:	68bb      	ldr	r3, [r7, #8]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <count_word>:

static size_t count_word(char const *s, char c)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
    size_t i = 0, count = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	2300      	movs	r3, #0
 8005d06:	60bb      	str	r3, [r7, #8]
    while (s[i])
 8005d08:	e029      	b.n	8005d5e <count_word+0x6a>
    {
        while (s[i] && s[i] == c)
            i++;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
        while (s[i] && s[i] == c)
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d006      	beq.n	8005d2a <count_word+0x36>
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	78fa      	ldrb	r2, [r7, #3]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d0ef      	beq.n	8005d0a <count_word+0x16>
        if (s[i])
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d006      	beq.n	8005d44 <count_word+0x50>
            count++;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	60bb      	str	r3, [r7, #8]
        while (s[i] && s[i] != c)
 8005d3c:	e002      	b.n	8005d44 <count_word+0x50>
            i++;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3301      	adds	r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]
        while (s[i] && s[i] != c)
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d006      	beq.n	8005d5e <count_word+0x6a>
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	78fa      	ldrb	r2, [r7, #3]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d1ef      	bne.n	8005d3e <count_word+0x4a>
    while (s[i])
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1d2      	bne.n	8005d10 <count_word+0x1c>
    }
    return count;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <ft_split>:

static char **ft_split(char const *s, char c)
{
 8005d78:	b590      	push	{r4, r7, lr}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	70fb      	strb	r3, [r7, #3]
    if (!s)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <ft_split+0x16>
        return NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e059      	b.n	8005e42 <ft_split+0xca>

    char **buffer = malloc(sizeof(char *) * (count_word(s, c) + 1));
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff ffae 	bl	8005cf4 <count_word>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f005 fcd8 	bl	800b754 <malloc>
 8005da4:	4603      	mov	r3, r0
 8005da6:	60fb      	str	r3, [r7, #12]
    if (!buffer)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <ft_split+0x3a>
        return NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e047      	b.n	8005e42 <ft_split+0xca>

    size_t i = 0, j = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
    while (s[i])
 8005dba:	e035      	b.n	8005e28 <ft_split+0xb0>
    {
        while (s[i] && s[i] == c)
            i++;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
        while (s[i] && s[i] == c)
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d006      	beq.n	8005ddc <ft_split+0x64>
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d0ef      	beq.n	8005dbc <ft_split+0x44>
        if (s[i])
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	4413      	add	r3, r2
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <ft_split+0x96>
            buffer[j++] = append_word((char *)&s[i], c);
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	18d0      	adds	r0, r2, r3
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	613a      	str	r2, [r7, #16]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	18d4      	adds	r4, r2, r3
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	f7ff ff3a 	bl	8005c76 <append_word>
 8005e02:	4603      	mov	r3, r0
 8005e04:	6023      	str	r3, [r4, #0]
        while (s[i] && s[i] != c)
 8005e06:	e002      	b.n	8005e0e <ft_split+0x96>
            i++;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
        while (s[i] && s[i] != c)
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	4413      	add	r3, r2
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d006      	beq.n	8005e28 <ft_split+0xb0>
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	4413      	add	r3, r2
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	78fa      	ldrb	r2, [r7, #3]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d1ef      	bne.n	8005e08 <ft_split+0x90>
    while (s[i])
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1c6      	bne.n	8005dc2 <ft_split+0x4a>
    }
    buffer[j] = NULL;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
    return buffer;
 8005e40:	68fb      	ldr	r3, [r7, #12]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd90      	pop	{r4, r7, pc}
	...

08005e4c <getRankIndex.0>:
    }

    card->rank = split[1];

    int getRankIndex(const char *rank)
    {
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	f8c7 c000 	str.w	ip, [r7]
        for (int i = 0; i < NUM_RANKS; i++)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e00d      	b.n	8005e7a <getRankIndex.0+0x2e>
        {
            if (ranks[i][0] == rank[0])
 8005e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e90 <getRankIndex.0+0x44>)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e66:	781a      	ldrb	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d101      	bne.n	8005e74 <getRankIndex.0+0x28>
                return i;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	e007      	b.n	8005e84 <getRankIndex.0+0x38>
        for (int i = 0; i < NUM_RANKS; i++)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b0c      	cmp	r3, #12
 8005e7e:	ddee      	ble.n	8005e5e <getRankIndex.0+0x12>
        }
        return -1;
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20000024 	.word	0x20000024

08005e94 <parseCardFromString>:
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
Card *parseCardFromString(const char *cardString)
 8005e9c:	f107 0320 	add.w	r3, r7, #32
 8005ea0:	60bb      	str	r3, [r7, #8]
    Card *card = malloc(sizeof(Card));
 8005ea2:	2014      	movs	r0, #20
 8005ea4:	f005 fc56 	bl	800b754 <malloc>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	617b      	str	r3, [r7, #20]
    char **split = ft_split(cardString, ' ');
 8005eac:	2120      	movs	r1, #32
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff ff62 	bl	8005d78 <ft_split>
 8005eb4:	6138      	str	r0, [r7, #16]
    switch (split[0][0])
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	3b43      	subs	r3, #67	@ 0x43
 8005ebe:	2b10      	cmp	r3, #16
 8005ec0:	d834      	bhi.n	8005f2c <parseCardFromString+0x98>
 8005ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec8 <parseCardFromString+0x34>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005f1d 	.word	0x08005f1d
 8005ecc:	08005f15 	.word	0x08005f15
 8005ed0:	08005f2d 	.word	0x08005f2d
 8005ed4:	08005f2d 	.word	0x08005f2d
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005f0d 	.word	0x08005f0d
 8005ee0:	08005f2d 	.word	0x08005f2d
 8005ee4:	08005f2d 	.word	0x08005f2d
 8005ee8:	08005f2d 	.word	0x08005f2d
 8005eec:	08005f2d 	.word	0x08005f2d
 8005ef0:	08005f2d 	.word	0x08005f2d
 8005ef4:	08005f2d 	.word	0x08005f2d
 8005ef8:	08005f2d 	.word	0x08005f2d
 8005efc:	08005f2d 	.word	0x08005f2d
 8005f00:	08005f2d 	.word	0x08005f2d
 8005f04:	08005f2d 	.word	0x08005f2d
 8005f08:	08005f25 	.word	0x08005f25
        case 'H': card->suit = "Hearts"; break;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4a37      	ldr	r2, [pc, #220]	@ (8005fec <parseCardFromString+0x158>)
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	e00f      	b.n	8005f34 <parseCardFromString+0xa0>
        case 'D': card->suit = "Diamonds"; break;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4a36      	ldr	r2, [pc, #216]	@ (8005ff0 <parseCardFromString+0x15c>)
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	e00b      	b.n	8005f34 <parseCardFromString+0xa0>
        case 'C': card->suit = "Clubs"; break;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4a35      	ldr	r2, [pc, #212]	@ (8005ff4 <parseCardFromString+0x160>)
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	e007      	b.n	8005f34 <parseCardFromString+0xa0>
        case 'S': card->suit = "Spades"; break;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	4a34      	ldr	r2, [pc, #208]	@ (8005ff8 <parseCardFromString+0x164>)
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	e003      	b.n	8005f34 <parseCardFromString+0xa0>
        default: card->suit = "Unknown"; break;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4a33      	ldr	r2, [pc, #204]	@ (8005ffc <parseCardFromString+0x168>)
 8005f30:	605a      	str	r2, [r3, #4]
 8005f32:	bf00      	nop
    card->rank = split[1];
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	601a      	str	r2, [r3, #0]

    int rankIndex = getRankIndex(split[1]);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f107 0208 	add.w	r2, r7, #8
 8005f46:	4694      	mov	ip, r2
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff ff7f 	bl	8005e4c <getRankIndex.0>
 8005f4e:	60f8      	str	r0, [r7, #12]
    if (rankIndex != -1)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f56:	d006      	beq.n	8005f66 <parseCardFromString+0xd2>
    {
        card->rankValue = rankValues[rankIndex];
 8005f58:	4a29      	ldr	r2, [pc, #164]	@ (8006000 <parseCardFromString+0x16c>)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	609a      	str	r2, [r3, #8]
 8005f64:	e006      	b.n	8005f74 <parseCardFromString+0xe0>
    }
    else
    {
        debug_print("Invalid rank");
 8005f66:	4827      	ldr	r0, [pc, #156]	@ (8006004 <parseCardFromString+0x170>)
 8005f68:	f7ff fe42 	bl	8005bf0 <debug_print>
        card->rankValue = -1;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f72:	609a      	str	r2, [r3, #8]
    }

    if (strcmp(card->suit, "Hearts") == 0 || strcmp(card->suit, "Diamonds") == 0)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	491c      	ldr	r1, [pc, #112]	@ (8005fec <parseCardFromString+0x158>)
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fa f9b8 	bl	80002f0 <strcmp>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d008      	beq.n	8005f98 <parseCardFromString+0x104>
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	4919      	ldr	r1, [pc, #100]	@ (8005ff0 <parseCardFromString+0x15c>)
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fa f9af 	bl	80002f0 <strcmp>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d112      	bne.n	8005fbe <parseCardFromString+0x12a>
    {
        card->symbol = (strcmp(card->suit, "Hearts") == 0) ? HEART : DIAMOND;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4913      	ldr	r1, [pc, #76]	@ (8005fec <parseCardFromString+0x158>)
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fa f9a6 	bl	80002f0 <strcmp>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <parseCardFromString+0x11a>
 8005faa:	4a17      	ldr	r2, [pc, #92]	@ (8006008 <parseCardFromString+0x174>)
 8005fac:	e000      	b.n	8005fb0 <parseCardFromString+0x11c>
 8005fae:	4a17      	ldr	r2, [pc, #92]	@ (800600c <parseCardFromString+0x178>)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	60da      	str	r2, [r3, #12]
        card->colour = RED;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005fba:	821a      	strh	r2, [r3, #16]
 8005fbc:	e010      	b.n	8005fe0 <parseCardFromString+0x14c>
    }
    else
    {
        card->symbol = (strcmp(card->suit, "Clubs") == 0) ? CLUB : SPADE;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	490c      	ldr	r1, [pc, #48]	@ (8005ff4 <parseCardFromString+0x160>)
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fa f993 	bl	80002f0 <strcmp>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <parseCardFromString+0x140>
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8006010 <parseCardFromString+0x17c>)
 8005fd2:	e000      	b.n	8005fd6 <parseCardFromString+0x142>
 8005fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8006014 <parseCardFromString+0x180>)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	60da      	str	r2, [r3, #12]
        card->colour = BLACK;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	821a      	strh	r2, [r3, #16]
    }

    return card;
 8005fe0:	697b      	ldr	r3, [r7, #20]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	080100cc 	.word	0x080100cc
 8005ff0:	080100d4 	.word	0x080100d4
 8005ff4:	080100e0 	.word	0x080100e0
 8005ff8:	080100e8 	.word	0x080100e8
 8005ffc:	080100f0 	.word	0x080100f0
 8006000:	08010490 	.word	0x08010490
 8006004:	080100f8 	.word	0x080100f8
 8006008:	080105c4 	.word	0x080105c4
 800600c:	08010544 	.word	0x08010544
 8006010:	08010644 	.word	0x08010644
 8006014:	080104c4 	.word	0x080104c4

08006018 <display_status_led>:

void display_status_led(StatusType status)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	71fb      	strb	r3, [r7, #7]
    if (status == STATUS_SUCCESS)
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d10c      	bne.n	8006042 <display_status_led+0x2a>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8006028:	2201      	movs	r2, #1
 800602a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800602e:	4812      	ldr	r0, [pc, #72]	@ (8006078 <display_status_led+0x60>)
 8006030:	f001 f9c2 	bl	80073b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8006034:	2200      	movs	r2, #0
 8006036:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800603a:	480f      	ldr	r0, [pc, #60]	@ (8006078 <display_status_led+0x60>)
 800603c:	f001 f9bc 	bl	80073b8 <HAL_GPIO_WritePin>
 8006040:	e00b      	b.n	800605a <display_status_led+0x42>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8006042:	2201      	movs	r2, #1
 8006044:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006048:	480b      	ldr	r0, [pc, #44]	@ (8006078 <display_status_led+0x60>)
 800604a:	f001 f9b5 	bl	80073b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800604e:	2200      	movs	r2, #0
 8006050:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006054:	4808      	ldr	r0, [pc, #32]	@ (8006078 <display_status_led+0x60>)
 8006056:	f001 f9af 	bl	80073b8 <HAL_GPIO_WritePin>
    }

    HAL_Delay(1000);
 800605a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800605e:	f000 fab7 	bl	80065d0 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 8006062:	2200      	movs	r2, #0
 8006064:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8006068:	4803      	ldr	r0, [pc, #12]	@ (8006078 <display_status_led+0x60>)
 800606a:	f001 f9a5 	bl	80073b8 <HAL_GPIO_WritePin>
}
 800606e:	bf00      	nop
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40020400 	.word	0x40020400

0800607c <processRFID>:

void processRFID(uint8_t maxEntries, Card deck[])
{
 800607c:	b590      	push	{r4, r7, lr}
 800607e:	b0c3      	sub	sp, #268	@ 0x10c
 8006080:	af02      	add	r7, sp, #8
 8006082:	4602      	mov	r2, r0
 8006084:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8006088:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800608c:	6019      	str	r1, [r3, #0]
 800608e:	4613      	mov	r3, r2
 8006090:	71fb      	strb	r3, [r7, #7]
    char message[100];
    uint8_t status;
    uint8_t str[MAX_LEN];
    uint8_t serNum[5];
    uint8_t isFinish = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

    debug_print("Initializing RFID Reader...");
 8006098:	48cb      	ldr	r0, [pc, #812]	@ (80063c8 <processRFID+0x34c>)
 800609a:	f7ff fda9 	bl	8005bf0 <debug_print>
    MFRC522_Init();
 800609e:	f7fb fb29 	bl	80016f4 <MFRC522_Init>
    debug_print("RFID Reader Started");
 80060a2:	48ca      	ldr	r0, [pc, #808]	@ (80063cc <processRFID+0x350>)
 80060a4:	f7ff fda4 	bl	8005bf0 <debug_print>
    debug_print("Waiting for card...");
 80060a8:	48c9      	ldr	r0, [pc, #804]	@ (80063d0 <processRFID+0x354>)
 80060aa:	f7ff fda1 	bl	8005bf0 <debug_print>

    while (!isFinish)
 80060ae:	e212      	b.n	80064d6 <processRFID+0x45a>
    {
        status = MFRC522_Request(PICC_REQIDL, str);
 80060b0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80060b4:	4619      	mov	r1, r3
 80060b6:	2026      	movs	r0, #38	@ 0x26
 80060b8:	f7fb fc19 	bl	80018ee <MFRC522_Request>
 80060bc:	4603      	mov	r3, r0
 80060be:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf

        if (status == MI_OK)
 80060c2:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f040 8202 	bne.w	80064d0 <processRFID+0x454>
        {
            debug_print("Card detected");
 80060cc:	48c1      	ldr	r0, [pc, #772]	@ (80063d4 <processRFID+0x358>)
 80060ce:	f7ff fd8f 	bl	8005bf0 <debug_print>

            status = MFRC522_Anticoll(serNum);
 80060d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fb fc2e 	bl	8001938 <MFRC522_Anticoll>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
            if (status == MI_OK)
 80060e2:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f040 81e8 	bne.w	80064bc <processRFID+0x440>
            {
                uint8_t readData[16];
                status = MFRC522_Read(4, readData);
 80060ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80060f0:	4619      	mov	r1, r3
 80060f2:	2004      	movs	r0, #4
 80060f4:	f7fb fca6 	bl	8001a44 <MFRC522_Read>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
                if (status == MI_OK)
 80060fe:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8006102:	2b00      	cmp	r3, #0
 8006104:	f040 81d1 	bne.w	80064aa <processRFID+0x42e>
                {
                    snprintf(message, sizeof(message), "Reading Data... (%d)", data_count + 1);
 8006108:	4bb3      	ldr	r3, [pc, #716]	@ (80063d8 <processRFID+0x35c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3301      	adds	r3, #1
 800610e:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8006112:	4ab2      	ldr	r2, [pc, #712]	@ (80063dc <processRFID+0x360>)
 8006114:	2164      	movs	r1, #100	@ 0x64
 8006116:	f005 ff69 	bl	800bfec <sniprintf>
                    debug_print(message);
 800611a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fd66 	bl	8005bf0 <debug_print>

                    char hex_string[33];
                    char ascii_string[17];

                    for (int i = 0; i < 16; i++)
 8006124:	2300      	movs	r3, #0
 8006126:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800612a:	e034      	b.n	8006196 <processRFID+0x11a>
                    {
                        sprintf(hex_string + (i * 2), "%02X", readData[i]);
 800612c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	461a      	mov	r2, r3
 8006134:	f107 030c 	add.w	r3, r7, #12
 8006138:	1898      	adds	r0, r3, r2
 800613a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800613e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006142:	4413      	add	r3, r2
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	49a5      	ldr	r1, [pc, #660]	@ (80063e0 <processRFID+0x364>)
 800614a:	f005 ff8f 	bl	800c06c <siprintf>
                        ascii_string[i] = (readData[i] >= 32 && readData[i] <= 126) ? (char)readData[i] : '.';
 800614e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8006152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006156:	4413      	add	r3, r2
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b1f      	cmp	r3, #31
 800615c:	d90e      	bls.n	800617c <processRFID+0x100>
 800615e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8006162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006166:	4413      	add	r3, r2
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b7e      	cmp	r3, #126	@ 0x7e
 800616c:	d806      	bhi.n	800617c <processRFID+0x100>
 800616e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8006172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006176:	4413      	add	r3, r2
 8006178:	7819      	ldrb	r1, [r3, #0]
 800617a:	e000      	b.n	800617e <processRFID+0x102>
 800617c:	212e      	movs	r1, #46	@ 0x2e
 800617e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8006182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006186:	4413      	add	r3, r2
 8006188:	460a      	mov	r2, r1
 800618a:	701a      	strb	r2, [r3, #0]
                    for (int i = 0; i < 16; i++)
 800618c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006190:	3301      	adds	r3, #1
 8006192:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800619a:	2b0f      	cmp	r3, #15
 800619c:	ddc6      	ble.n	800612c <processRFID+0xb0>
                    }
                    ascii_string[16] = '\0';
 800619e:	2300      	movs	r3, #0
 80061a0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

                    char formatted_ascii[4] = "   ";
 80061a4:	4b8f      	ldr	r3, [pc, #572]	@ (80063e4 <processRFID+0x368>)
 80061a6:	633b      	str	r3, [r7, #48]	@ 0x30
                    formatted_ascii[0] = ascii_string[0];
 80061a8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80061ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
                    formatted_ascii[2] = ascii_string[2];
 80061b0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061b4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
                    formatted_ascii[3] = '\0';
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

                    int is_duplicate = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                    for (int i = 0; i < data_count; i++)
 80061c4:	2300      	movs	r3, #0
 80061c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80061ca:	e0b6      	b.n	800633a <processRFID+0x2be>
                    {
                        char **split = ft_split(formatted_ascii, ' ');
 80061cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80061d0:	2120      	movs	r1, #32
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fdd0 	bl	8005d78 <ft_split>
 80061d8:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        if (split && split[0] && split[1])
 80061dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d07f      	beq.n	80062e4 <processRFID+0x268>
 80061e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d07a      	beq.n	80062e4 <processRFID+0x268>
 80061ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061f2:	3304      	adds	r3, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d074      	beq.n	80062e4 <processRFID+0x268>
                        {
                            if (strcmp(stored_data[i].suit, split[0]) == 0 && strcmp(stored_data[i].rank, split[1]) == 0)
 80061fa:	497b      	ldr	r1, [pc, #492]	@ (80063e8 <processRFID+0x36c>)
 80061fc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	3304      	adds	r3, #4
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4619      	mov	r1, r3
 8006216:	4610      	mov	r0, r2
 8006218:	f7fa f86a 	bl	80002f0 <strcmp>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d13a      	bne.n	8006298 <processRFID+0x21c>
 8006222:	4971      	ldr	r1, [pc, #452]	@ (80063e8 <processRFID+0x36c>)
 8006224:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006238:	3304      	adds	r3, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4619      	mov	r1, r3
 800623e:	4610      	mov	r0, r2
 8006240:	f7fa f856 	bl	80002f0 <strcmp>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d126      	bne.n	8006298 <processRFID+0x21c>
                            {
                                is_duplicate = 1;
 800624a:	2301      	movs	r3, #1
 800624c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                                debug_print("Duplicate card detected");
 8006250:	4866      	ldr	r0, [pc, #408]	@ (80063ec <processRFID+0x370>)
 8006252:	f7ff fccd 	bl	8005bf0 <debug_print>
                                for (int j = 0; split[j] != NULL; j++)
 8006256:	2300      	movs	r3, #0
 8006258:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800625c:	e00e      	b.n	800627c <processRFID+0x200>
                                {
                                    free(split[j]);
 800625e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8006268:	4413      	add	r3, r2
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f005 fa79 	bl	800b764 <free>
                                for (int j = 0; split[j] != NULL; j++)
 8006272:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006276:	3301      	adds	r3, #1
 8006278:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800627c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8006286:	4413      	add	r3, r2
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e7      	bne.n	800625e <processRFID+0x1e2>
                                }
                                free(split);
 800628e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8006292:	f005 fa67 	bl	800b764 <free>
                                break;
 8006296:	e057      	b.n	8006348 <processRFID+0x2cc>
                            }
                            for (int j = 0; split[j] != NULL; j++)
 8006298:	2300      	movs	r3, #0
 800629a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800629e:	e00e      	b.n	80062be <processRFID+0x242>
                            {
                                free(split[j]);
 80062a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80062aa:	4413      	add	r3, r2
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f005 fa58 	bl	800b764 <free>
                            for (int j = 0; split[j] != NULL; j++)
 80062b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80062b8:	3301      	adds	r3, #1
 80062ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80062c8:	4413      	add	r3, r2
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e7      	bne.n	80062a0 <processRFID+0x224>
                            }
                            free(split);
 80062d0:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80062d4:	f005 fa46 	bl	800b764 <free>
                    for (int i = 0; i < data_count; i++)
 80062d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80062dc:	3301      	adds	r3, #1
 80062de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062e2:	e02a      	b.n	800633a <processRFID+0x2be>
                        }
                        else
                        {
                            debug_print("Error: Invalid card data format");
 80062e4:	4842      	ldr	r0, [pc, #264]	@ (80063f0 <processRFID+0x374>)
 80062e6:	f7ff fc83 	bl	8005bf0 <debug_print>
                            if (split)
 80062ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d01f      	beq.n	8006332 <processRFID+0x2b6>
                            {
                                for (int j = 0; split[j] != NULL; j++)
 80062f2:	2300      	movs	r3, #0
 80062f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062f8:	e00e      	b.n	8006318 <processRFID+0x29c>
                                {
                                    free(split[j]);
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8006304:	4413      	add	r3, r2
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f005 fa2b 	bl	800b764 <free>
                                for (int j = 0; split[j] != NULL; j++)
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006312:	3301      	adds	r3, #1
 8006314:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8006322:	4413      	add	r3, r2
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e7      	bne.n	80062fa <processRFID+0x27e>
                                }
                                free(split);
 800632a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800632e:	f005 fa19 	bl	800b764 <free>
                            }
                            is_duplicate = 1;
 8006332:	2301      	movs	r3, #1
 8006334:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                            break;
 8006338:	e006      	b.n	8006348 <processRFID+0x2cc>
                    for (int i = 0; i < data_count; i++)
 800633a:	4b27      	ldr	r3, [pc, #156]	@ (80063d8 <processRFID+0x35c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8006342:	429a      	cmp	r2, r3
 8006344:	f6ff af42 	blt.w	80061cc <processRFID+0x150>
                        }
                    }

                    if (is_duplicate)
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d006      	beq.n	800635e <processRFID+0x2e2>
                    {
                        debug_print("Duplicate card detected");
 8006350:	4826      	ldr	r0, [pc, #152]	@ (80063ec <processRFID+0x370>)
 8006352:	f7ff fc4d 	bl	8005bf0 <debug_print>
                        display_status_led(STATUS_FAILURE);
 8006356:	2000      	movs	r0, #0
 8006358:	f7ff fe5e 	bl	8006018 <display_status_led>
 800635c:	e0ab      	b.n	80064b6 <processRFID+0x43a>
                    }
                    else
                    {
                        if (data_count < maxEntries)
 800635e:	79fa      	ldrb	r2, [r7, #7]
 8006360:	4b1d      	ldr	r3, [pc, #116]	@ (80063d8 <processRFID+0x35c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	f340 80a6 	ble.w	80064b6 <processRFID+0x43a>
                        {
                            Card *parsedCard = parseCardFromString(formatted_ascii);
 800636a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fd90 	bl	8005e94 <parseCardFromString>
 8006374:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
                            if (parsedCard != NULL)
 8006378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 808d 	beq.w	800649c <processRFID+0x420>
                            {
                                memcpy(&stored_data[data_count], parsedCard, sizeof(Card));
 8006382:	4b15      	ldr	r3, [pc, #84]	@ (80063d8 <processRFID+0x35c>)
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4a16      	ldr	r2, [pc, #88]	@ (80063e8 <processRFID+0x36c>)
 8006390:	4413      	add	r3, r2
 8006392:	2214      	movs	r2, #20
 8006394:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8006398:	4618      	mov	r0, r3
 800639a:	f006 feba 	bl	800d112 <memcpy>
                                display_status_led(STATUS_SUCCESS);
 800639e:	2001      	movs	r0, #1
 80063a0:	f7ff fe3a 	bl	8006018 <display_status_led>
                                data_count++;
 80063a4:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <processRFID+0x35c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	4a0b      	ldr	r2, [pc, #44]	@ (80063d8 <processRFID+0x35c>)
 80063ac:	6013      	str	r3, [r2, #0]

                                if (data_count == maxEntries)
 80063ae:	79fa      	ldrb	r2, [r7, #7]
 80063b0:	4b09      	ldr	r3, [pc, #36]	@ (80063d8 <processRFID+0x35c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d16c      	bne.n	8006492 <processRFID+0x416>
                                {
                                    debug_print("Array full. Displaying all entries:");
 80063b8:	480e      	ldr	r0, [pc, #56]	@ (80063f4 <processRFID+0x378>)
 80063ba:	f7ff fc19 	bl	8005bf0 <debug_print>
                                    for (int i = 0; i < maxEntries; i++)
 80063be:	2300      	movs	r3, #0
 80063c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063c4:	e05a      	b.n	800647c <processRFID+0x400>
 80063c6:	bf00      	nop
 80063c8:	08010108 	.word	0x08010108
 80063cc:	08010124 	.word	0x08010124
 80063d0:	08010138 	.word	0x08010138
 80063d4:	0801014c 	.word	0x0801014c
 80063d8:	20000680 	.word	0x20000680
 80063dc:	0801015c 	.word	0x0801015c
 80063e0:	080100c0 	.word	0x080100c0
 80063e4:	00202020 	.word	0x00202020
 80063e8:	200005b8 	.word	0x200005b8
 80063ec:	08010174 	.word	0x08010174
 80063f0:	0801018c 	.word	0x0801018c
 80063f4:	080101ac 	.word	0x080101ac
                                    {
                                        snprintf(message, sizeof(message), "Card %d: %s of %s", i + 1, stored_data[i].rank, stored_data[i].suit);
 80063f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063fc:	1c5c      	adds	r4, r3, #1
 80063fe:	493b      	ldr	r1, [pc, #236]	@ (80064ec <processRFID+0x470>)
 8006400:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	6819      	ldr	r1, [r3, #0]
 8006410:	4836      	ldr	r0, [pc, #216]	@ (80064ec <processRFID+0x470>)
 8006412:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4403      	add	r3, r0
 8006420:	3304      	adds	r3, #4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	9100      	str	r1, [sp, #0]
 800642c:	4623      	mov	r3, r4
 800642e:	4a30      	ldr	r2, [pc, #192]	@ (80064f0 <processRFID+0x474>)
 8006430:	2164      	movs	r1, #100	@ 0x64
 8006432:	f005 fddb 	bl	800bfec <sniprintf>
                                        debug_print(message);
 8006436:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff fbd8 	bl	8005bf0 <debug_print>
                                        memcpy(&deck[i], &stored_data[i], sizeof(Card));
 8006440:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	461a      	mov	r2, r3
 800644e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8006452:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	1898      	adds	r0, r3, r2
 800645a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800645e:	4613      	mov	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4a21      	ldr	r2, [pc, #132]	@ (80064ec <processRFID+0x470>)
 8006468:	4413      	add	r3, r2
 800646a:	2214      	movs	r2, #20
 800646c:	4619      	mov	r1, r3
 800646e:	f006 fe50 	bl	800d112 <memcpy>
                                    for (int i = 0; i < maxEntries; i++)
 8006472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006476:	3301      	adds	r3, #1
 8006478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006482:	429a      	cmp	r2, r3
 8006484:	dbb8      	blt.n	80063f8 <processRFID+0x37c>
                                    }
                                    isFinish = 1;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
                                    data_count = 0;
 800648c:	4b19      	ldr	r3, [pc, #100]	@ (80064f4 <processRFID+0x478>)
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
                                }
                                free(parsedCard);
 8006492:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8006496:	f005 f965 	bl	800b764 <free>
 800649a:	e00c      	b.n	80064b6 <processRFID+0x43a>
                            }
                            else
                            {
                                debug_print("Failed to parse card data");
 800649c:	4816      	ldr	r0, [pc, #88]	@ (80064f8 <processRFID+0x47c>)
 800649e:	f7ff fba7 	bl	8005bf0 <debug_print>
                                display_status_led(STATUS_FAILURE);
 80064a2:	2000      	movs	r0, #0
 80064a4:	f7ff fdb8 	bl	8006018 <display_status_led>
 80064a8:	e005      	b.n	80064b6 <processRFID+0x43a>
                        }
                    }
                }
                else
                {
                    debug_print("Failed to read data from card");
 80064aa:	4814      	ldr	r0, [pc, #80]	@ (80064fc <processRFID+0x480>)
 80064ac:	f7ff fba0 	bl	8005bf0 <debug_print>
                    display_status_led(STATUS_FAILURE);
 80064b0:	2000      	movs	r0, #0
 80064b2:	f7ff fdb1 	bl	8006018 <display_status_led>
                }

                MFRC522_Halt();
 80064b6:	f7fb faf1 	bl	8001a9c <MFRC522_Halt>
 80064ba:	e005      	b.n	80064c8 <processRFID+0x44c>
            }
            else
            {
                debug_print("Anticollision failed");
 80064bc:	4810      	ldr	r0, [pc, #64]	@ (8006500 <processRFID+0x484>)
 80064be:	f7ff fb97 	bl	8005bf0 <debug_print>
                display_status_led(STATUS_FAILURE);
 80064c2:	2000      	movs	r0, #0
 80064c4:	f7ff fda8 	bl	8006018 <display_status_led>
            }

            HAL_Delay(1000);
 80064c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80064cc:	f000 f880 	bl	80065d0 <HAL_Delay>
        }

        HAL_Delay(100);
 80064d0:	2064      	movs	r0, #100	@ 0x64
 80064d2:	f000 f87d 	bl	80065d0 <HAL_Delay>
    while (!isFinish)
 80064d6:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f43f ade8 	beq.w	80060b0 <processRFID+0x34>
    }
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd90      	pop	{r4, r7, pc}
 80064ec:	200005b8 	.word	0x200005b8
 80064f0:	080101d0 	.word	0x080101d0
 80064f4:	20000680 	.word	0x20000680
 80064f8:	080101e4 	.word	0x080101e4
 80064fc:	08010200 	.word	0x08010200
 8006500:	08010220 	.word	0x08010220

08006504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006508:	4b08      	ldr	r3, [pc, #32]	@ (800652c <HAL_Init+0x28>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a07      	ldr	r2, [pc, #28]	@ (800652c <HAL_Init+0x28>)
 800650e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006514:	2003      	movs	r0, #3
 8006516:	f000 fd49 	bl	8006fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800651a:	2000      	movs	r0, #0
 800651c:	f000 f808 	bl	8006530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006520:	f7fb fc50 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	40023c00 	.word	0x40023c00

08006530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006538:	4b12      	ldr	r3, [pc, #72]	@ (8006584 <HAL_InitTick+0x54>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	4b12      	ldr	r3, [pc, #72]	@ (8006588 <HAL_InitTick+0x58>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	4619      	mov	r1, r3
 8006542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006546:	fbb3 f3f1 	udiv	r3, r3, r1
 800654a:	fbb2 f3f3 	udiv	r3, r2, r3
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fd61 	bl	8007016 <HAL_SYSTICK_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e00e      	b.n	800657c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b0f      	cmp	r3, #15
 8006562:	d80a      	bhi.n	800657a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006564:	2200      	movs	r2, #0
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800656c:	f000 fd29 	bl	8006fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006570:	4a06      	ldr	r2, [pc, #24]	@ (800658c <HAL_InitTick+0x5c>)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	e000      	b.n	800657c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	2000000c 	.word	0x2000000c
 8006588:	20000084 	.word	0x20000084
 800658c:	20000080 	.word	0x20000080

08006590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006594:	4b06      	ldr	r3, [pc, #24]	@ (80065b0 <HAL_IncTick+0x20>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	4b06      	ldr	r3, [pc, #24]	@ (80065b4 <HAL_IncTick+0x24>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4413      	add	r3, r2
 80065a0:	4a04      	ldr	r2, [pc, #16]	@ (80065b4 <HAL_IncTick+0x24>)
 80065a2:	6013      	str	r3, [r2, #0]
}
 80065a4:	bf00      	nop
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000084 	.word	0x20000084
 80065b4:	20000684 	.word	0x20000684

080065b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
  return uwTick;
 80065bc:	4b03      	ldr	r3, [pc, #12]	@ (80065cc <HAL_GetTick+0x14>)
 80065be:	681b      	ldr	r3, [r3, #0]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20000684 	.word	0x20000684

080065d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065d8:	f7ff ffee 	bl	80065b8 <HAL_GetTick>
 80065dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065e8:	d005      	beq.n	80065f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006614 <HAL_Delay+0x44>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80065f6:	bf00      	nop
 80065f8:	f7ff ffde 	bl	80065b8 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	429a      	cmp	r2, r3
 8006606:	d8f7      	bhi.n	80065f8 <HAL_Delay+0x28>
  {
  }
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000084 	.word	0x20000084

08006618 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e031      	b.n	8006692 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fa fac8 	bl	8000bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664e:	f003 0310 	and.w	r3, r3, #16
 8006652:	2b00      	cmp	r3, #0
 8006654:	d116      	bne.n	8006684 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800665a:	4b10      	ldr	r3, [pc, #64]	@ (800669c <HAL_ADC_Init+0x84>)
 800665c:	4013      	ands	r3, r2
 800665e:	f043 0202 	orr.w	r2, r3, #2
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fad6 	bl	8006c18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	f043 0201 	orr.w	r2, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	641a      	str	r2, [r3, #64]	@ 0x40
 8006682:	e001      	b.n	8006688 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006690:	7bfb      	ldrb	r3, [r7, #15]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	ffffeefd 	.word	0xffffeefd

080066a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_ADC_Start+0x1a>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e0ad      	b.n	8006816 <HAL_ADC_Start+0x176>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d018      	beq.n	8006702 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80066e0:	4b50      	ldr	r3, [pc, #320]	@ (8006824 <HAL_ADC_Start+0x184>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a50      	ldr	r2, [pc, #320]	@ (8006828 <HAL_ADC_Start+0x188>)
 80066e6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ea:	0c9a      	lsrs	r2, r3, #18
 80066ec:	4613      	mov	r3, r2
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	4413      	add	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80066f4:	e002      	b.n	80066fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f9      	bne.n	80066f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b01      	cmp	r3, #1
 800670e:	d175      	bne.n	80067fc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006714:	4b45      	ldr	r3, [pc, #276]	@ (800682c <HAL_ADC_Start+0x18c>)
 8006716:	4013      	ands	r3, r2
 8006718:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006732:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006736:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674a:	d106      	bne.n	800675a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006750:	f023 0206 	bic.w	r2, r3, #6
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	645a      	str	r2, [r3, #68]	@ 0x44
 8006758:	e002      	b.n	8006760 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006770:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006772:	4b2f      	ldr	r3, [pc, #188]	@ (8006830 <HAL_ADC_Start+0x190>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10f      	bne.n	800679e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d143      	bne.n	8006814 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800679a:	609a      	str	r2, [r3, #8]
 800679c:	e03a      	b.n	8006814 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a24      	ldr	r2, [pc, #144]	@ (8006834 <HAL_ADC_Start+0x194>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d10e      	bne.n	80067c6 <HAL_ADC_Start+0x126>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d107      	bne.n	80067c6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80067c4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80067c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006830 <HAL_ADC_Start+0x190>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f003 0310 	and.w	r3, r3, #16
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d120      	bne.n	8006814 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a18      	ldr	r2, [pc, #96]	@ (8006838 <HAL_ADC_Start+0x198>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d11b      	bne.n	8006814 <HAL_ADC_Start+0x174>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d114      	bne.n	8006814 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80067f8:	609a      	str	r2, [r3, #8]
 80067fa:	e00b      	b.n	8006814 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006800:	f043 0210 	orr.w	r2, r3, #16
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800680c:	f043 0201 	orr.w	r2, r3, #1
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	2000000c 	.word	0x2000000c
 8006828:	431bde83 	.word	0x431bde83
 800682c:	fffff8fe 	.word	0xfffff8fe
 8006830:	40012300 	.word	0x40012300
 8006834:	40012000 	.word	0x40012000
 8006838:	40012200 	.word	0x40012200

0800683c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006858:	d113      	bne.n	8006882 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006868:	d10b      	bne.n	8006882 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e063      	b.n	800694a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006882:	f7ff fe99 	bl	80065b8 <HAL_GetTick>
 8006886:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006888:	e021      	b.n	80068ce <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006890:	d01d      	beq.n	80068ce <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <HAL_ADC_PollForConversion+0x6c>
 8006898:	f7ff fe8e 	bl	80065b8 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d212      	bcs.n	80068ce <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d00b      	beq.n	80068ce <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ba:	f043 0204 	orr.w	r2, r3, #4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e03d      	b.n	800694a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d1d6      	bne.n	800688a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0212 	mvn.w	r2, #18
 80068e4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d123      	bne.n	8006948 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11f      	bne.n	8006948 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006912:	2b00      	cmp	r3, #0
 8006914:	d006      	beq.n	8006924 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006920:	2b00      	cmp	r3, #0
 8006922:	d111      	bne.n	8006948 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006928:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006934:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006940:	f043 0201 	orr.w	r2, r3, #1
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_ADC_ConfigChannel+0x1c>
 8006984:	2302      	movs	r3, #2
 8006986:	e136      	b.n	8006bf6 <HAL_ADC_ConfigChannel+0x28a>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b09      	cmp	r3, #9
 8006996:	d93a      	bls.n	8006a0e <HAL_ADC_ConfigChannel+0xa2>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069a0:	d035      	beq.n	8006a0e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68d9      	ldr	r1, [r3, #12]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	4613      	mov	r3, r2
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	4413      	add	r3, r2
 80069b6:	3b1e      	subs	r3, #30
 80069b8:	2207      	movs	r2, #7
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	43da      	mvns	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	400a      	ands	r2, r1
 80069c6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a8d      	ldr	r2, [pc, #564]	@ (8006c04 <HAL_ADC_ConfigChannel+0x298>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d10a      	bne.n	80069e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68d9      	ldr	r1, [r3, #12]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	061a      	lsls	r2, r3, #24
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069e6:	e035      	b.n	8006a54 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68d9      	ldr	r1, [r3, #12]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	4618      	mov	r0, r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4403      	add	r3, r0
 8006a00:	3b1e      	subs	r3, #30
 8006a02:	409a      	lsls	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a0c:	e022      	b.n	8006a54 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6919      	ldr	r1, [r3, #16]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	4413      	add	r3, r2
 8006a22:	2207      	movs	r2, #7
 8006a24:	fa02 f303 	lsl.w	r3, r2, r3
 8006a28:	43da      	mvns	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	400a      	ands	r2, r1
 8006a30:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6919      	ldr	r1, [r3, #16]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	4618      	mov	r0, r3
 8006a44:	4603      	mov	r3, r0
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4403      	add	r3, r0
 8006a4a:	409a      	lsls	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b06      	cmp	r3, #6
 8006a5a:	d824      	bhi.n	8006aa6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3b05      	subs	r3, #5
 8006a6e:	221f      	movs	r2, #31
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	43da      	mvns	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	400a      	ands	r2, r1
 8006a7c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	3b05      	subs	r3, #5
 8006a98:	fa00 f203 	lsl.w	r2, r0, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	635a      	str	r2, [r3, #52]	@ 0x34
 8006aa4:	e04c      	b.n	8006b40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2b0c      	cmp	r3, #12
 8006aac:	d824      	bhi.n	8006af8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	3b23      	subs	r3, #35	@ 0x23
 8006ac0:	221f      	movs	r2, #31
 8006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac6:	43da      	mvns	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	400a      	ands	r2, r1
 8006ace:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	4618      	mov	r0, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	3b23      	subs	r3, #35	@ 0x23
 8006aea:	fa00 f203 	lsl.w	r2, r0, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006af6:	e023      	b.n	8006b40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	3b41      	subs	r3, #65	@ 0x41
 8006b0a:	221f      	movs	r2, #31
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	43da      	mvns	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	400a      	ands	r2, r1
 8006b18:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	4618      	mov	r0, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	3b41      	subs	r3, #65	@ 0x41
 8006b34:	fa00 f203 	lsl.w	r2, r0, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a30      	ldr	r2, [pc, #192]	@ (8006c08 <HAL_ADC_ConfigChannel+0x29c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d10a      	bne.n	8006b60 <HAL_ADC_ConfigChannel+0x1f4>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b52:	d105      	bne.n	8006b60 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006b54:	4b2d      	ldr	r3, [pc, #180]	@ (8006c0c <HAL_ADC_ConfigChannel+0x2a0>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	4a2c      	ldr	r2, [pc, #176]	@ (8006c0c <HAL_ADC_ConfigChannel+0x2a0>)
 8006b5a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8006b5e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a28      	ldr	r2, [pc, #160]	@ (8006c08 <HAL_ADC_ConfigChannel+0x29c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d10f      	bne.n	8006b8a <HAL_ADC_ConfigChannel+0x21e>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b12      	cmp	r3, #18
 8006b70:	d10b      	bne.n	8006b8a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006b72:	4b26      	ldr	r3, [pc, #152]	@ (8006c0c <HAL_ADC_ConfigChannel+0x2a0>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	4a25      	ldr	r2, [pc, #148]	@ (8006c0c <HAL_ADC_ConfigChannel+0x2a0>)
 8006b78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006b7c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006b7e:	4b23      	ldr	r3, [pc, #140]	@ (8006c0c <HAL_ADC_ConfigChannel+0x2a0>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	4a22      	ldr	r2, [pc, #136]	@ (8006c0c <HAL_ADC_ConfigChannel+0x2a0>)
 8006b84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006b88:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006c08 <HAL_ADC_ConfigChannel+0x29c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d12b      	bne.n	8006bec <HAL_ADC_ConfigChannel+0x280>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1a      	ldr	r2, [pc, #104]	@ (8006c04 <HAL_ADC_ConfigChannel+0x298>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d003      	beq.n	8006ba6 <HAL_ADC_ConfigChannel+0x23a>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b11      	cmp	r3, #17
 8006ba4:	d122      	bne.n	8006bec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006ba6:	4b19      	ldr	r3, [pc, #100]	@ (8006c0c <HAL_ADC_ConfigChannel+0x2a0>)
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4a18      	ldr	r2, [pc, #96]	@ (8006c0c <HAL_ADC_ConfigChannel+0x2a0>)
 8006bac:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006bb0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006bb2:	4b16      	ldr	r3, [pc, #88]	@ (8006c0c <HAL_ADC_ConfigChannel+0x2a0>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	4a15      	ldr	r2, [pc, #84]	@ (8006c0c <HAL_ADC_ConfigChannel+0x2a0>)
 8006bb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006bbc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a10      	ldr	r2, [pc, #64]	@ (8006c04 <HAL_ADC_ConfigChannel+0x298>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d111      	bne.n	8006bec <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006bc8:	4b11      	ldr	r3, [pc, #68]	@ (8006c10 <HAL_ADC_ConfigChannel+0x2a4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a11      	ldr	r2, [pc, #68]	@ (8006c14 <HAL_ADC_ConfigChannel+0x2a8>)
 8006bce:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd2:	0c9a      	lsrs	r2, r3, #18
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006bde:	e002      	b.n	8006be6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f9      	bne.n	8006be0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	10000012 	.word	0x10000012
 8006c08:	40012000 	.word	0x40012000
 8006c0c:	40012300 	.word	0x40012300
 8006c10:	2000000c 	.word	0x2000000c
 8006c14:	431bde83 	.word	0x431bde83

08006c18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006c20:	4b78      	ldr	r3, [pc, #480]	@ (8006e04 <ADC_Init+0x1ec>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	4a77      	ldr	r2, [pc, #476]	@ (8006e04 <ADC_Init+0x1ec>)
 8006c26:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006c2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006c2c:	4b75      	ldr	r3, [pc, #468]	@ (8006e04 <ADC_Init+0x1ec>)
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	4973      	ldr	r1, [pc, #460]	@ (8006e04 <ADC_Init+0x1ec>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6859      	ldr	r1, [r3, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	021a      	lsls	r2, r3, #8
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6859      	ldr	r1, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6899      	ldr	r1, [r3, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca6:	4a58      	ldr	r2, [pc, #352]	@ (8006e08 <ADC_Init+0x1f0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d022      	beq.n	8006cf2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689a      	ldr	r2, [r3, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006cba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6899      	ldr	r1, [r3, #8]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6899      	ldr	r1, [r3, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	609a      	str	r2, [r3, #8]
 8006cf0:	e00f      	b.n	8006d12 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006d10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0202 	bic.w	r2, r2, #2
 8006d20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6899      	ldr	r1, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	005a      	lsls	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01b      	beq.n	8006d78 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006d5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6859      	ldr	r1, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	035a      	lsls	r2, r3, #13
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
 8006d76:	e007      	b.n	8006d88 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	051a      	lsls	r2, r3, #20
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006dbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6899      	ldr	r1, [r3, #8]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006dca:	025a      	lsls	r2, r3, #9
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006de2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6899      	ldr	r1, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	029a      	lsls	r2, r3, #10
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	609a      	str	r2, [r3, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	40012300 	.word	0x40012300
 8006e08:	0f000001 	.word	0x0f000001

08006e0c <__NVIC_SetPriorityGrouping>:
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e4c <__NVIC_SetPriorityGrouping+0x40>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006e28:	4013      	ands	r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006e34:	4b06      	ldr	r3, [pc, #24]	@ (8006e50 <__NVIC_SetPriorityGrouping+0x44>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e3a:	4a04      	ldr	r2, [pc, #16]	@ (8006e4c <__NVIC_SetPriorityGrouping+0x40>)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	60d3      	str	r3, [r2, #12]
}
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	e000ed00 	.word	0xe000ed00
 8006e50:	05fa0000 	.word	0x05fa0000

08006e54 <__NVIC_GetPriorityGrouping>:
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e58:	4b04      	ldr	r3, [pc, #16]	@ (8006e6c <__NVIC_GetPriorityGrouping+0x18>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	f003 0307 	and.w	r3, r3, #7
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	e000ed00 	.word	0xe000ed00

08006e70 <__NVIC_EnableIRQ>:
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	db0b      	blt.n	8006e9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	f003 021f 	and.w	r2, r3, #31
 8006e88:	4907      	ldr	r1, [pc, #28]	@ (8006ea8 <__NVIC_EnableIRQ+0x38>)
 8006e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	2001      	movs	r0, #1
 8006e92:	fa00 f202 	lsl.w	r2, r0, r2
 8006e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	e000e100 	.word	0xe000e100

08006eac <__NVIC_SetPriority>:
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	db0a      	blt.n	8006ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	490c      	ldr	r1, [pc, #48]	@ (8006ef8 <__NVIC_SetPriority+0x4c>)
 8006ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eca:	0112      	lsls	r2, r2, #4
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	440b      	add	r3, r1
 8006ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006ed4:	e00a      	b.n	8006eec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	4908      	ldr	r1, [pc, #32]	@ (8006efc <__NVIC_SetPriority+0x50>)
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	3b04      	subs	r3, #4
 8006ee4:	0112      	lsls	r2, r2, #4
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	440b      	add	r3, r1
 8006eea:	761a      	strb	r2, [r3, #24]
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	e000e100 	.word	0xe000e100
 8006efc:	e000ed00 	.word	0xe000ed00

08006f00 <NVIC_EncodePriority>:
{
 8006f00:	b480      	push	{r7}
 8006f02:	b089      	sub	sp, #36	@ 0x24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f1c3 0307 	rsb	r3, r3, #7
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	bf28      	it	cs
 8006f1e:	2304      	movcs	r3, #4
 8006f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	3304      	adds	r3, #4
 8006f26:	2b06      	cmp	r3, #6
 8006f28:	d902      	bls.n	8006f30 <NVIC_EncodePriority+0x30>
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	3b03      	subs	r3, #3
 8006f2e:	e000      	b.n	8006f32 <NVIC_EncodePriority+0x32>
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3e:	43da      	mvns	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	401a      	ands	r2, r3
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f52:	43d9      	mvns	r1, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f58:	4313      	orrs	r3, r2
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3724      	adds	r7, #36	@ 0x24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f78:	d301      	bcc.n	8006f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e00f      	b.n	8006f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8006fa8 <SysTick_Config+0x40>)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f86:	210f      	movs	r1, #15
 8006f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f8c:	f7ff ff8e 	bl	8006eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f90:	4b05      	ldr	r3, [pc, #20]	@ (8006fa8 <SysTick_Config+0x40>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f96:	4b04      	ldr	r3, [pc, #16]	@ (8006fa8 <SysTick_Config+0x40>)
 8006f98:	2207      	movs	r2, #7
 8006f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	e000e010 	.word	0xe000e010

08006fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff ff29 	bl	8006e0c <__NVIC_SetPriorityGrouping>
}
 8006fba:	bf00      	nop
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b086      	sub	sp, #24
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	4603      	mov	r3, r0
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
 8006fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fd4:	f7ff ff3e 	bl	8006e54 <__NVIC_GetPriorityGrouping>
 8006fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	6978      	ldr	r0, [r7, #20]
 8006fe0:	f7ff ff8e 	bl	8006f00 <NVIC_EncodePriority>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fea:	4611      	mov	r1, r2
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff ff5d 	bl	8006eac <__NVIC_SetPriority>
}
 8006ff2:	bf00      	nop
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	4603      	mov	r3, r0
 8007002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007008:	4618      	mov	r0, r3
 800700a:	f7ff ff31 	bl	8006e70 <__NVIC_EnableIRQ>
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff ffa2 	bl	8006f68 <SysTick_Config>
 8007024:	4603      	mov	r3, r0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007030:	b480      	push	{r7}
 8007032:	b089      	sub	sp, #36	@ 0x24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007046:	2300      	movs	r3, #0
 8007048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	e175      	b.n	800733c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007050:	2201      	movs	r2, #1
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	fa02 f303 	lsl.w	r3, r2, r3
 8007058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4013      	ands	r3, r2
 8007062:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	429a      	cmp	r2, r3
 800706a:	f040 8164 	bne.w	8007336 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	2b01      	cmp	r3, #1
 8007078:	d005      	beq.n	8007086 <HAL_GPIO_Init+0x56>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d130      	bne.n	80070e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	2203      	movs	r2, #3
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	43db      	mvns	r3, r3
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	4013      	ands	r3, r2
 800709c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070bc:	2201      	movs	r2, #1
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	43db      	mvns	r3, r3
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4013      	ands	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	f003 0201 	and.w	r2, r3, #1
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	4313      	orrs	r3, r2
 80070e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d017      	beq.n	8007124 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	2203      	movs	r2, #3
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	43db      	mvns	r3, r3
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	4013      	ands	r3, r2
 800710a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	fa02 f303 	lsl.w	r3, r2, r3
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	4313      	orrs	r3, r2
 800711c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d123      	bne.n	8007178 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	08da      	lsrs	r2, r3, #3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3208      	adds	r2, #8
 8007138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	220f      	movs	r2, #15
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	43db      	mvns	r3, r3
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	4013      	ands	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	4313      	orrs	r3, r2
 8007168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	08da      	lsrs	r2, r3, #3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3208      	adds	r2, #8
 8007172:	69b9      	ldr	r1, [r7, #24]
 8007174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	2203      	movs	r2, #3
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	43db      	mvns	r3, r3
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	4013      	ands	r3, r2
 800718e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f003 0203 	and.w	r2, r3, #3
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 80be 	beq.w	8007336 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ba:	4b66      	ldr	r3, [pc, #408]	@ (8007354 <HAL_GPIO_Init+0x324>)
 80071bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071be:	4a65      	ldr	r2, [pc, #404]	@ (8007354 <HAL_GPIO_Init+0x324>)
 80071c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80071c6:	4b63      	ldr	r3, [pc, #396]	@ (8007354 <HAL_GPIO_Init+0x324>)
 80071c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80071d2:	4a61      	ldr	r2, [pc, #388]	@ (8007358 <HAL_GPIO_Init+0x328>)
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	089b      	lsrs	r3, r3, #2
 80071d8:	3302      	adds	r3, #2
 80071da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	220f      	movs	r2, #15
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	43db      	mvns	r3, r3
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	4013      	ands	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a58      	ldr	r2, [pc, #352]	@ (800735c <HAL_GPIO_Init+0x32c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d037      	beq.n	800726e <HAL_GPIO_Init+0x23e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a57      	ldr	r2, [pc, #348]	@ (8007360 <HAL_GPIO_Init+0x330>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d031      	beq.n	800726a <HAL_GPIO_Init+0x23a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a56      	ldr	r2, [pc, #344]	@ (8007364 <HAL_GPIO_Init+0x334>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d02b      	beq.n	8007266 <HAL_GPIO_Init+0x236>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a55      	ldr	r2, [pc, #340]	@ (8007368 <HAL_GPIO_Init+0x338>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d025      	beq.n	8007262 <HAL_GPIO_Init+0x232>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a54      	ldr	r2, [pc, #336]	@ (800736c <HAL_GPIO_Init+0x33c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d01f      	beq.n	800725e <HAL_GPIO_Init+0x22e>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a53      	ldr	r2, [pc, #332]	@ (8007370 <HAL_GPIO_Init+0x340>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d019      	beq.n	800725a <HAL_GPIO_Init+0x22a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a52      	ldr	r2, [pc, #328]	@ (8007374 <HAL_GPIO_Init+0x344>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <HAL_GPIO_Init+0x226>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a51      	ldr	r2, [pc, #324]	@ (8007378 <HAL_GPIO_Init+0x348>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00d      	beq.n	8007252 <HAL_GPIO_Init+0x222>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a50      	ldr	r2, [pc, #320]	@ (800737c <HAL_GPIO_Init+0x34c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d007      	beq.n	800724e <HAL_GPIO_Init+0x21e>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a4f      	ldr	r2, [pc, #316]	@ (8007380 <HAL_GPIO_Init+0x350>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d101      	bne.n	800724a <HAL_GPIO_Init+0x21a>
 8007246:	2309      	movs	r3, #9
 8007248:	e012      	b.n	8007270 <HAL_GPIO_Init+0x240>
 800724a:	230a      	movs	r3, #10
 800724c:	e010      	b.n	8007270 <HAL_GPIO_Init+0x240>
 800724e:	2308      	movs	r3, #8
 8007250:	e00e      	b.n	8007270 <HAL_GPIO_Init+0x240>
 8007252:	2307      	movs	r3, #7
 8007254:	e00c      	b.n	8007270 <HAL_GPIO_Init+0x240>
 8007256:	2306      	movs	r3, #6
 8007258:	e00a      	b.n	8007270 <HAL_GPIO_Init+0x240>
 800725a:	2305      	movs	r3, #5
 800725c:	e008      	b.n	8007270 <HAL_GPIO_Init+0x240>
 800725e:	2304      	movs	r3, #4
 8007260:	e006      	b.n	8007270 <HAL_GPIO_Init+0x240>
 8007262:	2303      	movs	r3, #3
 8007264:	e004      	b.n	8007270 <HAL_GPIO_Init+0x240>
 8007266:	2302      	movs	r3, #2
 8007268:	e002      	b.n	8007270 <HAL_GPIO_Init+0x240>
 800726a:	2301      	movs	r3, #1
 800726c:	e000      	b.n	8007270 <HAL_GPIO_Init+0x240>
 800726e:	2300      	movs	r3, #0
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	f002 0203 	and.w	r2, r2, #3
 8007276:	0092      	lsls	r2, r2, #2
 8007278:	4093      	lsls	r3, r2
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	4313      	orrs	r3, r2
 800727e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007280:	4935      	ldr	r1, [pc, #212]	@ (8007358 <HAL_GPIO_Init+0x328>)
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	089b      	lsrs	r3, r3, #2
 8007286:	3302      	adds	r3, #2
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800728e:	4b3d      	ldr	r3, [pc, #244]	@ (8007384 <HAL_GPIO_Init+0x354>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	43db      	mvns	r3, r3
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	4013      	ands	r3, r2
 800729c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072b2:	4a34      	ldr	r2, [pc, #208]	@ (8007384 <HAL_GPIO_Init+0x354>)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072b8:	4b32      	ldr	r3, [pc, #200]	@ (8007384 <HAL_GPIO_Init+0x354>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	4013      	ands	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072dc:	4a29      	ldr	r2, [pc, #164]	@ (8007384 <HAL_GPIO_Init+0x354>)
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80072e2:	4b28      	ldr	r3, [pc, #160]	@ (8007384 <HAL_GPIO_Init+0x354>)
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	43db      	mvns	r3, r3
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	4013      	ands	r3, r2
 80072f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007306:	4a1f      	ldr	r2, [pc, #124]	@ (8007384 <HAL_GPIO_Init+0x354>)
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800730c:	4b1d      	ldr	r3, [pc, #116]	@ (8007384 <HAL_GPIO_Init+0x354>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	43db      	mvns	r3, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	4013      	ands	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007330:	4a14      	ldr	r2, [pc, #80]	@ (8007384 <HAL_GPIO_Init+0x354>)
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	3301      	adds	r3, #1
 800733a:	61fb      	str	r3, [r7, #28]
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2b0f      	cmp	r3, #15
 8007340:	f67f ae86 	bls.w	8007050 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3724      	adds	r7, #36	@ 0x24
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40023800 	.word	0x40023800
 8007358:	40013800 	.word	0x40013800
 800735c:	40020000 	.word	0x40020000
 8007360:	40020400 	.word	0x40020400
 8007364:	40020800 	.word	0x40020800
 8007368:	40020c00 	.word	0x40020c00
 800736c:	40021000 	.word	0x40021000
 8007370:	40021400 	.word	0x40021400
 8007374:	40021800 	.word	0x40021800
 8007378:	40021c00 	.word	0x40021c00
 800737c:	40022000 	.word	0x40022000
 8007380:	40022400 	.word	0x40022400
 8007384:	40013c00 	.word	0x40013c00

08007388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691a      	ldr	r2, [r3, #16]
 8007398:	887b      	ldrh	r3, [r7, #2]
 800739a:	4013      	ands	r3, r2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
 80073a4:	e001      	b.n	80073aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	807b      	strh	r3, [r7, #2]
 80073c4:	4613      	mov	r3, r2
 80073c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073c8:	787b      	ldrb	r3, [r7, #1]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073ce:	887a      	ldrh	r2, [r7, #2]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80073d4:	e003      	b.n	80073de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80073d6:	887b      	ldrh	r3, [r7, #2]
 80073d8:	041a      	lsls	r2, r3, #16
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	619a      	str	r2, [r3, #24]
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073f0:	4b05      	ldr	r3, [pc, #20]	@ (8007408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a04      	ldr	r2, [pc, #16]	@ (8007408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80073f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073fa:	6013      	str	r3, [r2, #0]
}
 80073fc:	bf00      	nop
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40007000 	.word	0x40007000

0800740c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007416:	4b23      	ldr	r3, [pc, #140]	@ (80074a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741a:	4a22      	ldr	r2, [pc, #136]	@ (80074a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800741c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007420:	6413      	str	r3, [r2, #64]	@ 0x40
 8007422:	4b20      	ldr	r3, [pc, #128]	@ (80074a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800742e:	4b1e      	ldr	r3, [pc, #120]	@ (80074a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a1d      	ldr	r2, [pc, #116]	@ (80074a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007438:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800743a:	f7ff f8bd 	bl	80065b8 <HAL_GetTick>
 800743e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007440:	e009      	b.n	8007456 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007442:	f7ff f8b9 	bl	80065b8 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007450:	d901      	bls.n	8007456 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e022      	b.n	800749c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007456:	4b14      	ldr	r3, [pc, #80]	@ (80074a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800745e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007462:	d1ee      	bne.n	8007442 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007464:	4b10      	ldr	r3, [pc, #64]	@ (80074a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a0f      	ldr	r2, [pc, #60]	@ (80074a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800746a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800746e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007470:	f7ff f8a2 	bl	80065b8 <HAL_GetTick>
 8007474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007476:	e009      	b.n	800748c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007478:	f7ff f89e 	bl	80065b8 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007486:	d901      	bls.n	800748c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e007      	b.n	800749c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800748c:	4b06      	ldr	r3, [pc, #24]	@ (80074a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007498:	d1ee      	bne.n	8007478 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	40023800 	.word	0x40023800
 80074a8:	40007000 	.word	0x40007000

080074ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80074b4:	2300      	movs	r3, #0
 80074b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e29b      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 8087 	beq.w	80075de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074d0:	4b96      	ldr	r3, [pc, #600]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f003 030c 	and.w	r3, r3, #12
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d00c      	beq.n	80074f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074dc:	4b93      	ldr	r3, [pc, #588]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 030c 	and.w	r3, r3, #12
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d112      	bne.n	800750e <HAL_RCC_OscConfig+0x62>
 80074e8:	4b90      	ldr	r3, [pc, #576]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074f4:	d10b      	bne.n	800750e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f6:	4b8d      	ldr	r3, [pc, #564]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d06c      	beq.n	80075dc <HAL_RCC_OscConfig+0x130>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d168      	bne.n	80075dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e275      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007516:	d106      	bne.n	8007526 <HAL_RCC_OscConfig+0x7a>
 8007518:	4b84      	ldr	r3, [pc, #528]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a83      	ldr	r2, [pc, #524]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 800751e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	e02e      	b.n	8007584 <HAL_RCC_OscConfig+0xd8>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10c      	bne.n	8007548 <HAL_RCC_OscConfig+0x9c>
 800752e:	4b7f      	ldr	r3, [pc, #508]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a7e      	ldr	r2, [pc, #504]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	4b7c      	ldr	r3, [pc, #496]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a7b      	ldr	r2, [pc, #492]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	e01d      	b.n	8007584 <HAL_RCC_OscConfig+0xd8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007550:	d10c      	bne.n	800756c <HAL_RCC_OscConfig+0xc0>
 8007552:	4b76      	ldr	r3, [pc, #472]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a75      	ldr	r2, [pc, #468]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	4b73      	ldr	r3, [pc, #460]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a72      	ldr	r2, [pc, #456]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	e00b      	b.n	8007584 <HAL_RCC_OscConfig+0xd8>
 800756c:	4b6f      	ldr	r3, [pc, #444]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a6e      	ldr	r2, [pc, #440]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	4b6c      	ldr	r3, [pc, #432]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a6b      	ldr	r2, [pc, #428]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 800757e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d013      	beq.n	80075b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758c:	f7ff f814 	bl	80065b8 <HAL_GetTick>
 8007590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007592:	e008      	b.n	80075a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007594:	f7ff f810 	bl	80065b8 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b64      	cmp	r3, #100	@ 0x64
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e229      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075a6:	4b61      	ldr	r3, [pc, #388]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0f0      	beq.n	8007594 <HAL_RCC_OscConfig+0xe8>
 80075b2:	e014      	b.n	80075de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b4:	f7ff f800 	bl	80065b8 <HAL_GetTick>
 80075b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ba:	e008      	b.n	80075ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075bc:	f7fe fffc 	bl	80065b8 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b64      	cmp	r3, #100	@ 0x64
 80075c8:	d901      	bls.n	80075ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e215      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ce:	4b57      	ldr	r3, [pc, #348]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1f0      	bne.n	80075bc <HAL_RCC_OscConfig+0x110>
 80075da:	e000      	b.n	80075de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d069      	beq.n	80076be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075ea:	4b50      	ldr	r3, [pc, #320]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f003 030c 	and.w	r3, r3, #12
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075f6:	4b4d      	ldr	r3, [pc, #308]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 030c 	and.w	r3, r3, #12
 80075fe:	2b08      	cmp	r3, #8
 8007600:	d11c      	bne.n	800763c <HAL_RCC_OscConfig+0x190>
 8007602:	4b4a      	ldr	r3, [pc, #296]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d116      	bne.n	800763c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800760e:	4b47      	ldr	r3, [pc, #284]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <HAL_RCC_OscConfig+0x17a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d001      	beq.n	8007626 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e1e9      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007626:	4b41      	ldr	r3, [pc, #260]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	493d      	ldr	r1, [pc, #244]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007636:	4313      	orrs	r3, r2
 8007638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800763a:	e040      	b.n	80076be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d023      	beq.n	800768c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007644:	4b39      	ldr	r3, [pc, #228]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a38      	ldr	r2, [pc, #224]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 800764a:	f043 0301 	orr.w	r3, r3, #1
 800764e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fe ffb2 	bl	80065b8 <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007658:	f7fe ffae 	bl	80065b8 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e1c7      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800766a:	4b30      	ldr	r3, [pc, #192]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0f0      	beq.n	8007658 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007676:	4b2d      	ldr	r3, [pc, #180]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	4929      	ldr	r1, [pc, #164]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007686:	4313      	orrs	r3, r2
 8007688:	600b      	str	r3, [r1, #0]
 800768a:	e018      	b.n	80076be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800768c:	4b27      	ldr	r3, [pc, #156]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a26      	ldr	r2, [pc, #152]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007692:	f023 0301 	bic.w	r3, r3, #1
 8007696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007698:	f7fe ff8e 	bl	80065b8 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076a0:	f7fe ff8a 	bl	80065b8 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e1a3      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076b2:	4b1e      	ldr	r3, [pc, #120]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f0      	bne.n	80076a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d038      	beq.n	800773c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d019      	beq.n	8007706 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076d2:	4b16      	ldr	r3, [pc, #88]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80076d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076d6:	4a15      	ldr	r2, [pc, #84]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80076d8:	f043 0301 	orr.w	r3, r3, #1
 80076dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076de:	f7fe ff6b 	bl	80065b8 <HAL_GetTick>
 80076e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076e4:	e008      	b.n	80076f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076e6:	f7fe ff67 	bl	80065b8 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d901      	bls.n	80076f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e180      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076f8:	4b0c      	ldr	r3, [pc, #48]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 80076fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0f0      	beq.n	80076e6 <HAL_RCC_OscConfig+0x23a>
 8007704:	e01a      	b.n	800773c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007706:	4b09      	ldr	r3, [pc, #36]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800770a:	4a08      	ldr	r2, [pc, #32]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007712:	f7fe ff51 	bl	80065b8 <HAL_GetTick>
 8007716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007718:	e00a      	b.n	8007730 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800771a:	f7fe ff4d 	bl	80065b8 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d903      	bls.n	8007730 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e166      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
 800772c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007730:	4b92      	ldr	r3, [pc, #584]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 8007732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007734:	f003 0302 	and.w	r3, r3, #2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1ee      	bne.n	800771a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 80a4 	beq.w	8007892 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800774a:	4b8c      	ldr	r3, [pc, #560]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 800774c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10d      	bne.n	8007772 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007756:	4b89      	ldr	r3, [pc, #548]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 8007758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775a:	4a88      	ldr	r2, [pc, #544]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 800775c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007760:	6413      	str	r3, [r2, #64]	@ 0x40
 8007762:	4b86      	ldr	r3, [pc, #536]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 8007764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800776a:	60bb      	str	r3, [r7, #8]
 800776c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800776e:	2301      	movs	r3, #1
 8007770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007772:	4b83      	ldr	r3, [pc, #524]	@ (8007980 <HAL_RCC_OscConfig+0x4d4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800777a:	2b00      	cmp	r3, #0
 800777c:	d118      	bne.n	80077b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800777e:	4b80      	ldr	r3, [pc, #512]	@ (8007980 <HAL_RCC_OscConfig+0x4d4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a7f      	ldr	r2, [pc, #508]	@ (8007980 <HAL_RCC_OscConfig+0x4d4>)
 8007784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800778a:	f7fe ff15 	bl	80065b8 <HAL_GetTick>
 800778e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007790:	e008      	b.n	80077a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007792:	f7fe ff11 	bl	80065b8 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b64      	cmp	r3, #100	@ 0x64
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e12a      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077a4:	4b76      	ldr	r3, [pc, #472]	@ (8007980 <HAL_RCC_OscConfig+0x4d4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d0f0      	beq.n	8007792 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d106      	bne.n	80077c6 <HAL_RCC_OscConfig+0x31a>
 80077b8:	4b70      	ldr	r3, [pc, #448]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80077ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077bc:	4a6f      	ldr	r2, [pc, #444]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80077be:	f043 0301 	orr.w	r3, r3, #1
 80077c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80077c4:	e02d      	b.n	8007822 <HAL_RCC_OscConfig+0x376>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10c      	bne.n	80077e8 <HAL_RCC_OscConfig+0x33c>
 80077ce:	4b6b      	ldr	r3, [pc, #428]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80077d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d2:	4a6a      	ldr	r2, [pc, #424]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80077d4:	f023 0301 	bic.w	r3, r3, #1
 80077d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80077da:	4b68      	ldr	r3, [pc, #416]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80077dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077de:	4a67      	ldr	r2, [pc, #412]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80077e0:	f023 0304 	bic.w	r3, r3, #4
 80077e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80077e6:	e01c      	b.n	8007822 <HAL_RCC_OscConfig+0x376>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2b05      	cmp	r3, #5
 80077ee:	d10c      	bne.n	800780a <HAL_RCC_OscConfig+0x35e>
 80077f0:	4b62      	ldr	r3, [pc, #392]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80077f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f4:	4a61      	ldr	r2, [pc, #388]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80077f6:	f043 0304 	orr.w	r3, r3, #4
 80077fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80077fc:	4b5f      	ldr	r3, [pc, #380]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007800:	4a5e      	ldr	r2, [pc, #376]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 8007802:	f043 0301 	orr.w	r3, r3, #1
 8007806:	6713      	str	r3, [r2, #112]	@ 0x70
 8007808:	e00b      	b.n	8007822 <HAL_RCC_OscConfig+0x376>
 800780a:	4b5c      	ldr	r3, [pc, #368]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 800780c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800780e:	4a5b      	ldr	r2, [pc, #364]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 8007810:	f023 0301 	bic.w	r3, r3, #1
 8007814:	6713      	str	r3, [r2, #112]	@ 0x70
 8007816:	4b59      	ldr	r3, [pc, #356]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 8007818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800781a:	4a58      	ldr	r2, [pc, #352]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 800781c:	f023 0304 	bic.w	r3, r3, #4
 8007820:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d015      	beq.n	8007856 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800782a:	f7fe fec5 	bl	80065b8 <HAL_GetTick>
 800782e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007830:	e00a      	b.n	8007848 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007832:	f7fe fec1 	bl	80065b8 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007840:	4293      	cmp	r3, r2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e0d8      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007848:	4b4c      	ldr	r3, [pc, #304]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 800784a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0ee      	beq.n	8007832 <HAL_RCC_OscConfig+0x386>
 8007854:	e014      	b.n	8007880 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007856:	f7fe feaf 	bl	80065b8 <HAL_GetTick>
 800785a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800785c:	e00a      	b.n	8007874 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800785e:	f7fe feab 	bl	80065b8 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800786c:	4293      	cmp	r3, r2
 800786e:	d901      	bls.n	8007874 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e0c2      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007874:	4b41      	ldr	r3, [pc, #260]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 8007876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1ee      	bne.n	800785e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d105      	bne.n	8007892 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007886:	4b3d      	ldr	r3, [pc, #244]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 8007888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788a:	4a3c      	ldr	r2, [pc, #240]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 800788c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007890:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 80ae 	beq.w	80079f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800789c:	4b37      	ldr	r3, [pc, #220]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 030c 	and.w	r3, r3, #12
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d06d      	beq.n	8007984 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d14b      	bne.n	8007948 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078b0:	4b32      	ldr	r3, [pc, #200]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a31      	ldr	r2, [pc, #196]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80078b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078bc:	f7fe fe7c 	bl	80065b8 <HAL_GetTick>
 80078c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078c2:	e008      	b.n	80078d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078c4:	f7fe fe78 	bl	80065b8 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e091      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078d6:	4b29      	ldr	r3, [pc, #164]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1f0      	bne.n	80078c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69da      	ldr	r2, [r3, #28]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f0:	019b      	lsls	r3, r3, #6
 80078f2:	431a      	orrs	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f8:	085b      	lsrs	r3, r3, #1
 80078fa:	3b01      	subs	r3, #1
 80078fc:	041b      	lsls	r3, r3, #16
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007904:	061b      	lsls	r3, r3, #24
 8007906:	431a      	orrs	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790c:	071b      	lsls	r3, r3, #28
 800790e:	491b      	ldr	r1, [pc, #108]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 8007910:	4313      	orrs	r3, r2
 8007912:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007914:	4b19      	ldr	r3, [pc, #100]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a18      	ldr	r2, [pc, #96]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 800791a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800791e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007920:	f7fe fe4a 	bl	80065b8 <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007928:	f7fe fe46 	bl	80065b8 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e05f      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800793a:	4b10      	ldr	r3, [pc, #64]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0f0      	beq.n	8007928 <HAL_RCC_OscConfig+0x47c>
 8007946:	e057      	b.n	80079f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007948:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a0b      	ldr	r2, [pc, #44]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 800794e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007954:	f7fe fe30 	bl	80065b8 <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800795a:	e008      	b.n	800796e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800795c:	f7fe fe2c 	bl	80065b8 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d901      	bls.n	800796e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e045      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800796e:	4b03      	ldr	r3, [pc, #12]	@ (800797c <HAL_RCC_OscConfig+0x4d0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1f0      	bne.n	800795c <HAL_RCC_OscConfig+0x4b0>
 800797a:	e03d      	b.n	80079f8 <HAL_RCC_OscConfig+0x54c>
 800797c:	40023800 	.word	0x40023800
 8007980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007984:	4b1f      	ldr	r3, [pc, #124]	@ (8007a04 <HAL_RCC_OscConfig+0x558>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d030      	beq.n	80079f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800799c:	429a      	cmp	r2, r3
 800799e:	d129      	bne.n	80079f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d122      	bne.n	80079f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80079b4:	4013      	ands	r3, r2
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80079ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079bc:	4293      	cmp	r3, r2
 80079be:	d119      	bne.n	80079f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ca:	085b      	lsrs	r3, r3, #1
 80079cc:	3b01      	subs	r3, #1
 80079ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d10f      	bne.n	80079f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d107      	bne.n	80079f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d001      	beq.n	80079f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	40023800 	.word	0x40023800

08007a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e0d0      	b.n	8007bc2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a20:	4b6a      	ldr	r3, [pc, #424]	@ (8007bcc <HAL_RCC_ClockConfig+0x1c4>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 030f 	and.w	r3, r3, #15
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d910      	bls.n	8007a50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a2e:	4b67      	ldr	r3, [pc, #412]	@ (8007bcc <HAL_RCC_ClockConfig+0x1c4>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f023 020f 	bic.w	r2, r3, #15
 8007a36:	4965      	ldr	r1, [pc, #404]	@ (8007bcc <HAL_RCC_ClockConfig+0x1c4>)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a3e:	4b63      	ldr	r3, [pc, #396]	@ (8007bcc <HAL_RCC_ClockConfig+0x1c4>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d001      	beq.n	8007a50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e0b8      	b.n	8007bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d020      	beq.n	8007a9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a68:	4b59      	ldr	r3, [pc, #356]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	4a58      	ldr	r2, [pc, #352]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007a6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007a72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a80:	4b53      	ldr	r3, [pc, #332]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	4a52      	ldr	r2, [pc, #328]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007a86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007a8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a8c:	4b50      	ldr	r3, [pc, #320]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	494d      	ldr	r1, [pc, #308]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d040      	beq.n	8007b2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d107      	bne.n	8007ac2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ab2:	4b47      	ldr	r3, [pc, #284]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d115      	bne.n	8007aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e07f      	b.n	8007bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d107      	bne.n	8007ada <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aca:	4b41      	ldr	r3, [pc, #260]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e073      	b.n	8007bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ada:	4b3d      	ldr	r3, [pc, #244]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e06b      	b.n	8007bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aea:	4b39      	ldr	r3, [pc, #228]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f023 0203 	bic.w	r2, r3, #3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	4936      	ldr	r1, [pc, #216]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007afc:	f7fe fd5c 	bl	80065b8 <HAL_GetTick>
 8007b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b02:	e00a      	b.n	8007b1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b04:	f7fe fd58 	bl	80065b8 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e053      	b.n	8007bc2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 020c 	and.w	r2, r3, #12
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d1eb      	bne.n	8007b04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b2c:	4b27      	ldr	r3, [pc, #156]	@ (8007bcc <HAL_RCC_ClockConfig+0x1c4>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 030f 	and.w	r3, r3, #15
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d210      	bcs.n	8007b5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b3a:	4b24      	ldr	r3, [pc, #144]	@ (8007bcc <HAL_RCC_ClockConfig+0x1c4>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f023 020f 	bic.w	r2, r3, #15
 8007b42:	4922      	ldr	r1, [pc, #136]	@ (8007bcc <HAL_RCC_ClockConfig+0x1c4>)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b4a:	4b20      	ldr	r3, [pc, #128]	@ (8007bcc <HAL_RCC_ClockConfig+0x1c4>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 030f 	and.w	r3, r3, #15
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d001      	beq.n	8007b5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e032      	b.n	8007bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d008      	beq.n	8007b7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b68:	4b19      	ldr	r3, [pc, #100]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	4916      	ldr	r1, [pc, #88]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007b86:	4b12      	ldr	r3, [pc, #72]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	490e      	ldr	r1, [pc, #56]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b9a:	f000 f821 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	091b      	lsrs	r3, r3, #4
 8007ba6:	f003 030f 	and.w	r3, r3, #15
 8007baa:	490a      	ldr	r1, [pc, #40]	@ (8007bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8007bac:	5ccb      	ldrb	r3, [r1, r3]
 8007bae:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb2:	4a09      	ldr	r2, [pc, #36]	@ (8007bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8007bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007bb6:	4b09      	ldr	r3, [pc, #36]	@ (8007bdc <HAL_RCC_ClockConfig+0x1d4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fcb8 	bl	8006530 <HAL_InitTick>

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	40023c00 	.word	0x40023c00
 8007bd0:	40023800 	.word	0x40023800
 8007bd4:	08010238 	.word	0x08010238
 8007bd8:	2000000c 	.word	0x2000000c
 8007bdc:	20000080 	.word	0x20000080

08007be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007be4:	b094      	sub	sp, #80	@ 0x50
 8007be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bec:	2300      	movs	r3, #0
 8007bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bf8:	4b79      	ldr	r3, [pc, #484]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f003 030c 	and.w	r3, r3, #12
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d00d      	beq.n	8007c20 <HAL_RCC_GetSysClockFreq+0x40>
 8007c04:	2b08      	cmp	r3, #8
 8007c06:	f200 80e1 	bhi.w	8007dcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <HAL_RCC_GetSysClockFreq+0x34>
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d003      	beq.n	8007c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8007c12:	e0db      	b.n	8007dcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c14:	4b73      	ldr	r3, [pc, #460]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c18:	e0db      	b.n	8007dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c1a:	4b73      	ldr	r3, [pc, #460]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0x208>)
 8007c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c1e:	e0d8      	b.n	8007dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c20:	4b6f      	ldr	r3, [pc, #444]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d063      	beq.n	8007cfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c36:	4b6a      	ldr	r3, [pc, #424]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	099b      	lsrs	r3, r3, #6
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007c52:	4622      	mov	r2, r4
 8007c54:	462b      	mov	r3, r5
 8007c56:	f04f 0000 	mov.w	r0, #0
 8007c5a:	f04f 0100 	mov.w	r1, #0
 8007c5e:	0159      	lsls	r1, r3, #5
 8007c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c64:	0150      	lsls	r0, r2, #5
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	1a51      	subs	r1, r2, r1
 8007c6e:	6139      	str	r1, [r7, #16]
 8007c70:	4629      	mov	r1, r5
 8007c72:	eb63 0301 	sbc.w	r3, r3, r1
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	f04f 0200 	mov.w	r2, #0
 8007c7c:	f04f 0300 	mov.w	r3, #0
 8007c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c84:	4659      	mov	r1, fp
 8007c86:	018b      	lsls	r3, r1, #6
 8007c88:	4651      	mov	r1, sl
 8007c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c8e:	4651      	mov	r1, sl
 8007c90:	018a      	lsls	r2, r1, #6
 8007c92:	4651      	mov	r1, sl
 8007c94:	ebb2 0801 	subs.w	r8, r2, r1
 8007c98:	4659      	mov	r1, fp
 8007c9a:	eb63 0901 	sbc.w	r9, r3, r1
 8007c9e:	f04f 0200 	mov.w	r2, #0
 8007ca2:	f04f 0300 	mov.w	r3, #0
 8007ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cb2:	4690      	mov	r8, r2
 8007cb4:	4699      	mov	r9, r3
 8007cb6:	4623      	mov	r3, r4
 8007cb8:	eb18 0303 	adds.w	r3, r8, r3
 8007cbc:	60bb      	str	r3, [r7, #8]
 8007cbe:	462b      	mov	r3, r5
 8007cc0:	eb49 0303 	adc.w	r3, r9, r3
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	f04f 0200 	mov.w	r2, #0
 8007cca:	f04f 0300 	mov.w	r3, #0
 8007cce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	024b      	lsls	r3, r1, #9
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007cdc:	4621      	mov	r1, r4
 8007cde:	024a      	lsls	r2, r1, #9
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007cf0:	f7f8 fcc4 	bl	800067c <__aeabi_uldivmod>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cfc:	e058      	b.n	8007db0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cfe:	4b38      	ldr	r3, [pc, #224]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	099b      	lsrs	r3, r3, #6
 8007d04:	2200      	movs	r2, #0
 8007d06:	4618      	mov	r0, r3
 8007d08:	4611      	mov	r1, r2
 8007d0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007d0e:	623b      	str	r3, [r7, #32]
 8007d10:	2300      	movs	r3, #0
 8007d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007d18:	4642      	mov	r2, r8
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	f04f 0000 	mov.w	r0, #0
 8007d20:	f04f 0100 	mov.w	r1, #0
 8007d24:	0159      	lsls	r1, r3, #5
 8007d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d2a:	0150      	lsls	r0, r2, #5
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4641      	mov	r1, r8
 8007d32:	ebb2 0a01 	subs.w	sl, r2, r1
 8007d36:	4649      	mov	r1, r9
 8007d38:	eb63 0b01 	sbc.w	fp, r3, r1
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	f04f 0300 	mov.w	r3, #0
 8007d44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007d48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007d4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007d50:	ebb2 040a 	subs.w	r4, r2, sl
 8007d54:	eb63 050b 	sbc.w	r5, r3, fp
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	f04f 0300 	mov.w	r3, #0
 8007d60:	00eb      	lsls	r3, r5, #3
 8007d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d66:	00e2      	lsls	r2, r4, #3
 8007d68:	4614      	mov	r4, r2
 8007d6a:	461d      	mov	r5, r3
 8007d6c:	4643      	mov	r3, r8
 8007d6e:	18e3      	adds	r3, r4, r3
 8007d70:	603b      	str	r3, [r7, #0]
 8007d72:	464b      	mov	r3, r9
 8007d74:	eb45 0303 	adc.w	r3, r5, r3
 8007d78:	607b      	str	r3, [r7, #4]
 8007d7a:	f04f 0200 	mov.w	r2, #0
 8007d7e:	f04f 0300 	mov.w	r3, #0
 8007d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d86:	4629      	mov	r1, r5
 8007d88:	028b      	lsls	r3, r1, #10
 8007d8a:	4621      	mov	r1, r4
 8007d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d90:	4621      	mov	r1, r4
 8007d92:	028a      	lsls	r2, r1, #10
 8007d94:	4610      	mov	r0, r2
 8007d96:	4619      	mov	r1, r3
 8007d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	61fa      	str	r2, [r7, #28]
 8007da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007da4:	f7f8 fc6a 	bl	800067c <__aeabi_uldivmod>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4613      	mov	r3, r2
 8007dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007db0:	4b0b      	ldr	r3, [pc, #44]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	0c1b      	lsrs	r3, r3, #16
 8007db6:	f003 0303 	and.w	r3, r3, #3
 8007dba:	3301      	adds	r3, #1
 8007dbc:	005b      	lsls	r3, r3, #1
 8007dbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007dc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007dca:	e002      	b.n	8007dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dcc:	4b05      	ldr	r3, [pc, #20]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007dce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3750      	adds	r7, #80	@ 0x50
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dde:	bf00      	nop
 8007de0:	40023800 	.word	0x40023800
 8007de4:	00f42400 	.word	0x00f42400
 8007de8:	007a1200 	.word	0x007a1200

08007dec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007df0:	4b03      	ldr	r3, [pc, #12]	@ (8007e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8007df2:	681b      	ldr	r3, [r3, #0]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	2000000c 	.word	0x2000000c

08007e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e08:	f7ff fff0 	bl	8007dec <HAL_RCC_GetHCLKFreq>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	0a9b      	lsrs	r3, r3, #10
 8007e14:	f003 0307 	and.w	r3, r3, #7
 8007e18:	4903      	ldr	r1, [pc, #12]	@ (8007e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e1a:	5ccb      	ldrb	r3, [r1, r3]
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	40023800 	.word	0x40023800
 8007e28:	08010248 	.word	0x08010248

08007e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e30:	f7ff ffdc 	bl	8007dec <HAL_RCC_GetHCLKFreq>
 8007e34:	4602      	mov	r2, r0
 8007e36:	4b05      	ldr	r3, [pc, #20]	@ (8007e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	0b5b      	lsrs	r3, r3, #13
 8007e3c:	f003 0307 	and.w	r3, r3, #7
 8007e40:	4903      	ldr	r1, [pc, #12]	@ (8007e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e42:	5ccb      	ldrb	r3, [r1, r3]
 8007e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40023800 	.word	0x40023800
 8007e50:	08010248 	.word	0x08010248

08007e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d012      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e7c:	4b69      	ldr	r3, [pc, #420]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	4a68      	ldr	r2, [pc, #416]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e82:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007e86:	6093      	str	r3, [r2, #8]
 8007e88:	4b66      	ldr	r3, [pc, #408]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e90:	4964      	ldr	r1, [pc, #400]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d017      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007eae:	4b5d      	ldr	r3, [pc, #372]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007eb4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ebc:	4959      	ldr	r1, [pc, #356]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ecc:	d101      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d017      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007eea:	4b4e      	ldr	r3, [pc, #312]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ef0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef8:	494a      	ldr	r1, [pc, #296]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f08:	d101      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007f16:	2301      	movs	r3, #1
 8007f18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f26:	2301      	movs	r3, #1
 8007f28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0320 	and.w	r3, r3, #32
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 808b 	beq.w	800804e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f38:	4b3a      	ldr	r3, [pc, #232]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3c:	4a39      	ldr	r2, [pc, #228]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f44:	4b37      	ldr	r3, [pc, #220]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f4c:	60bb      	str	r3, [r7, #8]
 8007f4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f50:	4b35      	ldr	r3, [pc, #212]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a34      	ldr	r2, [pc, #208]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f5c:	f7fe fb2c 	bl	80065b8 <HAL_GetTick>
 8007f60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f62:	e008      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f64:	f7fe fb28 	bl	80065b8 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	2b64      	cmp	r3, #100	@ 0x64
 8007f70:	d901      	bls.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e38f      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f76:	4b2c      	ldr	r3, [pc, #176]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0f0      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f82:	4b28      	ldr	r3, [pc, #160]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d035      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d02e      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fa0:	4b20      	ldr	r3, [pc, #128]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fa8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007faa:	4b1e      	ldr	r3, [pc, #120]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fae:	4a1d      	ldr	r2, [pc, #116]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fb4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fba:	4a1a      	ldr	r2, [pc, #104]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fc0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007fc2:	4a18      	ldr	r2, [pc, #96]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007fc8:	4b16      	ldr	r3, [pc, #88]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d114      	bne.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd4:	f7fe faf0 	bl	80065b8 <HAL_GetTick>
 8007fd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fda:	e00a      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fdc:	f7fe faec 	bl	80065b8 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e351      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0ee      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800800a:	d111      	bne.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800800c:	4b05      	ldr	r3, [pc, #20]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008018:	4b04      	ldr	r3, [pc, #16]	@ (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800801a:	400b      	ands	r3, r1
 800801c:	4901      	ldr	r1, [pc, #4]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800801e:	4313      	orrs	r3, r2
 8008020:	608b      	str	r3, [r1, #8]
 8008022:	e00b      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008024:	40023800 	.word	0x40023800
 8008028:	40007000 	.word	0x40007000
 800802c:	0ffffcff 	.word	0x0ffffcff
 8008030:	4bac      	ldr	r3, [pc, #688]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	4aab      	ldr	r2, [pc, #684]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008036:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800803a:	6093      	str	r3, [r2, #8]
 800803c:	4ba9      	ldr	r3, [pc, #676]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800803e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008048:	49a6      	ldr	r1, [pc, #664]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800804a:	4313      	orrs	r3, r2
 800804c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	2b00      	cmp	r3, #0
 8008058:	d010      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800805a:	4ba2      	ldr	r3, [pc, #648]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800805c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008060:	4aa0      	ldr	r2, [pc, #640]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008066:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800806a:	4b9e      	ldr	r3, [pc, #632]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800806c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008074:	499b      	ldr	r1, [pc, #620]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008076:	4313      	orrs	r3, r2
 8008078:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00a      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008088:	4b96      	ldr	r3, [pc, #600]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800808a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008096:	4993      	ldr	r1, [pc, #588]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008098:	4313      	orrs	r3, r2
 800809a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00a      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080aa:	4b8e      	ldr	r3, [pc, #568]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080b8:	498a      	ldr	r1, [pc, #552]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080cc:	4b85      	ldr	r3, [pc, #532]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080da:	4982      	ldr	r1, [pc, #520]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080ee:	4b7d      	ldr	r3, [pc, #500]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080fc:	4979      	ldr	r1, [pc, #484]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008110:	4b74      	ldr	r3, [pc, #464]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008116:	f023 0203 	bic.w	r2, r3, #3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800811e:	4971      	ldr	r1, [pc, #452]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008120:	4313      	orrs	r3, r2
 8008122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008132:	4b6c      	ldr	r3, [pc, #432]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008138:	f023 020c 	bic.w	r2, r3, #12
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008140:	4968      	ldr	r1, [pc, #416]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008142:	4313      	orrs	r3, r2
 8008144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00a      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008154:	4b63      	ldr	r3, [pc, #396]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800815a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008162:	4960      	ldr	r1, [pc, #384]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008164:	4313      	orrs	r3, r2
 8008166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008176:	4b5b      	ldr	r3, [pc, #364]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008184:	4957      	ldr	r1, [pc, #348]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008186:	4313      	orrs	r3, r2
 8008188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008198:	4b52      	ldr	r3, [pc, #328]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800819a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a6:	494f      	ldr	r1, [pc, #316]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80081ba:	4b4a      	ldr	r3, [pc, #296]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081c8:	4946      	ldr	r1, [pc, #280]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80081dc:	4b41      	ldr	r3, [pc, #260]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081ea:	493e      	ldr	r1, [pc, #248]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80081fe:	4b39      	ldr	r3, [pc, #228]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008204:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800820c:	4935      	ldr	r1, [pc, #212]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800820e:	4313      	orrs	r3, r2
 8008210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008220:	4b30      	ldr	r3, [pc, #192]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008226:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800822e:	492d      	ldr	r1, [pc, #180]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008230:	4313      	orrs	r3, r2
 8008232:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d011      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008242:	4b28      	ldr	r3, [pc, #160]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008248:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008250:	4924      	ldr	r1, [pc, #144]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008252:	4313      	orrs	r3, r2
 8008254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800825c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008260:	d101      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008262:	2301      	movs	r3, #1
 8008264:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0308 	and.w	r3, r3, #8
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008272:	2301      	movs	r3, #1
 8008274:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008282:	4b18      	ldr	r3, [pc, #96]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008288:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008290:	4914      	ldr	r1, [pc, #80]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008292:	4313      	orrs	r3, r2
 8008294:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80082a4:	4b0f      	ldr	r3, [pc, #60]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b4:	490b      	ldr	r1, [pc, #44]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00f      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80082c8:	4b06      	ldr	r3, [pc, #24]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082d8:	4902      	ldr	r1, [pc, #8]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80082e0:	e002      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80082e2:	bf00      	nop
 80082e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082f4:	4b8a      	ldr	r3, [pc, #552]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80082f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008304:	4986      	ldr	r1, [pc, #536]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008306:	4313      	orrs	r3, r2
 8008308:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008318:	4b81      	ldr	r3, [pc, #516]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800831a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800831e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008328:	497d      	ldr	r1, [pc, #500]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800832a:	4313      	orrs	r3, r2
 800832c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d006      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 80d6 	beq.w	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008344:	4b76      	ldr	r3, [pc, #472]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a75      	ldr	r2, [pc, #468]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800834a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800834e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008350:	f7fe f932 	bl	80065b8 <HAL_GetTick>
 8008354:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008356:	e008      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008358:	f7fe f92e 	bl	80065b8 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b64      	cmp	r3, #100	@ 0x64
 8008364:	d901      	bls.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e195      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800836a:	4b6d      	ldr	r3, [pc, #436]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1f0      	bne.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d021      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008386:	2b00      	cmp	r3, #0
 8008388:	d11d      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800838a:	4b65      	ldr	r3, [pc, #404]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800838c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008390:	0c1b      	lsrs	r3, r3, #16
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008398:	4b61      	ldr	r3, [pc, #388]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800839a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800839e:	0e1b      	lsrs	r3, r3, #24
 80083a0:	f003 030f 	and.w	r3, r3, #15
 80083a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	019a      	lsls	r2, r3, #6
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	431a      	orrs	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	061b      	lsls	r3, r3, #24
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	071b      	lsls	r3, r3, #28
 80083be:	4958      	ldr	r1, [pc, #352]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d004      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083da:	d00a      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d02e      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083f0:	d129      	bne.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083f2:	4b4b      	ldr	r3, [pc, #300]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80083f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083f8:	0c1b      	lsrs	r3, r3, #16
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008400:	4b47      	ldr	r3, [pc, #284]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008406:	0f1b      	lsrs	r3, r3, #28
 8008408:	f003 0307 	and.w	r3, r3, #7
 800840c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	019a      	lsls	r2, r3, #6
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	041b      	lsls	r3, r3, #16
 8008418:	431a      	orrs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	061b      	lsls	r3, r3, #24
 8008420:	431a      	orrs	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	071b      	lsls	r3, r3, #28
 8008426:	493e      	ldr	r1, [pc, #248]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008428:	4313      	orrs	r3, r2
 800842a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800842e:	4b3c      	ldr	r3, [pc, #240]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008434:	f023 021f 	bic.w	r2, r3, #31
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843c:	3b01      	subs	r3, #1
 800843e:	4938      	ldr	r1, [pc, #224]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008440:	4313      	orrs	r3, r2
 8008442:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01d      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008452:	4b33      	ldr	r3, [pc, #204]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008458:	0e1b      	lsrs	r3, r3, #24
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008460:	4b2f      	ldr	r3, [pc, #188]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008466:	0f1b      	lsrs	r3, r3, #28
 8008468:	f003 0307 	and.w	r3, r3, #7
 800846c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	019a      	lsls	r2, r3, #6
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	041b      	lsls	r3, r3, #16
 800847a:	431a      	orrs	r2, r3
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	061b      	lsls	r3, r3, #24
 8008480:	431a      	orrs	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	071b      	lsls	r3, r3, #28
 8008486:	4926      	ldr	r1, [pc, #152]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008488:	4313      	orrs	r3, r2
 800848a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d011      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	019a      	lsls	r2, r3, #6
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	041b      	lsls	r3, r3, #16
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	061b      	lsls	r3, r3, #24
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	071b      	lsls	r3, r3, #28
 80084b6:	491a      	ldr	r1, [pc, #104]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084be:	4b18      	ldr	r3, [pc, #96]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a17      	ldr	r2, [pc, #92]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ca:	f7fe f875 	bl	80065b8 <HAL_GetTick>
 80084ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084d0:	e008      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084d2:	f7fe f871 	bl	80065b8 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b64      	cmp	r3, #100	@ 0x64
 80084de:	d901      	bls.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e0d8      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0f0      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	f040 80ce 	bne.w	8008694 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80084f8:	4b09      	ldr	r3, [pc, #36]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a08      	ldr	r2, [pc, #32]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008504:	f7fe f858 	bl	80065b8 <HAL_GetTick>
 8008508:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800850a:	e00b      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800850c:	f7fe f854 	bl	80065b8 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b64      	cmp	r3, #100	@ 0x64
 8008518:	d904      	bls.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e0bb      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800851e:	bf00      	nop
 8008520:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008524:	4b5e      	ldr	r3, [pc, #376]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800852c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008530:	d0ec      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800854e:	2b00      	cmp	r3, #0
 8008550:	d02e      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008556:	2b00      	cmp	r3, #0
 8008558:	d12a      	bne.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800855a:	4b51      	ldr	r3, [pc, #324]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800855c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008560:	0c1b      	lsrs	r3, r3, #16
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008568:	4b4d      	ldr	r3, [pc, #308]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800856a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856e:	0f1b      	lsrs	r3, r3, #28
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	019a      	lsls	r2, r3, #6
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	041b      	lsls	r3, r3, #16
 8008580:	431a      	orrs	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	061b      	lsls	r3, r3, #24
 8008588:	431a      	orrs	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	071b      	lsls	r3, r3, #28
 800858e:	4944      	ldr	r1, [pc, #272]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008590:	4313      	orrs	r3, r2
 8008592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008596:	4b42      	ldr	r3, [pc, #264]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800859c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a4:	3b01      	subs	r3, #1
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	493d      	ldr	r1, [pc, #244]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d022      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085c4:	d11d      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085c6:	4b36      	ldr	r3, [pc, #216]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80085c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085cc:	0e1b      	lsrs	r3, r3, #24
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085d4:	4b32      	ldr	r3, [pc, #200]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80085d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085da:	0f1b      	lsrs	r3, r3, #28
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	019a      	lsls	r2, r3, #6
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	041b      	lsls	r3, r3, #16
 80085ee:	431a      	orrs	r2, r3
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	061b      	lsls	r3, r3, #24
 80085f4:	431a      	orrs	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	071b      	lsls	r3, r3, #28
 80085fa:	4929      	ldr	r1, [pc, #164]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0308 	and.w	r3, r3, #8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d028      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800860e:	4b24      	ldr	r3, [pc, #144]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008614:	0e1b      	lsrs	r3, r3, #24
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800861c:	4b20      	ldr	r3, [pc, #128]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800861e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008622:	0c1b      	lsrs	r3, r3, #16
 8008624:	f003 0303 	and.w	r3, r3, #3
 8008628:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	019a      	lsls	r2, r3, #6
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	041b      	lsls	r3, r3, #16
 8008634:	431a      	orrs	r2, r3
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	061b      	lsls	r3, r3, #24
 800863a:	431a      	orrs	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	071b      	lsls	r3, r3, #28
 8008642:	4917      	ldr	r1, [pc, #92]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008644:	4313      	orrs	r3, r2
 8008646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800864a:	4b15      	ldr	r3, [pc, #84]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800864c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008650:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008658:	4911      	ldr	r1, [pc, #68]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800865a:	4313      	orrs	r3, r2
 800865c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008660:	4b0f      	ldr	r3, [pc, #60]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a0e      	ldr	r2, [pc, #56]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800866a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800866c:	f7fd ffa4 	bl	80065b8 <HAL_GetTick>
 8008670:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008672:	e008      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008674:	f7fd ffa0 	bl	80065b8 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b64      	cmp	r3, #100	@ 0x64
 8008680:	d901      	bls.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e007      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008686:	4b06      	ldr	r3, [pc, #24]	@ (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800868e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008692:	d1ef      	bne.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3720      	adds	r7, #32
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	40023800 	.word	0x40023800

080086a4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e01c      	b.n	80086f0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	795b      	ldrb	r3, [r3, #5]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d105      	bne.n	80086cc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7f9 fa18 	bl	8001afc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f042 0204 	orr.w	r2, r2, #4
 80086e0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	791b      	ldrb	r3, [r3, #4]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <HAL_RNG_GenerateRandomNumber+0x1a>
 800870e:	2302      	movs	r3, #2
 8008710:	e044      	b.n	800879c <HAL_RNG_GenerateRandomNumber+0xa4>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	795b      	ldrb	r3, [r3, #5]
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b01      	cmp	r3, #1
 8008720:	d133      	bne.n	800878a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2202      	movs	r2, #2
 8008726:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008728:	f7fd ff46 	bl	80065b8 <HAL_GetTick>
 800872c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800872e:	e018      	b.n	8008762 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008730:	f7fd ff42 	bl	80065b8 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b02      	cmp	r3, #2
 800873c:	d911      	bls.n	8008762 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b01      	cmp	r3, #1
 800874a:	d00a      	beq.n	8008762 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2202      	movs	r2, #2
 8008756:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e01c      	b.n	800879c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b01      	cmp	r3, #1
 800876e:	d1df      	bne.n	8008730 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	715a      	strb	r2, [r3, #5]
 8008788:	e004      	b.n	8008794 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2204      	movs	r2, #4
 800878e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	711a      	strb	r2, [r3, #4]

  return status;
 800879a:	7bfb      	ldrb	r3, [r7, #15]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e09d      	b.n	80088f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d108      	bne.n	80087d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087c6:	d009      	beq.n	80087dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	61da      	str	r2, [r3, #28]
 80087ce:	e005      	b.n	80087dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7f9 fa30 	bl	8001c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008812:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800881c:	d902      	bls.n	8008824 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	e002      	b.n	800882a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008828:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008832:	d007      	beq.n	8008844 <HAL_SPI_Init+0xa0>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800883c:	d002      	beq.n	8008844 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	431a      	orrs	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	431a      	orrs	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008872:	431a      	orrs	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800887c:	431a      	orrs	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008886:	ea42 0103 	orr.w	r1, r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	0c1b      	lsrs	r3, r3, #16
 80088a0:	f003 0204 	and.w	r2, r3, #4
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a8:	f003 0310 	and.w	r3, r3, #16
 80088ac:	431a      	orrs	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80088c0:	ea42 0103 	orr.w	r1, r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	69da      	ldr	r2, [r3, #28]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80088e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b088      	sub	sp, #32
 80088fe:	af00      	add	r7, sp, #0
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	603b      	str	r3, [r7, #0]
 8008906:	4613      	mov	r3, r2
 8008908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008914:	2b01      	cmp	r3, #1
 8008916:	d101      	bne.n	800891c <HAL_SPI_Transmit+0x22>
 8008918:	2302      	movs	r3, #2
 800891a:	e15f      	b.n	8008bdc <HAL_SPI_Transmit+0x2e2>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008924:	f7fd fe48 	bl	80065b8 <HAL_GetTick>
 8008928:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800892a:	88fb      	ldrh	r3, [r7, #6]
 800892c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b01      	cmp	r3, #1
 8008938:	d002      	beq.n	8008940 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800893a:	2302      	movs	r3, #2
 800893c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800893e:	e148      	b.n	8008bd2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <HAL_SPI_Transmit+0x52>
 8008946:	88fb      	ldrh	r3, [r7, #6]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d102      	bne.n	8008952 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008950:	e13f      	b.n	8008bd2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2203      	movs	r2, #3
 8008956:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	88fa      	ldrh	r2, [r7, #6]
 800896a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	88fa      	ldrh	r2, [r7, #6]
 8008970:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800899c:	d10f      	bne.n	80089be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089c8:	2b40      	cmp	r3, #64	@ 0x40
 80089ca:	d007      	beq.n	80089dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80089e4:	d94f      	bls.n	8008a86 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d002      	beq.n	80089f4 <HAL_SPI_Transmit+0xfa>
 80089ee:	8afb      	ldrh	r3, [r7, #22]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d142      	bne.n	8008a7a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f8:	881a      	ldrh	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a04:	1c9a      	adds	r2, r3, #2
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	3b01      	subs	r3, #1
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a18:	e02f      	b.n	8008a7a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d112      	bne.n	8008a4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2c:	881a      	ldrh	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a38:	1c9a      	adds	r2, r3, #2
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	3b01      	subs	r3, #1
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008a4c:	e015      	b.n	8008a7a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a4e:	f7fd fdb3 	bl	80065b8 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d803      	bhi.n	8008a66 <HAL_SPI_Transmit+0x16c>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a64:	d102      	bne.n	8008a6c <HAL_SPI_Transmit+0x172>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d106      	bne.n	8008a7a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008a78:	e0ab      	b.n	8008bd2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1ca      	bne.n	8008a1a <HAL_SPI_Transmit+0x120>
 8008a84:	e080      	b.n	8008b88 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <HAL_SPI_Transmit+0x19a>
 8008a8e:	8afb      	ldrh	r3, [r7, #22]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d174      	bne.n	8008b7e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d912      	bls.n	8008ac4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa2:	881a      	ldrh	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aae:	1c9a      	adds	r2, r3, #2
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	3b02      	subs	r3, #2
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ac2:	e05c      	b.n	8008b7e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	330c      	adds	r3, #12
 8008ace:	7812      	ldrb	r2, [r2, #0]
 8008ad0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008aea:	e048      	b.n	8008b7e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d12b      	bne.n	8008b52 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d912      	bls.n	8008b2a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b08:	881a      	ldrh	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b14:	1c9a      	adds	r2, r3, #2
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	3b02      	subs	r3, #2
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b28:	e029      	b.n	8008b7e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	330c      	adds	r3, #12
 8008b34:	7812      	ldrb	r2, [r2, #0]
 8008b36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b50:	e015      	b.n	8008b7e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b52:	f7fd fd31 	bl	80065b8 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d803      	bhi.n	8008b6a <HAL_SPI_Transmit+0x270>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b68:	d102      	bne.n	8008b70 <HAL_SPI_Transmit+0x276>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d106      	bne.n	8008b7e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008b7c:	e029      	b.n	8008bd2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1b1      	bne.n	8008aec <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 fb69 	bl	8009264 <SPI_EndRxTxTransaction>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2220      	movs	r2, #32
 8008b9c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10a      	bne.n	8008bbc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	613b      	str	r3, [r7, #16]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	613b      	str	r3, [r7, #16]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	613b      	str	r3, [r7, #16]
 8008bba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	77fb      	strb	r3, [r7, #31]
 8008bc8:	e003      	b.n	8008bd2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008bda:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3720      	adds	r7, #32
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08a      	sub	sp, #40	@ 0x28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d101      	bne.n	8008c0a <HAL_SPI_TransmitReceive+0x26>
 8008c06:	2302      	movs	r3, #2
 8008c08:	e20a      	b.n	8009020 <HAL_SPI_TransmitReceive+0x43c>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c12:	f7fd fcd1 	bl	80065b8 <HAL_GetTick>
 8008c16:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c1e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008c26:	887b      	ldrh	r3, [r7, #2]
 8008c28:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008c2a:	887b      	ldrh	r3, [r7, #2]
 8008c2c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c2e:	7efb      	ldrb	r3, [r7, #27]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d00e      	beq.n	8008c52 <HAL_SPI_TransmitReceive+0x6e>
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c3a:	d106      	bne.n	8008c4a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d102      	bne.n	8008c4a <HAL_SPI_TransmitReceive+0x66>
 8008c44:	7efb      	ldrb	r3, [r7, #27]
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d003      	beq.n	8008c52 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008c50:	e1e0      	b.n	8009014 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d005      	beq.n	8008c64 <HAL_SPI_TransmitReceive+0x80>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <HAL_SPI_TransmitReceive+0x80>
 8008c5e:	887b      	ldrh	r3, [r7, #2]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d103      	bne.n	8008c6c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008c6a:	e1d3      	b.n	8009014 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d003      	beq.n	8008c80 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2205      	movs	r2, #5
 8008c7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	887a      	ldrh	r2, [r7, #2]
 8008c90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	887a      	ldrh	r2, [r7, #2]
 8008c98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	887a      	ldrh	r2, [r7, #2]
 8008ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	887a      	ldrh	r2, [r7, #2]
 8008cac:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008cc2:	d802      	bhi.n	8008cca <HAL_SPI_TransmitReceive+0xe6>
 8008cc4:	8a3b      	ldrh	r3, [r7, #16]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d908      	bls.n	8008cdc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008cd8:	605a      	str	r2, [r3, #4]
 8008cda:	e007      	b.n	8008cec <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008cea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf6:	2b40      	cmp	r3, #64	@ 0x40
 8008cf8:	d007      	beq.n	8008d0a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d12:	f240 8081 	bls.w	8008e18 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <HAL_SPI_TransmitReceive+0x140>
 8008d1e:	8a7b      	ldrh	r3, [r7, #18]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d16d      	bne.n	8008e00 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d28:	881a      	ldrh	r2, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d34:	1c9a      	adds	r2, r3, #2
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d48:	e05a      	b.n	8008e00 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f003 0302 	and.w	r3, r3, #2
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d11b      	bne.n	8008d90 <HAL_SPI_TransmitReceive+0x1ac>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d016      	beq.n	8008d90 <HAL_SPI_TransmitReceive+0x1ac>
 8008d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d113      	bne.n	8008d90 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d6c:	881a      	ldrh	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d78:	1c9a      	adds	r2, r3, #2
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	3b01      	subs	r3, #1
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d11c      	bne.n	8008dd8 <HAL_SPI_TransmitReceive+0x1f4>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d016      	beq.n	8008dd8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db4:	b292      	uxth	r2, r2
 8008db6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dbc:	1c9a      	adds	r2, r3, #2
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008dd8:	f7fd fbee 	bl	80065b8 <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d80b      	bhi.n	8008e00 <HAL_SPI_TransmitReceive+0x21c>
 8008de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dee:	d007      	beq.n	8008e00 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008dfe:	e109      	b.n	8009014 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d19f      	bne.n	8008d4a <HAL_SPI_TransmitReceive+0x166>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d199      	bne.n	8008d4a <HAL_SPI_TransmitReceive+0x166>
 8008e16:	e0e3      	b.n	8008fe0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <HAL_SPI_TransmitReceive+0x244>
 8008e20:	8a7b      	ldrh	r3, [r7, #18]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	f040 80cf 	bne.w	8008fc6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d912      	bls.n	8008e58 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e36:	881a      	ldrh	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e42:	1c9a      	adds	r2, r3, #2
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b02      	subs	r3, #2
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008e56:	e0b6      	b.n	8008fc6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	330c      	adds	r3, #12
 8008e62:	7812      	ldrb	r2, [r2, #0]
 8008e64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e7e:	e0a2      	b.n	8008fc6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d134      	bne.n	8008ef8 <HAL_SPI_TransmitReceive+0x314>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d02f      	beq.n	8008ef8 <HAL_SPI_TransmitReceive+0x314>
 8008e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d12c      	bne.n	8008ef8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d912      	bls.n	8008ece <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eac:	881a      	ldrh	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb8:	1c9a      	adds	r2, r3, #2
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	3b02      	subs	r3, #2
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ecc:	e012      	b.n	8008ef4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	330c      	adds	r3, #12
 8008ed8:	7812      	ldrb	r2, [r2, #0]
 8008eda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d148      	bne.n	8008f98 <HAL_SPI_TransmitReceive+0x3b4>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d042      	beq.n	8008f98 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d923      	bls.n	8008f66 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f28:	b292      	uxth	r2, r2
 8008f2a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f30:	1c9a      	adds	r2, r3, #2
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	3b02      	subs	r3, #2
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d81f      	bhi.n	8008f94 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f62:	605a      	str	r2, [r3, #4]
 8008f64:	e016      	b.n	8008f94 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f103 020c 	add.w	r2, r3, #12
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f72:	7812      	ldrb	r2, [r2, #0]
 8008f74:	b2d2      	uxtb	r2, r2
 8008f76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f94:	2301      	movs	r3, #1
 8008f96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f98:	f7fd fb0e 	bl	80065b8 <HAL_GetTick>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d803      	bhi.n	8008fb0 <HAL_SPI_TransmitReceive+0x3cc>
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008faa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fae:	d102      	bne.n	8008fb6 <HAL_SPI_TransmitReceive+0x3d2>
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d107      	bne.n	8008fc6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008fc4:	e026      	b.n	8009014 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f47f af57 	bne.w	8008e80 <HAL_SPI_TransmitReceive+0x29c>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f47f af50 	bne.w	8008e80 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fe0:	69fa      	ldr	r2, [r7, #28]
 8008fe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 f93d 	bl	8009264 <SPI_EndRxTxTransaction>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800900a:	e003      	b.n	8009014 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800901c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009020:	4618      	mov	r0, r3
 8009022:	3728      	adds	r7, #40	@ 0x28
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	4613      	mov	r3, r2
 8009036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009038:	f7fd fabe 	bl	80065b8 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009040:	1a9b      	subs	r3, r3, r2
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	4413      	add	r3, r2
 8009046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009048:	f7fd fab6 	bl	80065b8 <HAL_GetTick>
 800904c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800904e:	4b39      	ldr	r3, [pc, #228]	@ (8009134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	015b      	lsls	r3, r3, #5
 8009054:	0d1b      	lsrs	r3, r3, #20
 8009056:	69fa      	ldr	r2, [r7, #28]
 8009058:	fb02 f303 	mul.w	r3, r2, r3
 800905c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800905e:	e054      	b.n	800910a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009066:	d050      	beq.n	800910a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009068:	f7fd faa6 	bl	80065b8 <HAL_GetTick>
 800906c:	4602      	mov	r2, r0
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	69fa      	ldr	r2, [r7, #28]
 8009074:	429a      	cmp	r2, r3
 8009076:	d902      	bls.n	800907e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d13d      	bne.n	80090fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800908c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009096:	d111      	bne.n	80090bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090a0:	d004      	beq.n	80090ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090aa:	d107      	bne.n	80090bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090c4:	d10f      	bne.n	80090e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80090e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e017      	b.n	800912a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	3b01      	subs	r3, #1
 8009108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689a      	ldr	r2, [r3, #8]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4013      	ands	r3, r2
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	429a      	cmp	r2, r3
 8009118:	bf0c      	ite	eq
 800911a:	2301      	moveq	r3, #1
 800911c:	2300      	movne	r3, #0
 800911e:	b2db      	uxtb	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	79fb      	ldrb	r3, [r7, #7]
 8009124:	429a      	cmp	r2, r3
 8009126:	d19b      	bne.n	8009060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3720      	adds	r7, #32
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	2000000c 	.word	0x2000000c

08009138 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08a      	sub	sp, #40	@ 0x28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800914a:	f7fd fa35 	bl	80065b8 <HAL_GetTick>
 800914e:	4602      	mov	r2, r0
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	4413      	add	r3, r2
 8009158:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800915a:	f7fd fa2d 	bl	80065b8 <HAL_GetTick>
 800915e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	330c      	adds	r3, #12
 8009166:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009168:	4b3d      	ldr	r3, [pc, #244]	@ (8009260 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	4613      	mov	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	00da      	lsls	r2, r3, #3
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	0d1b      	lsrs	r3, r3, #20
 8009178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800917a:	fb02 f303 	mul.w	r3, r2, r3
 800917e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009180:	e060      	b.n	8009244 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009188:	d107      	bne.n	800919a <SPI_WaitFifoStateUntilTimeout+0x62>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d104      	bne.n	800919a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	b2db      	uxtb	r3, r3
 8009196:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009198:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091a0:	d050      	beq.n	8009244 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091a2:	f7fd fa09 	bl	80065b8 <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d902      	bls.n	80091b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d13d      	bne.n	8009234 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80091c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091d0:	d111      	bne.n	80091f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091da:	d004      	beq.n	80091e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091e4:	d107      	bne.n	80091f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091fe:	d10f      	bne.n	8009220 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800921e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e010      	b.n	8009256 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	3b01      	subs	r3, #1
 8009242:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689a      	ldr	r2, [r3, #8]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	4013      	ands	r3, r2
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	429a      	cmp	r2, r3
 8009252:	d196      	bne.n	8009182 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3728      	adds	r7, #40	@ 0x28
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	2000000c 	.word	0x2000000c

08009264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af02      	add	r7, sp, #8
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2200      	movs	r2, #0
 8009278:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7ff ff5b 	bl	8009138 <SPI_WaitFifoStateUntilTimeout>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d007      	beq.n	8009298 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800928c:	f043 0220 	orr.w	r2, r3, #32
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e046      	b.n	8009326 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009298:	4b25      	ldr	r3, [pc, #148]	@ (8009330 <SPI_EndRxTxTransaction+0xcc>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a25      	ldr	r2, [pc, #148]	@ (8009334 <SPI_EndRxTxTransaction+0xd0>)
 800929e:	fba2 2303 	umull	r2, r3, r2, r3
 80092a2:	0d5b      	lsrs	r3, r3, #21
 80092a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80092a8:	fb02 f303 	mul.w	r3, r2, r3
 80092ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092b6:	d112      	bne.n	80092de <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2200      	movs	r2, #0
 80092c0:	2180      	movs	r1, #128	@ 0x80
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f7ff feb0 	bl	8009028 <SPI_WaitFlagStateUntilTimeout>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d016      	beq.n	80092fc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092d2:	f043 0220 	orr.w	r2, r3, #32
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e023      	b.n	8009326 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00a      	beq.n	80092fa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f4:	2b80      	cmp	r3, #128	@ 0x80
 80092f6:	d0f2      	beq.n	80092de <SPI_EndRxTxTransaction+0x7a>
 80092f8:	e000      	b.n	80092fc <SPI_EndRxTxTransaction+0x98>
        break;
 80092fa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2200      	movs	r2, #0
 8009304:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff ff15 	bl	8009138 <SPI_WaitFifoStateUntilTimeout>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d007      	beq.n	8009324 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009318:	f043 0220 	orr.w	r2, r3, #32
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e000      	b.n	8009326 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	2000000c 	.word	0x2000000c
 8009334:	165e9f81 	.word	0x165e9f81

08009338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e049      	b.n	80093de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d106      	bne.n	8009364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7f8 ff94 	bl	800228c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3304      	adds	r3, #4
 8009374:	4619      	mov	r1, r3
 8009376:	4610      	mov	r0, r2
 8009378:	f000 fc1c 	bl	8009bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d001      	beq.n	8009400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e054      	b.n	80094aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68da      	ldr	r2, [r3, #12]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0201 	orr.w	r2, r2, #1
 8009416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a26      	ldr	r2, [pc, #152]	@ (80094b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d022      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x80>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800942a:	d01d      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x80>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a22      	ldr	r2, [pc, #136]	@ (80094bc <HAL_TIM_Base_Start_IT+0xd4>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d018      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x80>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a21      	ldr	r2, [pc, #132]	@ (80094c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d013      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x80>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a1f      	ldr	r2, [pc, #124]	@ (80094c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d00e      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x80>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a1e      	ldr	r2, [pc, #120]	@ (80094c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d009      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x80>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a1c      	ldr	r2, [pc, #112]	@ (80094cc <HAL_TIM_Base_Start_IT+0xe4>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d004      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x80>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a1b      	ldr	r2, [pc, #108]	@ (80094d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d115      	bne.n	8009494 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689a      	ldr	r2, [r3, #8]
 800946e:	4b19      	ldr	r3, [pc, #100]	@ (80094d4 <HAL_TIM_Base_Start_IT+0xec>)
 8009470:	4013      	ands	r3, r2
 8009472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b06      	cmp	r3, #6
 8009478:	d015      	beq.n	80094a6 <HAL_TIM_Base_Start_IT+0xbe>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009480:	d011      	beq.n	80094a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f042 0201 	orr.w	r2, r2, #1
 8009490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009492:	e008      	b.n	80094a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0201 	orr.w	r2, r2, #1
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	e000      	b.n	80094a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	40010000 	.word	0x40010000
 80094bc:	40000400 	.word	0x40000400
 80094c0:	40000800 	.word	0x40000800
 80094c4:	40000c00 	.word	0x40000c00
 80094c8:	40010400 	.word	0x40010400
 80094cc:	40014000 	.word	0x40014000
 80094d0:	40001800 	.word	0x40001800
 80094d4:	00010007 	.word	0x00010007

080094d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e049      	b.n	800957e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d106      	bne.n	8009504 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7f8 fefc 	bl	80022fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3304      	adds	r3, #4
 8009514:	4619      	mov	r1, r3
 8009516:	4610      	mov	r0, r2
 8009518:	f000 fb4c 	bl	8009bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d020      	beq.n	80095ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d01b      	beq.n	80095ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f06f 0202 	mvn.w	r2, #2
 80095ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	f003 0303 	and.w	r3, r3, #3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d003      	beq.n	80095d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fad1 	bl	8009b78 <HAL_TIM_IC_CaptureCallback>
 80095d6:	e005      	b.n	80095e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fac3 	bl	8009b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fad4 	bl	8009b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f003 0304 	and.w	r3, r3, #4
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d020      	beq.n	8009636 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f003 0304 	and.w	r3, r3, #4
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d01b      	beq.n	8009636 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f06f 0204 	mvn.w	r2, #4
 8009606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 faab 	bl	8009b78 <HAL_TIM_IC_CaptureCallback>
 8009622:	e005      	b.n	8009630 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fa9d 	bl	8009b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 faae 	bl	8009b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f003 0308 	and.w	r3, r3, #8
 800963c:	2b00      	cmp	r3, #0
 800963e:	d020      	beq.n	8009682 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f003 0308 	and.w	r3, r3, #8
 8009646:	2b00      	cmp	r3, #0
 8009648:	d01b      	beq.n	8009682 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f06f 0208 	mvn.w	r2, #8
 8009652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2204      	movs	r2, #4
 8009658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	f003 0303 	and.w	r3, r3, #3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d003      	beq.n	8009670 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fa85 	bl	8009b78 <HAL_TIM_IC_CaptureCallback>
 800966e:	e005      	b.n	800967c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fa77 	bl	8009b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa88 	bl	8009b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f003 0310 	and.w	r3, r3, #16
 8009688:	2b00      	cmp	r3, #0
 800968a:	d020      	beq.n	80096ce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f003 0310 	and.w	r3, r3, #16
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01b      	beq.n	80096ce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f06f 0210 	mvn.w	r2, #16
 800969e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2208      	movs	r2, #8
 80096a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fa5f 	bl	8009b78 <HAL_TIM_IC_CaptureCallback>
 80096ba:	e005      	b.n	80096c8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fa51 	bl	8009b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fa62 	bl	8009b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00c      	beq.n	80096f2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d007      	beq.n	80096f2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f06f 0201 	mvn.w	r2, #1
 80096ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fa2f 	bl	8009b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d104      	bne.n	8009706 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00c      	beq.n	8009720 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800970c:	2b00      	cmp	r3, #0
 800970e:	d007      	beq.n	8009720 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fe86 	bl	800a42c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00c      	beq.n	8009744 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800973c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fe7e 	bl	800a440 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00c      	beq.n	8009768 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009754:	2b00      	cmp	r3, #0
 8009756:	d007      	beq.n	8009768 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fa1c 	bl	8009ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f003 0320 	and.w	r3, r3, #32
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00c      	beq.n	800978c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f003 0320 	and.w	r3, r3, #32
 8009778:	2b00      	cmp	r3, #0
 800977a:	d007      	beq.n	800978c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f06f 0220 	mvn.w	r2, #32
 8009784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fe46 	bl	800a418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800978c:	bf00      	nop
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d101      	bne.n	80097b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80097ae:	2302      	movs	r3, #2
 80097b0:	e0ff      	b.n	80099b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b14      	cmp	r3, #20
 80097be:	f200 80f0 	bhi.w	80099a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80097c2:	a201      	add	r2, pc, #4	@ (adr r2, 80097c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80097c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c8:	0800981d 	.word	0x0800981d
 80097cc:	080099a3 	.word	0x080099a3
 80097d0:	080099a3 	.word	0x080099a3
 80097d4:	080099a3 	.word	0x080099a3
 80097d8:	0800985d 	.word	0x0800985d
 80097dc:	080099a3 	.word	0x080099a3
 80097e0:	080099a3 	.word	0x080099a3
 80097e4:	080099a3 	.word	0x080099a3
 80097e8:	0800989f 	.word	0x0800989f
 80097ec:	080099a3 	.word	0x080099a3
 80097f0:	080099a3 	.word	0x080099a3
 80097f4:	080099a3 	.word	0x080099a3
 80097f8:	080098df 	.word	0x080098df
 80097fc:	080099a3 	.word	0x080099a3
 8009800:	080099a3 	.word	0x080099a3
 8009804:	080099a3 	.word	0x080099a3
 8009808:	08009921 	.word	0x08009921
 800980c:	080099a3 	.word	0x080099a3
 8009810:	080099a3 	.word	0x080099a3
 8009814:	080099a3 	.word	0x080099a3
 8009818:	08009961 	.word	0x08009961
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68b9      	ldr	r1, [r7, #8]
 8009822:	4618      	mov	r0, r3
 8009824:	f000 fa72 	bl	8009d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	699a      	ldr	r2, [r3, #24]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0208 	orr.w	r2, r2, #8
 8009836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	699a      	ldr	r2, [r3, #24]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 0204 	bic.w	r2, r2, #4
 8009846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6999      	ldr	r1, [r3, #24]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	691a      	ldr	r2, [r3, #16]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	619a      	str	r2, [r3, #24]
      break;
 800985a:	e0a5      	b.n	80099a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 fac4 	bl	8009df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699a      	ldr	r2, [r3, #24]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	699a      	ldr	r2, [r3, #24]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6999      	ldr	r1, [r3, #24]
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	021a      	lsls	r2, r3, #8
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	619a      	str	r2, [r3, #24]
      break;
 800989c:	e084      	b.n	80099a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68b9      	ldr	r1, [r7, #8]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 fb1b 	bl	8009ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	69da      	ldr	r2, [r3, #28]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f042 0208 	orr.w	r2, r2, #8
 80098b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69da      	ldr	r2, [r3, #28]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0204 	bic.w	r2, r2, #4
 80098c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	69d9      	ldr	r1, [r3, #28]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	691a      	ldr	r2, [r3, #16]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	61da      	str	r2, [r3, #28]
      break;
 80098dc:	e064      	b.n	80099a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68b9      	ldr	r1, [r7, #8]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fb71 	bl	8009fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	69da      	ldr	r2, [r3, #28]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69da      	ldr	r2, [r3, #28]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	69d9      	ldr	r1, [r3, #28]
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	021a      	lsls	r2, r3, #8
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	430a      	orrs	r2, r1
 800991c:	61da      	str	r2, [r3, #28]
      break;
 800991e:	e043      	b.n	80099a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68b9      	ldr	r1, [r7, #8]
 8009926:	4618      	mov	r0, r3
 8009928:	f000 fba8 	bl	800a07c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f042 0208 	orr.w	r2, r2, #8
 800993a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f022 0204 	bic.w	r2, r2, #4
 800994a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	691a      	ldr	r2, [r3, #16]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800995e:	e023      	b.n	80099a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68b9      	ldr	r1, [r7, #8]
 8009966:	4618      	mov	r0, r3
 8009968:	f000 fbda 	bl	800a120 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800997a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800998a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	021a      	lsls	r2, r3, #8
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80099a0:	e002      	b.n	80099a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	75fb      	strb	r3, [r7, #23]
      break;
 80099a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80099b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop

080099bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d101      	bne.n	80099d8 <HAL_TIM_ConfigClockSource+0x1c>
 80099d4:	2302      	movs	r3, #2
 80099d6:	e0b4      	b.n	8009b42 <HAL_TIM_ConfigClockSource+0x186>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	4b56      	ldr	r3, [pc, #344]	@ (8009b4c <HAL_TIM_ConfigClockSource+0x190>)
 80099f4:	4013      	ands	r3, r2
 80099f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a10:	d03e      	beq.n	8009a90 <HAL_TIM_ConfigClockSource+0xd4>
 8009a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a16:	f200 8087 	bhi.w	8009b28 <HAL_TIM_ConfigClockSource+0x16c>
 8009a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a1e:	f000 8086 	beq.w	8009b2e <HAL_TIM_ConfigClockSource+0x172>
 8009a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a26:	d87f      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x16c>
 8009a28:	2b70      	cmp	r3, #112	@ 0x70
 8009a2a:	d01a      	beq.n	8009a62 <HAL_TIM_ConfigClockSource+0xa6>
 8009a2c:	2b70      	cmp	r3, #112	@ 0x70
 8009a2e:	d87b      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x16c>
 8009a30:	2b60      	cmp	r3, #96	@ 0x60
 8009a32:	d050      	beq.n	8009ad6 <HAL_TIM_ConfigClockSource+0x11a>
 8009a34:	2b60      	cmp	r3, #96	@ 0x60
 8009a36:	d877      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x16c>
 8009a38:	2b50      	cmp	r3, #80	@ 0x50
 8009a3a:	d03c      	beq.n	8009ab6 <HAL_TIM_ConfigClockSource+0xfa>
 8009a3c:	2b50      	cmp	r3, #80	@ 0x50
 8009a3e:	d873      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x16c>
 8009a40:	2b40      	cmp	r3, #64	@ 0x40
 8009a42:	d058      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x13a>
 8009a44:	2b40      	cmp	r3, #64	@ 0x40
 8009a46:	d86f      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x16c>
 8009a48:	2b30      	cmp	r3, #48	@ 0x30
 8009a4a:	d064      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0x15a>
 8009a4c:	2b30      	cmp	r3, #48	@ 0x30
 8009a4e:	d86b      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x16c>
 8009a50:	2b20      	cmp	r3, #32
 8009a52:	d060      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0x15a>
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	d867      	bhi.n	8009b28 <HAL_TIM_ConfigClockSource+0x16c>
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d05c      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0x15a>
 8009a5c:	2b10      	cmp	r3, #16
 8009a5e:	d05a      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0x15a>
 8009a60:	e062      	b.n	8009b28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a72:	f000 fc23 	bl	800a2bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	609a      	str	r2, [r3, #8]
      break;
 8009a8e:	e04f      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009aa0:	f000 fc0c 	bl	800a2bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	689a      	ldr	r2, [r3, #8]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ab2:	609a      	str	r2, [r3, #8]
      break;
 8009ab4:	e03c      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f000 fb80 	bl	800a1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2150      	movs	r1, #80	@ 0x50
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 fbd9 	bl	800a286 <TIM_ITRx_SetConfig>
      break;
 8009ad4:	e02c      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f000 fb9f 	bl	800a226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2160      	movs	r1, #96	@ 0x60
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 fbc9 	bl	800a286 <TIM_ITRx_SetConfig>
      break;
 8009af4:	e01c      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b02:	461a      	mov	r2, r3
 8009b04:	f000 fb60 	bl	800a1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2140      	movs	r1, #64	@ 0x40
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fbb9 	bl	800a286 <TIM_ITRx_SetConfig>
      break;
 8009b14:	e00c      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	4610      	mov	r0, r2
 8009b22:	f000 fbb0 	bl	800a286 <TIM_ITRx_SetConfig>
      break;
 8009b26:	e003      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b2c:	e000      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	fffeff88 	.word	0xfffeff88

08009b50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a46      	ldr	r2, [pc, #280]	@ (8009ce0 <TIM_Base_SetConfig+0x12c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d013      	beq.n	8009bf4 <TIM_Base_SetConfig+0x40>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bd2:	d00f      	beq.n	8009bf4 <TIM_Base_SetConfig+0x40>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a43      	ldr	r2, [pc, #268]	@ (8009ce4 <TIM_Base_SetConfig+0x130>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d00b      	beq.n	8009bf4 <TIM_Base_SetConfig+0x40>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a42      	ldr	r2, [pc, #264]	@ (8009ce8 <TIM_Base_SetConfig+0x134>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d007      	beq.n	8009bf4 <TIM_Base_SetConfig+0x40>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a41      	ldr	r2, [pc, #260]	@ (8009cec <TIM_Base_SetConfig+0x138>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d003      	beq.n	8009bf4 <TIM_Base_SetConfig+0x40>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a40      	ldr	r2, [pc, #256]	@ (8009cf0 <TIM_Base_SetConfig+0x13c>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d108      	bne.n	8009c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a35      	ldr	r2, [pc, #212]	@ (8009ce0 <TIM_Base_SetConfig+0x12c>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d02b      	beq.n	8009c66 <TIM_Base_SetConfig+0xb2>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c14:	d027      	beq.n	8009c66 <TIM_Base_SetConfig+0xb2>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a32      	ldr	r2, [pc, #200]	@ (8009ce4 <TIM_Base_SetConfig+0x130>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d023      	beq.n	8009c66 <TIM_Base_SetConfig+0xb2>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a31      	ldr	r2, [pc, #196]	@ (8009ce8 <TIM_Base_SetConfig+0x134>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d01f      	beq.n	8009c66 <TIM_Base_SetConfig+0xb2>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a30      	ldr	r2, [pc, #192]	@ (8009cec <TIM_Base_SetConfig+0x138>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d01b      	beq.n	8009c66 <TIM_Base_SetConfig+0xb2>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a2f      	ldr	r2, [pc, #188]	@ (8009cf0 <TIM_Base_SetConfig+0x13c>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d017      	beq.n	8009c66 <TIM_Base_SetConfig+0xb2>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a2e      	ldr	r2, [pc, #184]	@ (8009cf4 <TIM_Base_SetConfig+0x140>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d013      	beq.n	8009c66 <TIM_Base_SetConfig+0xb2>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a2d      	ldr	r2, [pc, #180]	@ (8009cf8 <TIM_Base_SetConfig+0x144>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d00f      	beq.n	8009c66 <TIM_Base_SetConfig+0xb2>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a2c      	ldr	r2, [pc, #176]	@ (8009cfc <TIM_Base_SetConfig+0x148>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d00b      	beq.n	8009c66 <TIM_Base_SetConfig+0xb2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a2b      	ldr	r2, [pc, #172]	@ (8009d00 <TIM_Base_SetConfig+0x14c>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d007      	beq.n	8009c66 <TIM_Base_SetConfig+0xb2>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a2a      	ldr	r2, [pc, #168]	@ (8009d04 <TIM_Base_SetConfig+0x150>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d003      	beq.n	8009c66 <TIM_Base_SetConfig+0xb2>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a29      	ldr	r2, [pc, #164]	@ (8009d08 <TIM_Base_SetConfig+0x154>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d108      	bne.n	8009c78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a10      	ldr	r2, [pc, #64]	@ (8009ce0 <TIM_Base_SetConfig+0x12c>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d003      	beq.n	8009cac <TIM_Base_SetConfig+0xf8>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a12      	ldr	r2, [pc, #72]	@ (8009cf0 <TIM_Base_SetConfig+0x13c>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d103      	bne.n	8009cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	691a      	ldr	r2, [r3, #16]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d105      	bne.n	8009cd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	f023 0201 	bic.w	r2, r3, #1
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	611a      	str	r2, [r3, #16]
  }
}
 8009cd2:	bf00      	nop
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	40010000 	.word	0x40010000
 8009ce4:	40000400 	.word	0x40000400
 8009ce8:	40000800 	.word	0x40000800
 8009cec:	40000c00 	.word	0x40000c00
 8009cf0:	40010400 	.word	0x40010400
 8009cf4:	40014000 	.word	0x40014000
 8009cf8:	40014400 	.word	0x40014400
 8009cfc:	40014800 	.word	0x40014800
 8009d00:	40001800 	.word	0x40001800
 8009d04:	40001c00 	.word	0x40001c00
 8009d08:	40002000 	.word	0x40002000

08009d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	f023 0201 	bic.w	r2, r3, #1
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	4b2b      	ldr	r3, [pc, #172]	@ (8009de4 <TIM_OC1_SetConfig+0xd8>)
 8009d38:	4013      	ands	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f023 0303 	bic.w	r3, r3, #3
 8009d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f023 0302 	bic.w	r3, r3, #2
 8009d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a21      	ldr	r2, [pc, #132]	@ (8009de8 <TIM_OC1_SetConfig+0xdc>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d003      	beq.n	8009d70 <TIM_OC1_SetConfig+0x64>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a20      	ldr	r2, [pc, #128]	@ (8009dec <TIM_OC1_SetConfig+0xe0>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d10c      	bne.n	8009d8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	f023 0308 	bic.w	r3, r3, #8
 8009d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f023 0304 	bic.w	r3, r3, #4
 8009d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a16      	ldr	r2, [pc, #88]	@ (8009de8 <TIM_OC1_SetConfig+0xdc>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d003      	beq.n	8009d9a <TIM_OC1_SetConfig+0x8e>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a15      	ldr	r2, [pc, #84]	@ (8009dec <TIM_OC1_SetConfig+0xe0>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d111      	bne.n	8009dbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	621a      	str	r2, [r3, #32]
}
 8009dd8:	bf00      	nop
 8009dda:	371c      	adds	r7, #28
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	fffeff8f 	.word	0xfffeff8f
 8009de8:	40010000 	.word	0x40010000
 8009dec:	40010400 	.word	0x40010400

08009df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a1b      	ldr	r3, [r3, #32]
 8009e04:	f023 0210 	bic.w	r2, r3, #16
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8009ed4 <TIM_OC2_SetConfig+0xe4>)
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	021b      	lsls	r3, r3, #8
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	f023 0320 	bic.w	r3, r3, #32
 8009e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	011b      	lsls	r3, r3, #4
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a23      	ldr	r2, [pc, #140]	@ (8009ed8 <TIM_OC2_SetConfig+0xe8>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d003      	beq.n	8009e58 <TIM_OC2_SetConfig+0x68>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a22      	ldr	r2, [pc, #136]	@ (8009edc <TIM_OC2_SetConfig+0xec>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d10d      	bne.n	8009e74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	011b      	lsls	r3, r3, #4
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a18      	ldr	r2, [pc, #96]	@ (8009ed8 <TIM_OC2_SetConfig+0xe8>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d003      	beq.n	8009e84 <TIM_OC2_SetConfig+0x94>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a17      	ldr	r2, [pc, #92]	@ (8009edc <TIM_OC2_SetConfig+0xec>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d113      	bne.n	8009eac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	621a      	str	r2, [r3, #32]
}
 8009ec6:	bf00      	nop
 8009ec8:	371c      	adds	r7, #28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	feff8fff 	.word	0xfeff8fff
 8009ed8:	40010000 	.word	0x40010000
 8009edc:	40010400 	.word	0x40010400

08009ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a1b      	ldr	r3, [r3, #32]
 8009ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8009fc0 <TIM_OC3_SetConfig+0xe0>)
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f023 0303 	bic.w	r3, r3, #3
 8009f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	021b      	lsls	r3, r3, #8
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a22      	ldr	r2, [pc, #136]	@ (8009fc4 <TIM_OC3_SetConfig+0xe4>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d003      	beq.n	8009f46 <TIM_OC3_SetConfig+0x66>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a21      	ldr	r2, [pc, #132]	@ (8009fc8 <TIM_OC3_SetConfig+0xe8>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d10d      	bne.n	8009f62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	021b      	lsls	r3, r3, #8
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a17      	ldr	r2, [pc, #92]	@ (8009fc4 <TIM_OC3_SetConfig+0xe4>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d003      	beq.n	8009f72 <TIM_OC3_SetConfig+0x92>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a16      	ldr	r2, [pc, #88]	@ (8009fc8 <TIM_OC3_SetConfig+0xe8>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d113      	bne.n	8009f9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	621a      	str	r2, [r3, #32]
}
 8009fb4:	bf00      	nop
 8009fb6:	371c      	adds	r7, #28
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	fffeff8f 	.word	0xfffeff8f
 8009fc4:	40010000 	.word	0x40010000
 8009fc8:	40010400 	.word	0x40010400

08009fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b087      	sub	sp, #28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	4b1e      	ldr	r3, [pc, #120]	@ (800a070 <TIM_OC4_SetConfig+0xa4>)
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	021b      	lsls	r3, r3, #8
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	031b      	lsls	r3, r3, #12
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	4313      	orrs	r3, r2
 800a022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a13      	ldr	r2, [pc, #76]	@ (800a074 <TIM_OC4_SetConfig+0xa8>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d003      	beq.n	800a034 <TIM_OC4_SetConfig+0x68>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a12      	ldr	r2, [pc, #72]	@ (800a078 <TIM_OC4_SetConfig+0xac>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d109      	bne.n	800a048 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a03a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	019b      	lsls	r3, r3, #6
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	4313      	orrs	r3, r2
 800a046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	621a      	str	r2, [r3, #32]
}
 800a062:	bf00      	nop
 800a064:	371c      	adds	r7, #28
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	feff8fff 	.word	0xfeff8fff
 800a074:	40010000 	.word	0x40010000
 800a078:	40010400 	.word	0x40010400

0800a07c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4b1b      	ldr	r3, [pc, #108]	@ (800a114 <TIM_OC5_SetConfig+0x98>)
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a0bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	041b      	lsls	r3, r3, #16
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a12      	ldr	r2, [pc, #72]	@ (800a118 <TIM_OC5_SetConfig+0x9c>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d003      	beq.n	800a0da <TIM_OC5_SetConfig+0x5e>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a11      	ldr	r2, [pc, #68]	@ (800a11c <TIM_OC5_SetConfig+0xa0>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d109      	bne.n	800a0ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	021b      	lsls	r3, r3, #8
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	621a      	str	r2, [r3, #32]
}
 800a108:	bf00      	nop
 800a10a:	371c      	adds	r7, #28
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	fffeff8f 	.word	0xfffeff8f
 800a118:	40010000 	.word	0x40010000
 800a11c:	40010400 	.word	0x40010400

0800a120 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a1b      	ldr	r3, [r3, #32]
 800a134:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	4b1c      	ldr	r3, [pc, #112]	@ (800a1bc <TIM_OC6_SetConfig+0x9c>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	021b      	lsls	r3, r3, #8
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	4313      	orrs	r3, r2
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	051b      	lsls	r3, r3, #20
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a13      	ldr	r2, [pc, #76]	@ (800a1c0 <TIM_OC6_SetConfig+0xa0>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d003      	beq.n	800a180 <TIM_OC6_SetConfig+0x60>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a12      	ldr	r2, [pc, #72]	@ (800a1c4 <TIM_OC6_SetConfig+0xa4>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d109      	bne.n	800a194 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a186:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	029b      	lsls	r3, r3, #10
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	621a      	str	r2, [r3, #32]
}
 800a1ae:	bf00      	nop
 800a1b0:	371c      	adds	r7, #28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	feff8fff 	.word	0xfeff8fff
 800a1c0:	40010000 	.word	0x40010000
 800a1c4:	40010400 	.word	0x40010400

0800a1c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	f023 0201 	bic.w	r2, r3, #1
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	011b      	lsls	r3, r3, #4
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f023 030a 	bic.w	r3, r3, #10
 800a204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	621a      	str	r2, [r3, #32]
}
 800a21a:	bf00      	nop
 800a21c:	371c      	adds	r7, #28
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a226:	b480      	push	{r7}
 800a228:	b087      	sub	sp, #28
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	60f8      	str	r0, [r7, #12]
 800a22e:	60b9      	str	r1, [r7, #8]
 800a230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	f023 0210 	bic.w	r2, r3, #16
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	031b      	lsls	r3, r3, #12
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	4313      	orrs	r3, r2
 800a25a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	011b      	lsls	r3, r3, #4
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	621a      	str	r2, [r3, #32]
}
 800a27a:	bf00      	nop
 800a27c:	371c      	adds	r7, #28
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a286:	b480      	push	{r7}
 800a288:	b085      	sub	sp, #20
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a29c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	f043 0307 	orr.w	r3, r3, #7
 800a2a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	609a      	str	r2, [r3, #8]
}
 800a2b0:	bf00      	nop
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b087      	sub	sp, #28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	021a      	lsls	r2, r3, #8
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	609a      	str	r2, [r3, #8]
}
 800a2f0:	bf00      	nop
 800a2f2:	371c      	adds	r7, #28
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d101      	bne.n	800a314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a310:	2302      	movs	r3, #2
 800a312:	e06d      	b.n	800a3f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2202      	movs	r2, #2
 800a320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a30      	ldr	r2, [pc, #192]	@ (800a3fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d004      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a2f      	ldr	r2, [pc, #188]	@ (800a400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d108      	bne.n	800a35a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a34e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	4313      	orrs	r3, r2
 800a358:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a360:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	4313      	orrs	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a20      	ldr	r2, [pc, #128]	@ (800a3fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d022      	beq.n	800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a386:	d01d      	beq.n	800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a1d      	ldr	r2, [pc, #116]	@ (800a404 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d018      	beq.n	800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a1c      	ldr	r2, [pc, #112]	@ (800a408 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d013      	beq.n	800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a1a      	ldr	r2, [pc, #104]	@ (800a40c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d00e      	beq.n	800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a15      	ldr	r2, [pc, #84]	@ (800a400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d009      	beq.n	800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a16      	ldr	r2, [pc, #88]	@ (800a410 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d004      	beq.n	800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a15      	ldr	r2, [pc, #84]	@ (800a414 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d10c      	bne.n	800a3de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	40010000 	.word	0x40010000
 800a400:	40010400 	.word	0x40010400
 800a404:	40000400 	.word	0x40000400
 800a408:	40000800 	.word	0x40000800
 800a40c:	40000c00 	.word	0x40000c00
 800a410:	40014000 	.word	0x40014000
 800a414:	40001800 	.word	0x40001800

0800a418 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e040      	b.n	800a4e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d106      	bne.n	800a47c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7f7 ffea 	bl	8002450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2224      	movs	r2, #36	@ 0x24
 800a480:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f022 0201 	bic.w	r2, r2, #1
 800a490:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fb16 	bl	800aacc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f8af 	bl	800a604 <UART_SetConfig>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d101      	bne.n	800a4b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e01b      	b.n	800a4e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689a      	ldr	r2, [r3, #8]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f042 0201 	orr.w	r2, r2, #1
 800a4de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fb95 	bl	800ac10 <UART_CheckIdleState>
 800a4e6:	4603      	mov	r3, r0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b08a      	sub	sp, #40	@ 0x28
 800a4f4:	af02      	add	r7, sp, #8
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	603b      	str	r3, [r7, #0]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a504:	2b20      	cmp	r3, #32
 800a506:	d177      	bne.n	800a5f8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <HAL_UART_Transmit+0x24>
 800a50e:	88fb      	ldrh	r3, [r7, #6]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e070      	b.n	800a5fa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2221      	movs	r2, #33	@ 0x21
 800a524:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a526:	f7fc f847 	bl	80065b8 <HAL_GetTick>
 800a52a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	88fa      	ldrh	r2, [r7, #6]
 800a530:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	88fa      	ldrh	r2, [r7, #6]
 800a538:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a544:	d108      	bne.n	800a558 <HAL_UART_Transmit+0x68>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d104      	bne.n	800a558 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	61bb      	str	r3, [r7, #24]
 800a556:	e003      	b.n	800a560 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a55c:	2300      	movs	r3, #0
 800a55e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a560:	e02f      	b.n	800a5c2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2200      	movs	r2, #0
 800a56a:	2180      	movs	r1, #128	@ 0x80
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 fbf7 	bl	800ad60 <UART_WaitOnFlagUntilTimeout>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2220      	movs	r2, #32
 800a57c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e03b      	b.n	800a5fa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10b      	bne.n	800a5a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	881b      	ldrh	r3, [r3, #0]
 800a58c:	461a      	mov	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a596:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	3302      	adds	r3, #2
 800a59c:	61bb      	str	r3, [r7, #24]
 800a59e:	e007      	b.n	800a5b0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	781a      	ldrb	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1c9      	bne.n	800a562 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	2140      	movs	r1, #64	@ 0x40
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 fbc1 	bl	800ad60 <UART_WaitOnFlagUntilTimeout>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d004      	beq.n	800a5ee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2220      	movs	r2, #32
 800a5e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e005      	b.n	800a5fa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	e000      	b.n	800a5fa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a5f8:	2302      	movs	r3, #2
  }
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3720      	adds	r7, #32
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
	...

0800a604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b088      	sub	sp, #32
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	431a      	orrs	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	431a      	orrs	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	69db      	ldr	r3, [r3, #28]
 800a624:	4313      	orrs	r3, r2
 800a626:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	4ba6      	ldr	r3, [pc, #664]	@ (800a8c8 <UART_SetConfig+0x2c4>)
 800a630:	4013      	ands	r3, r2
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6812      	ldr	r2, [r2, #0]
 800a636:	6979      	ldr	r1, [r7, #20]
 800a638:	430b      	orrs	r3, r1
 800a63a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	430a      	orrs	r2, r1
 800a650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	699b      	ldr	r3, [r3, #24]
 800a656:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	4313      	orrs	r3, r2
 800a660:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	430a      	orrs	r2, r1
 800a674:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a94      	ldr	r2, [pc, #592]	@ (800a8cc <UART_SetConfig+0x2c8>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d120      	bne.n	800a6c2 <UART_SetConfig+0xbe>
 800a680:	4b93      	ldr	r3, [pc, #588]	@ (800a8d0 <UART_SetConfig+0x2cc>)
 800a682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a686:	f003 0303 	and.w	r3, r3, #3
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	d816      	bhi.n	800a6bc <UART_SetConfig+0xb8>
 800a68e:	a201      	add	r2, pc, #4	@ (adr r2, 800a694 <UART_SetConfig+0x90>)
 800a690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a694:	0800a6a5 	.word	0x0800a6a5
 800a698:	0800a6b1 	.word	0x0800a6b1
 800a69c:	0800a6ab 	.word	0x0800a6ab
 800a6a0:	0800a6b7 	.word	0x0800a6b7
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	77fb      	strb	r3, [r7, #31]
 800a6a8:	e150      	b.n	800a94c <UART_SetConfig+0x348>
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	77fb      	strb	r3, [r7, #31]
 800a6ae:	e14d      	b.n	800a94c <UART_SetConfig+0x348>
 800a6b0:	2304      	movs	r3, #4
 800a6b2:	77fb      	strb	r3, [r7, #31]
 800a6b4:	e14a      	b.n	800a94c <UART_SetConfig+0x348>
 800a6b6:	2308      	movs	r3, #8
 800a6b8:	77fb      	strb	r3, [r7, #31]
 800a6ba:	e147      	b.n	800a94c <UART_SetConfig+0x348>
 800a6bc:	2310      	movs	r3, #16
 800a6be:	77fb      	strb	r3, [r7, #31]
 800a6c0:	e144      	b.n	800a94c <UART_SetConfig+0x348>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a83      	ldr	r2, [pc, #524]	@ (800a8d4 <UART_SetConfig+0x2d0>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d132      	bne.n	800a732 <UART_SetConfig+0x12e>
 800a6cc:	4b80      	ldr	r3, [pc, #512]	@ (800a8d0 <UART_SetConfig+0x2cc>)
 800a6ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6d2:	f003 030c 	and.w	r3, r3, #12
 800a6d6:	2b0c      	cmp	r3, #12
 800a6d8:	d828      	bhi.n	800a72c <UART_SetConfig+0x128>
 800a6da:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e0 <UART_SetConfig+0xdc>)
 800a6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e0:	0800a715 	.word	0x0800a715
 800a6e4:	0800a72d 	.word	0x0800a72d
 800a6e8:	0800a72d 	.word	0x0800a72d
 800a6ec:	0800a72d 	.word	0x0800a72d
 800a6f0:	0800a721 	.word	0x0800a721
 800a6f4:	0800a72d 	.word	0x0800a72d
 800a6f8:	0800a72d 	.word	0x0800a72d
 800a6fc:	0800a72d 	.word	0x0800a72d
 800a700:	0800a71b 	.word	0x0800a71b
 800a704:	0800a72d 	.word	0x0800a72d
 800a708:	0800a72d 	.word	0x0800a72d
 800a70c:	0800a72d 	.word	0x0800a72d
 800a710:	0800a727 	.word	0x0800a727
 800a714:	2300      	movs	r3, #0
 800a716:	77fb      	strb	r3, [r7, #31]
 800a718:	e118      	b.n	800a94c <UART_SetConfig+0x348>
 800a71a:	2302      	movs	r3, #2
 800a71c:	77fb      	strb	r3, [r7, #31]
 800a71e:	e115      	b.n	800a94c <UART_SetConfig+0x348>
 800a720:	2304      	movs	r3, #4
 800a722:	77fb      	strb	r3, [r7, #31]
 800a724:	e112      	b.n	800a94c <UART_SetConfig+0x348>
 800a726:	2308      	movs	r3, #8
 800a728:	77fb      	strb	r3, [r7, #31]
 800a72a:	e10f      	b.n	800a94c <UART_SetConfig+0x348>
 800a72c:	2310      	movs	r3, #16
 800a72e:	77fb      	strb	r3, [r7, #31]
 800a730:	e10c      	b.n	800a94c <UART_SetConfig+0x348>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a68      	ldr	r2, [pc, #416]	@ (800a8d8 <UART_SetConfig+0x2d4>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d120      	bne.n	800a77e <UART_SetConfig+0x17a>
 800a73c:	4b64      	ldr	r3, [pc, #400]	@ (800a8d0 <UART_SetConfig+0x2cc>)
 800a73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a742:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a746:	2b30      	cmp	r3, #48	@ 0x30
 800a748:	d013      	beq.n	800a772 <UART_SetConfig+0x16e>
 800a74a:	2b30      	cmp	r3, #48	@ 0x30
 800a74c:	d814      	bhi.n	800a778 <UART_SetConfig+0x174>
 800a74e:	2b20      	cmp	r3, #32
 800a750:	d009      	beq.n	800a766 <UART_SetConfig+0x162>
 800a752:	2b20      	cmp	r3, #32
 800a754:	d810      	bhi.n	800a778 <UART_SetConfig+0x174>
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <UART_SetConfig+0x15c>
 800a75a:	2b10      	cmp	r3, #16
 800a75c:	d006      	beq.n	800a76c <UART_SetConfig+0x168>
 800a75e:	e00b      	b.n	800a778 <UART_SetConfig+0x174>
 800a760:	2300      	movs	r3, #0
 800a762:	77fb      	strb	r3, [r7, #31]
 800a764:	e0f2      	b.n	800a94c <UART_SetConfig+0x348>
 800a766:	2302      	movs	r3, #2
 800a768:	77fb      	strb	r3, [r7, #31]
 800a76a:	e0ef      	b.n	800a94c <UART_SetConfig+0x348>
 800a76c:	2304      	movs	r3, #4
 800a76e:	77fb      	strb	r3, [r7, #31]
 800a770:	e0ec      	b.n	800a94c <UART_SetConfig+0x348>
 800a772:	2308      	movs	r3, #8
 800a774:	77fb      	strb	r3, [r7, #31]
 800a776:	e0e9      	b.n	800a94c <UART_SetConfig+0x348>
 800a778:	2310      	movs	r3, #16
 800a77a:	77fb      	strb	r3, [r7, #31]
 800a77c:	e0e6      	b.n	800a94c <UART_SetConfig+0x348>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a56      	ldr	r2, [pc, #344]	@ (800a8dc <UART_SetConfig+0x2d8>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d120      	bne.n	800a7ca <UART_SetConfig+0x1c6>
 800a788:	4b51      	ldr	r3, [pc, #324]	@ (800a8d0 <UART_SetConfig+0x2cc>)
 800a78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a78e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a792:	2bc0      	cmp	r3, #192	@ 0xc0
 800a794:	d013      	beq.n	800a7be <UART_SetConfig+0x1ba>
 800a796:	2bc0      	cmp	r3, #192	@ 0xc0
 800a798:	d814      	bhi.n	800a7c4 <UART_SetConfig+0x1c0>
 800a79a:	2b80      	cmp	r3, #128	@ 0x80
 800a79c:	d009      	beq.n	800a7b2 <UART_SetConfig+0x1ae>
 800a79e:	2b80      	cmp	r3, #128	@ 0x80
 800a7a0:	d810      	bhi.n	800a7c4 <UART_SetConfig+0x1c0>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <UART_SetConfig+0x1a8>
 800a7a6:	2b40      	cmp	r3, #64	@ 0x40
 800a7a8:	d006      	beq.n	800a7b8 <UART_SetConfig+0x1b4>
 800a7aa:	e00b      	b.n	800a7c4 <UART_SetConfig+0x1c0>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	77fb      	strb	r3, [r7, #31]
 800a7b0:	e0cc      	b.n	800a94c <UART_SetConfig+0x348>
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	77fb      	strb	r3, [r7, #31]
 800a7b6:	e0c9      	b.n	800a94c <UART_SetConfig+0x348>
 800a7b8:	2304      	movs	r3, #4
 800a7ba:	77fb      	strb	r3, [r7, #31]
 800a7bc:	e0c6      	b.n	800a94c <UART_SetConfig+0x348>
 800a7be:	2308      	movs	r3, #8
 800a7c0:	77fb      	strb	r3, [r7, #31]
 800a7c2:	e0c3      	b.n	800a94c <UART_SetConfig+0x348>
 800a7c4:	2310      	movs	r3, #16
 800a7c6:	77fb      	strb	r3, [r7, #31]
 800a7c8:	e0c0      	b.n	800a94c <UART_SetConfig+0x348>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a44      	ldr	r2, [pc, #272]	@ (800a8e0 <UART_SetConfig+0x2dc>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d125      	bne.n	800a820 <UART_SetConfig+0x21c>
 800a7d4:	4b3e      	ldr	r3, [pc, #248]	@ (800a8d0 <UART_SetConfig+0x2cc>)
 800a7d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7e2:	d017      	beq.n	800a814 <UART_SetConfig+0x210>
 800a7e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7e8:	d817      	bhi.n	800a81a <UART_SetConfig+0x216>
 800a7ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7ee:	d00b      	beq.n	800a808 <UART_SetConfig+0x204>
 800a7f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7f4:	d811      	bhi.n	800a81a <UART_SetConfig+0x216>
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <UART_SetConfig+0x1fe>
 800a7fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7fe:	d006      	beq.n	800a80e <UART_SetConfig+0x20a>
 800a800:	e00b      	b.n	800a81a <UART_SetConfig+0x216>
 800a802:	2300      	movs	r3, #0
 800a804:	77fb      	strb	r3, [r7, #31]
 800a806:	e0a1      	b.n	800a94c <UART_SetConfig+0x348>
 800a808:	2302      	movs	r3, #2
 800a80a:	77fb      	strb	r3, [r7, #31]
 800a80c:	e09e      	b.n	800a94c <UART_SetConfig+0x348>
 800a80e:	2304      	movs	r3, #4
 800a810:	77fb      	strb	r3, [r7, #31]
 800a812:	e09b      	b.n	800a94c <UART_SetConfig+0x348>
 800a814:	2308      	movs	r3, #8
 800a816:	77fb      	strb	r3, [r7, #31]
 800a818:	e098      	b.n	800a94c <UART_SetConfig+0x348>
 800a81a:	2310      	movs	r3, #16
 800a81c:	77fb      	strb	r3, [r7, #31]
 800a81e:	e095      	b.n	800a94c <UART_SetConfig+0x348>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a2f      	ldr	r2, [pc, #188]	@ (800a8e4 <UART_SetConfig+0x2e0>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d125      	bne.n	800a876 <UART_SetConfig+0x272>
 800a82a:	4b29      	ldr	r3, [pc, #164]	@ (800a8d0 <UART_SetConfig+0x2cc>)
 800a82c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a830:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a834:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a838:	d017      	beq.n	800a86a <UART_SetConfig+0x266>
 800a83a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a83e:	d817      	bhi.n	800a870 <UART_SetConfig+0x26c>
 800a840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a844:	d00b      	beq.n	800a85e <UART_SetConfig+0x25a>
 800a846:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a84a:	d811      	bhi.n	800a870 <UART_SetConfig+0x26c>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d003      	beq.n	800a858 <UART_SetConfig+0x254>
 800a850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a854:	d006      	beq.n	800a864 <UART_SetConfig+0x260>
 800a856:	e00b      	b.n	800a870 <UART_SetConfig+0x26c>
 800a858:	2301      	movs	r3, #1
 800a85a:	77fb      	strb	r3, [r7, #31]
 800a85c:	e076      	b.n	800a94c <UART_SetConfig+0x348>
 800a85e:	2302      	movs	r3, #2
 800a860:	77fb      	strb	r3, [r7, #31]
 800a862:	e073      	b.n	800a94c <UART_SetConfig+0x348>
 800a864:	2304      	movs	r3, #4
 800a866:	77fb      	strb	r3, [r7, #31]
 800a868:	e070      	b.n	800a94c <UART_SetConfig+0x348>
 800a86a:	2308      	movs	r3, #8
 800a86c:	77fb      	strb	r3, [r7, #31]
 800a86e:	e06d      	b.n	800a94c <UART_SetConfig+0x348>
 800a870:	2310      	movs	r3, #16
 800a872:	77fb      	strb	r3, [r7, #31]
 800a874:	e06a      	b.n	800a94c <UART_SetConfig+0x348>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a1b      	ldr	r2, [pc, #108]	@ (800a8e8 <UART_SetConfig+0x2e4>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d138      	bne.n	800a8f2 <UART_SetConfig+0x2ee>
 800a880:	4b13      	ldr	r3, [pc, #76]	@ (800a8d0 <UART_SetConfig+0x2cc>)
 800a882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a886:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a88a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a88e:	d017      	beq.n	800a8c0 <UART_SetConfig+0x2bc>
 800a890:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a894:	d82a      	bhi.n	800a8ec <UART_SetConfig+0x2e8>
 800a896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a89a:	d00b      	beq.n	800a8b4 <UART_SetConfig+0x2b0>
 800a89c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8a0:	d824      	bhi.n	800a8ec <UART_SetConfig+0x2e8>
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d003      	beq.n	800a8ae <UART_SetConfig+0x2aa>
 800a8a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8aa:	d006      	beq.n	800a8ba <UART_SetConfig+0x2b6>
 800a8ac:	e01e      	b.n	800a8ec <UART_SetConfig+0x2e8>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	77fb      	strb	r3, [r7, #31]
 800a8b2:	e04b      	b.n	800a94c <UART_SetConfig+0x348>
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	77fb      	strb	r3, [r7, #31]
 800a8b8:	e048      	b.n	800a94c <UART_SetConfig+0x348>
 800a8ba:	2304      	movs	r3, #4
 800a8bc:	77fb      	strb	r3, [r7, #31]
 800a8be:	e045      	b.n	800a94c <UART_SetConfig+0x348>
 800a8c0:	2308      	movs	r3, #8
 800a8c2:	77fb      	strb	r3, [r7, #31]
 800a8c4:	e042      	b.n	800a94c <UART_SetConfig+0x348>
 800a8c6:	bf00      	nop
 800a8c8:	efff69f3 	.word	0xefff69f3
 800a8cc:	40011000 	.word	0x40011000
 800a8d0:	40023800 	.word	0x40023800
 800a8d4:	40004400 	.word	0x40004400
 800a8d8:	40004800 	.word	0x40004800
 800a8dc:	40004c00 	.word	0x40004c00
 800a8e0:	40005000 	.word	0x40005000
 800a8e4:	40011400 	.word	0x40011400
 800a8e8:	40007800 	.word	0x40007800
 800a8ec:	2310      	movs	r3, #16
 800a8ee:	77fb      	strb	r3, [r7, #31]
 800a8f0:	e02c      	b.n	800a94c <UART_SetConfig+0x348>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a72      	ldr	r2, [pc, #456]	@ (800aac0 <UART_SetConfig+0x4bc>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d125      	bne.n	800a948 <UART_SetConfig+0x344>
 800a8fc:	4b71      	ldr	r3, [pc, #452]	@ (800aac4 <UART_SetConfig+0x4c0>)
 800a8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a902:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a906:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a90a:	d017      	beq.n	800a93c <UART_SetConfig+0x338>
 800a90c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a910:	d817      	bhi.n	800a942 <UART_SetConfig+0x33e>
 800a912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a916:	d00b      	beq.n	800a930 <UART_SetConfig+0x32c>
 800a918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a91c:	d811      	bhi.n	800a942 <UART_SetConfig+0x33e>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <UART_SetConfig+0x326>
 800a922:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a926:	d006      	beq.n	800a936 <UART_SetConfig+0x332>
 800a928:	e00b      	b.n	800a942 <UART_SetConfig+0x33e>
 800a92a:	2300      	movs	r3, #0
 800a92c:	77fb      	strb	r3, [r7, #31]
 800a92e:	e00d      	b.n	800a94c <UART_SetConfig+0x348>
 800a930:	2302      	movs	r3, #2
 800a932:	77fb      	strb	r3, [r7, #31]
 800a934:	e00a      	b.n	800a94c <UART_SetConfig+0x348>
 800a936:	2304      	movs	r3, #4
 800a938:	77fb      	strb	r3, [r7, #31]
 800a93a:	e007      	b.n	800a94c <UART_SetConfig+0x348>
 800a93c:	2308      	movs	r3, #8
 800a93e:	77fb      	strb	r3, [r7, #31]
 800a940:	e004      	b.n	800a94c <UART_SetConfig+0x348>
 800a942:	2310      	movs	r3, #16
 800a944:	77fb      	strb	r3, [r7, #31]
 800a946:	e001      	b.n	800a94c <UART_SetConfig+0x348>
 800a948:	2310      	movs	r3, #16
 800a94a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	69db      	ldr	r3, [r3, #28]
 800a950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a954:	d15b      	bne.n	800aa0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a956:	7ffb      	ldrb	r3, [r7, #31]
 800a958:	2b08      	cmp	r3, #8
 800a95a:	d828      	bhi.n	800a9ae <UART_SetConfig+0x3aa>
 800a95c:	a201      	add	r2, pc, #4	@ (adr r2, 800a964 <UART_SetConfig+0x360>)
 800a95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a962:	bf00      	nop
 800a964:	0800a989 	.word	0x0800a989
 800a968:	0800a991 	.word	0x0800a991
 800a96c:	0800a999 	.word	0x0800a999
 800a970:	0800a9af 	.word	0x0800a9af
 800a974:	0800a99f 	.word	0x0800a99f
 800a978:	0800a9af 	.word	0x0800a9af
 800a97c:	0800a9af 	.word	0x0800a9af
 800a980:	0800a9af 	.word	0x0800a9af
 800a984:	0800a9a7 	.word	0x0800a9a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a988:	f7fd fa3c 	bl	8007e04 <HAL_RCC_GetPCLK1Freq>
 800a98c:	61b8      	str	r0, [r7, #24]
        break;
 800a98e:	e013      	b.n	800a9b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a990:	f7fd fa4c 	bl	8007e2c <HAL_RCC_GetPCLK2Freq>
 800a994:	61b8      	str	r0, [r7, #24]
        break;
 800a996:	e00f      	b.n	800a9b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a998:	4b4b      	ldr	r3, [pc, #300]	@ (800aac8 <UART_SetConfig+0x4c4>)
 800a99a:	61bb      	str	r3, [r7, #24]
        break;
 800a99c:	e00c      	b.n	800a9b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a99e:	f7fd f91f 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 800a9a2:	61b8      	str	r0, [r7, #24]
        break;
 800a9a4:	e008      	b.n	800a9b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9aa:	61bb      	str	r3, [r7, #24]
        break;
 800a9ac:	e004      	b.n	800a9b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	77bb      	strb	r3, [r7, #30]
        break;
 800a9b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d074      	beq.n	800aaa8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	005a      	lsls	r2, r3, #1
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	085b      	lsrs	r3, r3, #1
 800a9c8:	441a      	add	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	2b0f      	cmp	r3, #15
 800a9d8:	d916      	bls.n	800aa08 <UART_SetConfig+0x404>
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9e0:	d212      	bcs.n	800aa08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	f023 030f 	bic.w	r3, r3, #15
 800a9ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	085b      	lsrs	r3, r3, #1
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	f003 0307 	and.w	r3, r3, #7
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	89fb      	ldrh	r3, [r7, #14]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	89fa      	ldrh	r2, [r7, #14]
 800aa04:	60da      	str	r2, [r3, #12]
 800aa06:	e04f      	b.n	800aaa8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	77bb      	strb	r3, [r7, #30]
 800aa0c:	e04c      	b.n	800aaa8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa0e:	7ffb      	ldrb	r3, [r7, #31]
 800aa10:	2b08      	cmp	r3, #8
 800aa12:	d828      	bhi.n	800aa66 <UART_SetConfig+0x462>
 800aa14:	a201      	add	r2, pc, #4	@ (adr r2, 800aa1c <UART_SetConfig+0x418>)
 800aa16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1a:	bf00      	nop
 800aa1c:	0800aa41 	.word	0x0800aa41
 800aa20:	0800aa49 	.word	0x0800aa49
 800aa24:	0800aa51 	.word	0x0800aa51
 800aa28:	0800aa67 	.word	0x0800aa67
 800aa2c:	0800aa57 	.word	0x0800aa57
 800aa30:	0800aa67 	.word	0x0800aa67
 800aa34:	0800aa67 	.word	0x0800aa67
 800aa38:	0800aa67 	.word	0x0800aa67
 800aa3c:	0800aa5f 	.word	0x0800aa5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa40:	f7fd f9e0 	bl	8007e04 <HAL_RCC_GetPCLK1Freq>
 800aa44:	61b8      	str	r0, [r7, #24]
        break;
 800aa46:	e013      	b.n	800aa70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa48:	f7fd f9f0 	bl	8007e2c <HAL_RCC_GetPCLK2Freq>
 800aa4c:	61b8      	str	r0, [r7, #24]
        break;
 800aa4e:	e00f      	b.n	800aa70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa50:	4b1d      	ldr	r3, [pc, #116]	@ (800aac8 <UART_SetConfig+0x4c4>)
 800aa52:	61bb      	str	r3, [r7, #24]
        break;
 800aa54:	e00c      	b.n	800aa70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa56:	f7fd f8c3 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 800aa5a:	61b8      	str	r0, [r7, #24]
        break;
 800aa5c:	e008      	b.n	800aa70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa62:	61bb      	str	r3, [r7, #24]
        break;
 800aa64:	e004      	b.n	800aa70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800aa66:	2300      	movs	r3, #0
 800aa68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	77bb      	strb	r3, [r7, #30]
        break;
 800aa6e:	bf00      	nop
    }

    if (pclk != 0U)
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d018      	beq.n	800aaa8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	085a      	lsrs	r2, r3, #1
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	441a      	add	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	2b0f      	cmp	r3, #15
 800aa8e:	d909      	bls.n	800aaa4 <UART_SetConfig+0x4a0>
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa96:	d205      	bcs.n	800aaa4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	60da      	str	r2, [r3, #12]
 800aaa2:	e001      	b.n	800aaa8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800aab4:	7fbb      	ldrb	r3, [r7, #30]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3720      	adds	r7, #32
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	40007c00 	.word	0x40007c00
 800aac4:	40023800 	.word	0x40023800
 800aac8:	00f42400 	.word	0x00f42400

0800aacc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad8:	f003 0308 	and.w	r3, r3, #8
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00a      	beq.n	800aaf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafa:	f003 0301 	and.w	r3, r3, #1
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00a      	beq.n	800ab18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	430a      	orrs	r2, r1
 800ab16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1c:	f003 0302 	and.w	r3, r3, #2
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00a      	beq.n	800ab3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	430a      	orrs	r2, r1
 800ab38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3e:	f003 0304 	and.w	r3, r3, #4
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00a      	beq.n	800ab5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	430a      	orrs	r2, r1
 800ab5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab60:	f003 0310 	and.w	r3, r3, #16
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00a      	beq.n	800ab7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab82:	f003 0320 	and.w	r3, r3, #32
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00a      	beq.n	800aba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d01a      	beq.n	800abe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	430a      	orrs	r2, r1
 800abc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abca:	d10a      	bne.n	800abe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00a      	beq.n	800ac04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	430a      	orrs	r2, r1
 800ac02:	605a      	str	r2, [r3, #4]
  }
}
 800ac04:	bf00      	nop
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b098      	sub	sp, #96	@ 0x60
 800ac14:	af02      	add	r7, sp, #8
 800ac16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac20:	f7fb fcca 	bl	80065b8 <HAL_GetTick>
 800ac24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 0308 	and.w	r3, r3, #8
 800ac30:	2b08      	cmp	r3, #8
 800ac32:	d12e      	bne.n	800ac92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f88c 	bl	800ad60 <UART_WaitOnFlagUntilTimeout>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d021      	beq.n	800ac92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac56:	e853 3f00 	ldrex	r3, [r3]
 800ac5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac62:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac74:	e841 2300 	strex	r3, r2, [r1]
 800ac78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1e6      	bne.n	800ac4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2220      	movs	r2, #32
 800ac84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e062      	b.n	800ad58 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0304 	and.w	r3, r3, #4
 800ac9c:	2b04      	cmp	r3, #4
 800ac9e:	d149      	bne.n	800ad34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aca8:	2200      	movs	r2, #0
 800acaa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f856 	bl	800ad60 <UART_WaitOnFlagUntilTimeout>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d03c      	beq.n	800ad34 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc2:	e853 3f00 	ldrex	r3, [r3]
 800acc6:	623b      	str	r3, [r7, #32]
   return(result);
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	461a      	mov	r2, r3
 800acd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acd8:	633b      	str	r3, [r7, #48]	@ 0x30
 800acda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ace0:	e841 2300 	strex	r3, r2, [r1]
 800ace4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ace6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1e6      	bne.n	800acba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	3308      	adds	r3, #8
 800acf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	e853 3f00 	ldrex	r3, [r3]
 800acfa:	60fb      	str	r3, [r7, #12]
   return(result);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f023 0301 	bic.w	r3, r3, #1
 800ad02:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3308      	adds	r3, #8
 800ad0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad0c:	61fa      	str	r2, [r7, #28]
 800ad0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad10:	69b9      	ldr	r1, [r7, #24]
 800ad12:	69fa      	ldr	r2, [r7, #28]
 800ad14:	e841 2300 	strex	r3, r2, [r1]
 800ad18:	617b      	str	r3, [r7, #20]
   return(result);
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1e5      	bne.n	800acec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2220      	movs	r2, #32
 800ad24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad30:	2303      	movs	r3, #3
 800ad32:	e011      	b.n	800ad58 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2220      	movs	r2, #32
 800ad38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2220      	movs	r2, #32
 800ad3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3758      	adds	r7, #88	@ 0x58
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad70:	e04f      	b.n	800ae12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad78:	d04b      	beq.n	800ae12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad7a:	f7fb fc1d 	bl	80065b8 <HAL_GetTick>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d302      	bcc.n	800ad90 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d101      	bne.n	800ad94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e04e      	b.n	800ae32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0304 	and.w	r3, r3, #4
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d037      	beq.n	800ae12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	2b80      	cmp	r3, #128	@ 0x80
 800ada6:	d034      	beq.n	800ae12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2b40      	cmp	r3, #64	@ 0x40
 800adac:	d031      	beq.n	800ae12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	69db      	ldr	r3, [r3, #28]
 800adb4:	f003 0308 	and.w	r3, r3, #8
 800adb8:	2b08      	cmp	r3, #8
 800adba:	d110      	bne.n	800adde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2208      	movs	r2, #8
 800adc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 f838 	bl	800ae3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2208      	movs	r2, #8
 800adce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e029      	b.n	800ae32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	69db      	ldr	r3, [r3, #28]
 800ade4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ade8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adec:	d111      	bne.n	800ae12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800adf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f000 f81e 	bl	800ae3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2220      	movs	r2, #32
 800ae02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e00f      	b.n	800ae32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	69da      	ldr	r2, [r3, #28]
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	bf0c      	ite	eq
 800ae22:	2301      	moveq	r3, #1
 800ae24:	2300      	movne	r3, #0
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	461a      	mov	r2, r3
 800ae2a:	79fb      	ldrb	r3, [r7, #7]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d0a0      	beq.n	800ad72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b095      	sub	sp, #84	@ 0x54
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae4a:	e853 3f00 	ldrex	r3, [r3]
 800ae4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae60:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae68:	e841 2300 	strex	r3, r2, [r1]
 800ae6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1e6      	bne.n	800ae42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3308      	adds	r3, #8
 800ae7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	e853 3f00 	ldrex	r3, [r3]
 800ae82:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	f023 0301 	bic.w	r3, r3, #1
 800ae8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3308      	adds	r3, #8
 800ae92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae9c:	e841 2300 	strex	r3, r2, [r1]
 800aea0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1e5      	bne.n	800ae74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d118      	bne.n	800aee2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	e853 3f00 	ldrex	r3, [r3]
 800aebc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f023 0310 	bic.w	r3, r3, #16
 800aec4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	461a      	mov	r2, r3
 800aecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aece:	61bb      	str	r3, [r7, #24]
 800aed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed2:	6979      	ldr	r1, [r7, #20]
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	e841 2300 	strex	r3, r2, [r1]
 800aeda:	613b      	str	r3, [r7, #16]
   return(result);
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1e6      	bne.n	800aeb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2220      	movs	r2, #32
 800aee6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800aef6:	bf00      	nop
 800aef8:	3754      	adds	r7, #84	@ 0x54
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <swapfunc>:
 800af02:	2b02      	cmp	r3, #2
 800af04:	b510      	push	{r4, lr}
 800af06:	d00a      	beq.n	800af1e <swapfunc+0x1c>
 800af08:	0892      	lsrs	r2, r2, #2
 800af0a:	3a01      	subs	r2, #1
 800af0c:	6803      	ldr	r3, [r0, #0]
 800af0e:	680c      	ldr	r4, [r1, #0]
 800af10:	f840 4b04 	str.w	r4, [r0], #4
 800af14:	2a00      	cmp	r2, #0
 800af16:	f841 3b04 	str.w	r3, [r1], #4
 800af1a:	dcf6      	bgt.n	800af0a <swapfunc+0x8>
 800af1c:	bd10      	pop	{r4, pc}
 800af1e:	4402      	add	r2, r0
 800af20:	780c      	ldrb	r4, [r1, #0]
 800af22:	7803      	ldrb	r3, [r0, #0]
 800af24:	f800 4b01 	strb.w	r4, [r0], #1
 800af28:	f801 3b01 	strb.w	r3, [r1], #1
 800af2c:	1a13      	subs	r3, r2, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	dcf6      	bgt.n	800af20 <swapfunc+0x1e>
 800af32:	e7f3      	b.n	800af1c <swapfunc+0x1a>

0800af34 <med3.constprop.0>:
 800af34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af36:	460f      	mov	r7, r1
 800af38:	4616      	mov	r6, r2
 800af3a:	4604      	mov	r4, r0
 800af3c:	461d      	mov	r5, r3
 800af3e:	4798      	blx	r3
 800af40:	2800      	cmp	r0, #0
 800af42:	4631      	mov	r1, r6
 800af44:	4638      	mov	r0, r7
 800af46:	da0c      	bge.n	800af62 <med3.constprop.0+0x2e>
 800af48:	47a8      	blx	r5
 800af4a:	2800      	cmp	r0, #0
 800af4c:	da02      	bge.n	800af54 <med3.constprop.0+0x20>
 800af4e:	463c      	mov	r4, r7
 800af50:	4620      	mov	r0, r4
 800af52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af54:	4631      	mov	r1, r6
 800af56:	4620      	mov	r0, r4
 800af58:	47a8      	blx	r5
 800af5a:	2800      	cmp	r0, #0
 800af5c:	daf8      	bge.n	800af50 <med3.constprop.0+0x1c>
 800af5e:	4634      	mov	r4, r6
 800af60:	e7f6      	b.n	800af50 <med3.constprop.0+0x1c>
 800af62:	47a8      	blx	r5
 800af64:	2800      	cmp	r0, #0
 800af66:	dcf2      	bgt.n	800af4e <med3.constprop.0+0x1a>
 800af68:	4631      	mov	r1, r6
 800af6a:	4620      	mov	r0, r4
 800af6c:	47a8      	blx	r5
 800af6e:	2800      	cmp	r0, #0
 800af70:	daf5      	bge.n	800af5e <med3.constprop.0+0x2a>
 800af72:	e7ed      	b.n	800af50 <med3.constprop.0+0x1c>

0800af74 <qsort>:
 800af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	b095      	sub	sp, #84	@ 0x54
 800af7a:	4606      	mov	r6, r0
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	ea40 0302 	orr.w	r3, r0, r2
 800af82:	079b      	lsls	r3, r3, #30
 800af84:	4614      	mov	r4, r2
 800af86:	d118      	bne.n	800afba <qsort+0x46>
 800af88:	f1b2 0804 	subs.w	r8, r2, #4
 800af8c:	bf18      	it	ne
 800af8e:	f04f 0801 	movne.w	r8, #1
 800af92:	2300      	movs	r3, #0
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	fb04 f701 	mul.w	r7, r4, r1
 800af9a:	19f3      	adds	r3, r6, r7
 800af9c:	2906      	cmp	r1, #6
 800af9e:	eb06 0b04 	add.w	fp, r6, r4
 800afa2:	9302      	str	r3, [sp, #8]
 800afa4:	d828      	bhi.n	800aff8 <qsort+0x84>
 800afa6:	9b02      	ldr	r3, [sp, #8]
 800afa8:	459b      	cmp	fp, r3
 800afaa:	d310      	bcc.n	800afce <qsort+0x5a>
 800afac:	9b01      	ldr	r3, [sp, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f040 8117 	bne.w	800b1e2 <qsort+0x26e>
 800afb4:	b015      	add	sp, #84	@ 0x54
 800afb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afba:	f04f 0802 	mov.w	r8, #2
 800afbe:	e7e8      	b.n	800af92 <qsort+0x1e>
 800afc0:	4643      	mov	r3, r8
 800afc2:	4622      	mov	r2, r4
 800afc4:	4639      	mov	r1, r7
 800afc6:	4628      	mov	r0, r5
 800afc8:	f7ff ff9b 	bl	800af02 <swapfunc>
 800afcc:	e00f      	b.n	800afee <qsort+0x7a>
 800afce:	465d      	mov	r5, fp
 800afd0:	e00e      	b.n	800aff0 <qsort+0x7c>
 800afd2:	1b2f      	subs	r7, r5, r4
 800afd4:	9b00      	ldr	r3, [sp, #0]
 800afd6:	4629      	mov	r1, r5
 800afd8:	4638      	mov	r0, r7
 800afda:	4798      	blx	r3
 800afdc:	2800      	cmp	r0, #0
 800afde:	dd09      	ble.n	800aff4 <qsort+0x80>
 800afe0:	f1b8 0f00 	cmp.w	r8, #0
 800afe4:	d1ec      	bne.n	800afc0 <qsort+0x4c>
 800afe6:	682b      	ldr	r3, [r5, #0]
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	602a      	str	r2, [r5, #0]
 800afec:	603b      	str	r3, [r7, #0]
 800afee:	463d      	mov	r5, r7
 800aff0:	42ae      	cmp	r6, r5
 800aff2:	d3ee      	bcc.n	800afd2 <qsort+0x5e>
 800aff4:	44a3      	add	fp, r4
 800aff6:	e7d6      	b.n	800afa6 <qsort+0x32>
 800aff8:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800affc:	1b3f      	subs	r7, r7, r4
 800affe:	2907      	cmp	r1, #7
 800b000:	fb04 6909 	mla	r9, r4, r9, r6
 800b004:	4437      	add	r7, r6
 800b006:	d021      	beq.n	800b04c <qsort+0xd8>
 800b008:	2928      	cmp	r1, #40	@ 0x28
 800b00a:	d944      	bls.n	800b096 <qsort+0x122>
 800b00c:	08cd      	lsrs	r5, r1, #3
 800b00e:	4365      	muls	r5, r4
 800b010:	9b00      	ldr	r3, [sp, #0]
 800b012:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800b016:	1971      	adds	r1, r6, r5
 800b018:	4630      	mov	r0, r6
 800b01a:	f7ff ff8b 	bl	800af34 <med3.constprop.0>
 800b01e:	4649      	mov	r1, r9
 800b020:	eb09 0205 	add.w	r2, r9, r5
 800b024:	9b00      	ldr	r3, [sp, #0]
 800b026:	4682      	mov	sl, r0
 800b028:	1b48      	subs	r0, r1, r5
 800b02a:	f7ff ff83 	bl	800af34 <med3.constprop.0>
 800b02e:	463a      	mov	r2, r7
 800b030:	9b00      	ldr	r3, [sp, #0]
 800b032:	4681      	mov	r9, r0
 800b034:	1b79      	subs	r1, r7, r5
 800b036:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800b03a:	f7ff ff7b 	bl	800af34 <med3.constprop.0>
 800b03e:	4602      	mov	r2, r0
 800b040:	4649      	mov	r1, r9
 800b042:	9b00      	ldr	r3, [sp, #0]
 800b044:	4650      	mov	r0, sl
 800b046:	f7ff ff75 	bl	800af34 <med3.constprop.0>
 800b04a:	4681      	mov	r9, r0
 800b04c:	f1b8 0f00 	cmp.w	r8, #0
 800b050:	d124      	bne.n	800b09c <qsort+0x128>
 800b052:	6833      	ldr	r3, [r6, #0]
 800b054:	f8d9 2000 	ldr.w	r2, [r9]
 800b058:	6032      	str	r2, [r6, #0]
 800b05a:	f8c9 3000 	str.w	r3, [r9]
 800b05e:	46d9      	mov	r9, fp
 800b060:	46ba      	mov	sl, r7
 800b062:	465d      	mov	r5, fp
 800b064:	2300      	movs	r3, #0
 800b066:	45b9      	cmp	r9, r7
 800b068:	d857      	bhi.n	800b11a <qsort+0x1a6>
 800b06a:	9303      	str	r3, [sp, #12]
 800b06c:	4631      	mov	r1, r6
 800b06e:	9b00      	ldr	r3, [sp, #0]
 800b070:	4648      	mov	r0, r9
 800b072:	4798      	blx	r3
 800b074:	2800      	cmp	r0, #0
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	dc2c      	bgt.n	800b0d4 <qsort+0x160>
 800b07a:	d10a      	bne.n	800b092 <qsort+0x11e>
 800b07c:	f1b8 0f00 	cmp.w	r8, #0
 800b080:	d113      	bne.n	800b0aa <qsort+0x136>
 800b082:	682b      	ldr	r3, [r5, #0]
 800b084:	f8d9 2000 	ldr.w	r2, [r9]
 800b088:	602a      	str	r2, [r5, #0]
 800b08a:	f8c9 3000 	str.w	r3, [r9]
 800b08e:	4425      	add	r5, r4
 800b090:	2301      	movs	r3, #1
 800b092:	44a1      	add	r9, r4
 800b094:	e7e7      	b.n	800b066 <qsort+0xf2>
 800b096:	463a      	mov	r2, r7
 800b098:	46b2      	mov	sl, r6
 800b09a:	e7d1      	b.n	800b040 <qsort+0xcc>
 800b09c:	4643      	mov	r3, r8
 800b09e:	4622      	mov	r2, r4
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f7ff ff2d 	bl	800af02 <swapfunc>
 800b0a8:	e7d9      	b.n	800b05e <qsort+0xea>
 800b0aa:	4643      	mov	r3, r8
 800b0ac:	4622      	mov	r2, r4
 800b0ae:	4649      	mov	r1, r9
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f7ff ff26 	bl	800af02 <swapfunc>
 800b0b6:	e7ea      	b.n	800b08e <qsort+0x11a>
 800b0b8:	d10b      	bne.n	800b0d2 <qsort+0x15e>
 800b0ba:	f1b8 0f00 	cmp.w	r8, #0
 800b0be:	d11e      	bne.n	800b0fe <qsort+0x18a>
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	f8da 2000 	ldr.w	r2, [sl]
 800b0c6:	603a      	str	r2, [r7, #0]
 800b0c8:	f8ca 3000 	str.w	r3, [sl]
 800b0cc:	ebaa 0a04 	sub.w	sl, sl, r4
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	1b3f      	subs	r7, r7, r4
 800b0d4:	45b9      	cmp	r9, r7
 800b0d6:	d820      	bhi.n	800b11a <qsort+0x1a6>
 800b0d8:	9303      	str	r3, [sp, #12]
 800b0da:	4631      	mov	r1, r6
 800b0dc:	9b00      	ldr	r3, [sp, #0]
 800b0de:	4638      	mov	r0, r7
 800b0e0:	4798      	blx	r3
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	9b03      	ldr	r3, [sp, #12]
 800b0e6:	dae7      	bge.n	800b0b8 <qsort+0x144>
 800b0e8:	f1b8 0f00 	cmp.w	r8, #0
 800b0ec:	d10e      	bne.n	800b10c <qsort+0x198>
 800b0ee:	f8d9 3000 	ldr.w	r3, [r9]
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	f8c9 2000 	str.w	r2, [r9]
 800b0f8:	603b      	str	r3, [r7, #0]
 800b0fa:	1b3f      	subs	r7, r7, r4
 800b0fc:	e7c8      	b.n	800b090 <qsort+0x11c>
 800b0fe:	4643      	mov	r3, r8
 800b100:	4622      	mov	r2, r4
 800b102:	4651      	mov	r1, sl
 800b104:	4638      	mov	r0, r7
 800b106:	f7ff fefc 	bl	800af02 <swapfunc>
 800b10a:	e7df      	b.n	800b0cc <qsort+0x158>
 800b10c:	4643      	mov	r3, r8
 800b10e:	4622      	mov	r2, r4
 800b110:	4639      	mov	r1, r7
 800b112:	4648      	mov	r0, r9
 800b114:	f7ff fef5 	bl	800af02 <swapfunc>
 800b118:	e7ef      	b.n	800b0fa <qsort+0x186>
 800b11a:	b9fb      	cbnz	r3, 800b15c <qsort+0x1e8>
 800b11c:	9b02      	ldr	r3, [sp, #8]
 800b11e:	459b      	cmp	fp, r3
 800b120:	f4bf af44 	bcs.w	800afac <qsort+0x38>
 800b124:	465d      	mov	r5, fp
 800b126:	e015      	b.n	800b154 <qsort+0x1e0>
 800b128:	4643      	mov	r3, r8
 800b12a:	4622      	mov	r2, r4
 800b12c:	4639      	mov	r1, r7
 800b12e:	4628      	mov	r0, r5
 800b130:	f7ff fee7 	bl	800af02 <swapfunc>
 800b134:	e00d      	b.n	800b152 <qsort+0x1de>
 800b136:	1b2f      	subs	r7, r5, r4
 800b138:	9b00      	ldr	r3, [sp, #0]
 800b13a:	4629      	mov	r1, r5
 800b13c:	4638      	mov	r0, r7
 800b13e:	4798      	blx	r3
 800b140:	2800      	cmp	r0, #0
 800b142:	dd09      	ble.n	800b158 <qsort+0x1e4>
 800b144:	f1b8 0f00 	cmp.w	r8, #0
 800b148:	d1ee      	bne.n	800b128 <qsort+0x1b4>
 800b14a:	682b      	ldr	r3, [r5, #0]
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	602a      	str	r2, [r5, #0]
 800b150:	603b      	str	r3, [r7, #0]
 800b152:	463d      	mov	r5, r7
 800b154:	42ae      	cmp	r6, r5
 800b156:	d3ee      	bcc.n	800b136 <qsort+0x1c2>
 800b158:	44a3      	add	fp, r4
 800b15a:	e7df      	b.n	800b11c <qsort+0x1a8>
 800b15c:	eba9 0b05 	sub.w	fp, r9, r5
 800b160:	1baa      	subs	r2, r5, r6
 800b162:	455a      	cmp	r2, fp
 800b164:	bfa8      	it	ge
 800b166:	465a      	movge	r2, fp
 800b168:	b12a      	cbz	r2, 800b176 <qsort+0x202>
 800b16a:	4643      	mov	r3, r8
 800b16c:	eba9 0102 	sub.w	r1, r9, r2
 800b170:	4630      	mov	r0, r6
 800b172:	f7ff fec6 	bl	800af02 <swapfunc>
 800b176:	9b02      	ldr	r3, [sp, #8]
 800b178:	eba3 020a 	sub.w	r2, r3, sl
 800b17c:	ebaa 0507 	sub.w	r5, sl, r7
 800b180:	1b12      	subs	r2, r2, r4
 800b182:	42aa      	cmp	r2, r5
 800b184:	bf28      	it	cs
 800b186:	462a      	movcs	r2, r5
 800b188:	b12a      	cbz	r2, 800b196 <qsort+0x222>
 800b18a:	9902      	ldr	r1, [sp, #8]
 800b18c:	4643      	mov	r3, r8
 800b18e:	1a89      	subs	r1, r1, r2
 800b190:	4648      	mov	r0, r9
 800b192:	f7ff feb6 	bl	800af02 <swapfunc>
 800b196:	9b02      	ldr	r3, [sp, #8]
 800b198:	455d      	cmp	r5, fp
 800b19a:	465f      	mov	r7, fp
 800b19c:	eba3 0005 	sub.w	r0, r3, r5
 800b1a0:	d904      	bls.n	800b1ac <qsort+0x238>
 800b1a2:	4633      	mov	r3, r6
 800b1a4:	462f      	mov	r7, r5
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	465d      	mov	r5, fp
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	42a5      	cmp	r5, r4
 800b1ae:	d921      	bls.n	800b1f4 <qsort+0x280>
 800b1b0:	fbb5 f1f4 	udiv	r1, r5, r4
 800b1b4:	9b01      	ldr	r3, [sp, #4]
 800b1b6:	2b07      	cmp	r3, #7
 800b1b8:	d80d      	bhi.n	800b1d6 <qsort+0x262>
 800b1ba:	fbb7 f7f4 	udiv	r7, r7, r4
 800b1be:	aa14      	add	r2, sp, #80	@ 0x50
 800b1c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1c4:	f843 6c40 	str.w	r6, [r3, #-64]
 800b1c8:	f843 7c3c 	str.w	r7, [r3, #-60]
 800b1cc:	9b01      	ldr	r3, [sp, #4]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	e6df      	b.n	800af96 <qsort+0x22>
 800b1d6:	9b00      	ldr	r3, [sp, #0]
 800b1d8:	4622      	mov	r2, r4
 800b1da:	f7ff fecb 	bl	800af74 <qsort>
 800b1de:	42a7      	cmp	r7, r4
 800b1e0:	d80b      	bhi.n	800b1fa <qsort+0x286>
 800b1e2:	9b01      	ldr	r3, [sp, #4]
 800b1e4:	aa14      	add	r2, sp, #80	@ 0x50
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1ee:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 800b1f2:	e7ee      	b.n	800b1d2 <qsort+0x25e>
 800b1f4:	42a7      	cmp	r7, r4
 800b1f6:	f67f aed9 	bls.w	800afac <qsort+0x38>
 800b1fa:	fbb7 f1f4 	udiv	r1, r7, r4
 800b1fe:	4630      	mov	r0, r6
 800b200:	e7e7      	b.n	800b1d2 <qsort+0x25e>

0800b202 <__cvt>:
 800b202:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b204:	ed2d 8b02 	vpush	{d8}
 800b208:	eeb0 8b40 	vmov.f64	d8, d0
 800b20c:	b085      	sub	sp, #20
 800b20e:	4617      	mov	r7, r2
 800b210:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b212:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b214:	ee18 2a90 	vmov	r2, s17
 800b218:	f025 0520 	bic.w	r5, r5, #32
 800b21c:	2a00      	cmp	r2, #0
 800b21e:	bfb6      	itet	lt
 800b220:	222d      	movlt	r2, #45	@ 0x2d
 800b222:	2200      	movge	r2, #0
 800b224:	eeb1 8b40 	vneglt.f64	d8, d0
 800b228:	2d46      	cmp	r5, #70	@ 0x46
 800b22a:	460c      	mov	r4, r1
 800b22c:	701a      	strb	r2, [r3, #0]
 800b22e:	d004      	beq.n	800b23a <__cvt+0x38>
 800b230:	2d45      	cmp	r5, #69	@ 0x45
 800b232:	d100      	bne.n	800b236 <__cvt+0x34>
 800b234:	3401      	adds	r4, #1
 800b236:	2102      	movs	r1, #2
 800b238:	e000      	b.n	800b23c <__cvt+0x3a>
 800b23a:	2103      	movs	r1, #3
 800b23c:	ab03      	add	r3, sp, #12
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	ab02      	add	r3, sp, #8
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	4622      	mov	r2, r4
 800b246:	4633      	mov	r3, r6
 800b248:	eeb0 0b48 	vmov.f64	d0, d8
 800b24c:	f002 f82c 	bl	800d2a8 <_dtoa_r>
 800b250:	2d47      	cmp	r5, #71	@ 0x47
 800b252:	d114      	bne.n	800b27e <__cvt+0x7c>
 800b254:	07fb      	lsls	r3, r7, #31
 800b256:	d50a      	bpl.n	800b26e <__cvt+0x6c>
 800b258:	1902      	adds	r2, r0, r4
 800b25a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b262:	bf08      	it	eq
 800b264:	9203      	streq	r2, [sp, #12]
 800b266:	2130      	movs	r1, #48	@ 0x30
 800b268:	9b03      	ldr	r3, [sp, #12]
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d319      	bcc.n	800b2a2 <__cvt+0xa0>
 800b26e:	9b03      	ldr	r3, [sp, #12]
 800b270:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b272:	1a1b      	subs	r3, r3, r0
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	b005      	add	sp, #20
 800b278:	ecbd 8b02 	vpop	{d8}
 800b27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b27e:	2d46      	cmp	r5, #70	@ 0x46
 800b280:	eb00 0204 	add.w	r2, r0, r4
 800b284:	d1e9      	bne.n	800b25a <__cvt+0x58>
 800b286:	7803      	ldrb	r3, [r0, #0]
 800b288:	2b30      	cmp	r3, #48	@ 0x30
 800b28a:	d107      	bne.n	800b29c <__cvt+0x9a>
 800b28c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b294:	bf1c      	itt	ne
 800b296:	f1c4 0401 	rsbne	r4, r4, #1
 800b29a:	6034      	strne	r4, [r6, #0]
 800b29c:	6833      	ldr	r3, [r6, #0]
 800b29e:	441a      	add	r2, r3
 800b2a0:	e7db      	b.n	800b25a <__cvt+0x58>
 800b2a2:	1c5c      	adds	r4, r3, #1
 800b2a4:	9403      	str	r4, [sp, #12]
 800b2a6:	7019      	strb	r1, [r3, #0]
 800b2a8:	e7de      	b.n	800b268 <__cvt+0x66>

0800b2aa <__exponent>:
 800b2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2ac:	2900      	cmp	r1, #0
 800b2ae:	bfba      	itte	lt
 800b2b0:	4249      	neglt	r1, r1
 800b2b2:	232d      	movlt	r3, #45	@ 0x2d
 800b2b4:	232b      	movge	r3, #43	@ 0x2b
 800b2b6:	2909      	cmp	r1, #9
 800b2b8:	7002      	strb	r2, [r0, #0]
 800b2ba:	7043      	strb	r3, [r0, #1]
 800b2bc:	dd29      	ble.n	800b312 <__exponent+0x68>
 800b2be:	f10d 0307 	add.w	r3, sp, #7
 800b2c2:	461d      	mov	r5, r3
 800b2c4:	270a      	movs	r7, #10
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800b2cc:	fb07 1416 	mls	r4, r7, r6, r1
 800b2d0:	3430      	adds	r4, #48	@ 0x30
 800b2d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	2c63      	cmp	r4, #99	@ 0x63
 800b2da:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b2de:	4631      	mov	r1, r6
 800b2e0:	dcf1      	bgt.n	800b2c6 <__exponent+0x1c>
 800b2e2:	3130      	adds	r1, #48	@ 0x30
 800b2e4:	1e94      	subs	r4, r2, #2
 800b2e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b2ea:	1c41      	adds	r1, r0, #1
 800b2ec:	4623      	mov	r3, r4
 800b2ee:	42ab      	cmp	r3, r5
 800b2f0:	d30a      	bcc.n	800b308 <__exponent+0x5e>
 800b2f2:	f10d 0309 	add.w	r3, sp, #9
 800b2f6:	1a9b      	subs	r3, r3, r2
 800b2f8:	42ac      	cmp	r4, r5
 800b2fa:	bf88      	it	hi
 800b2fc:	2300      	movhi	r3, #0
 800b2fe:	3302      	adds	r3, #2
 800b300:	4403      	add	r3, r0
 800b302:	1a18      	subs	r0, r3, r0
 800b304:	b003      	add	sp, #12
 800b306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b308:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b30c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b310:	e7ed      	b.n	800b2ee <__exponent+0x44>
 800b312:	2330      	movs	r3, #48	@ 0x30
 800b314:	3130      	adds	r1, #48	@ 0x30
 800b316:	7083      	strb	r3, [r0, #2]
 800b318:	70c1      	strb	r1, [r0, #3]
 800b31a:	1d03      	adds	r3, r0, #4
 800b31c:	e7f1      	b.n	800b302 <__exponent+0x58>
	...

0800b320 <_printf_float>:
 800b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	b08d      	sub	sp, #52	@ 0x34
 800b326:	460c      	mov	r4, r1
 800b328:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b32c:	4616      	mov	r6, r2
 800b32e:	461f      	mov	r7, r3
 800b330:	4605      	mov	r5, r0
 800b332:	f001 fead 	bl	800d090 <_localeconv_r>
 800b336:	f8d0 b000 	ldr.w	fp, [r0]
 800b33a:	4658      	mov	r0, fp
 800b33c:	f7f4 ffd0 	bl	80002e0 <strlen>
 800b340:	2300      	movs	r3, #0
 800b342:	930a      	str	r3, [sp, #40]	@ 0x28
 800b344:	f8d8 3000 	ldr.w	r3, [r8]
 800b348:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b34c:	6822      	ldr	r2, [r4, #0]
 800b34e:	9005      	str	r0, [sp, #20]
 800b350:	3307      	adds	r3, #7
 800b352:	f023 0307 	bic.w	r3, r3, #7
 800b356:	f103 0108 	add.w	r1, r3, #8
 800b35a:	f8c8 1000 	str.w	r1, [r8]
 800b35e:	ed93 0b00 	vldr	d0, [r3]
 800b362:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b5c0 <_printf_float+0x2a0>
 800b366:	eeb0 7bc0 	vabs.f64	d7, d0
 800b36a:	eeb4 7b46 	vcmp.f64	d7, d6
 800b36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b372:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b376:	dd24      	ble.n	800b3c2 <_printf_float+0xa2>
 800b378:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b380:	d502      	bpl.n	800b388 <_printf_float+0x68>
 800b382:	232d      	movs	r3, #45	@ 0x2d
 800b384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b388:	498f      	ldr	r1, [pc, #572]	@ (800b5c8 <_printf_float+0x2a8>)
 800b38a:	4b90      	ldr	r3, [pc, #576]	@ (800b5cc <_printf_float+0x2ac>)
 800b38c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b390:	bf94      	ite	ls
 800b392:	4688      	movls	r8, r1
 800b394:	4698      	movhi	r8, r3
 800b396:	f022 0204 	bic.w	r2, r2, #4
 800b39a:	2303      	movs	r3, #3
 800b39c:	6123      	str	r3, [r4, #16]
 800b39e:	6022      	str	r2, [r4, #0]
 800b3a0:	f04f 0a00 	mov.w	sl, #0
 800b3a4:	9700      	str	r7, [sp, #0]
 800b3a6:	4633      	mov	r3, r6
 800b3a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	f000 fa83 	bl	800b8b8 <_printf_common>
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	f040 8089 	bne.w	800b4ca <_printf_float+0x1aa>
 800b3b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3bc:	b00d      	add	sp, #52	@ 0x34
 800b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c2:	eeb4 0b40 	vcmp.f64	d0, d0
 800b3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ca:	d709      	bvc.n	800b3e0 <_printf_float+0xc0>
 800b3cc:	ee10 3a90 	vmov	r3, s1
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	bfbc      	itt	lt
 800b3d4:	232d      	movlt	r3, #45	@ 0x2d
 800b3d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b3da:	497d      	ldr	r1, [pc, #500]	@ (800b5d0 <_printf_float+0x2b0>)
 800b3dc:	4b7d      	ldr	r3, [pc, #500]	@ (800b5d4 <_printf_float+0x2b4>)
 800b3de:	e7d5      	b.n	800b38c <_printf_float+0x6c>
 800b3e0:	6863      	ldr	r3, [r4, #4]
 800b3e2:	1c59      	adds	r1, r3, #1
 800b3e4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b3e8:	d139      	bne.n	800b45e <_printf_float+0x13e>
 800b3ea:	2306      	movs	r3, #6
 800b3ec:	6063      	str	r3, [r4, #4]
 800b3ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	6022      	str	r2, [r4, #0]
 800b3f6:	9303      	str	r3, [sp, #12]
 800b3f8:	ab0a      	add	r3, sp, #40	@ 0x28
 800b3fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b3fe:	ab09      	add	r3, sp, #36	@ 0x24
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	6861      	ldr	r1, [r4, #4]
 800b404:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b408:	4628      	mov	r0, r5
 800b40a:	f7ff fefa 	bl	800b202 <__cvt>
 800b40e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b412:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b414:	4680      	mov	r8, r0
 800b416:	d129      	bne.n	800b46c <_printf_float+0x14c>
 800b418:	1cc8      	adds	r0, r1, #3
 800b41a:	db02      	blt.n	800b422 <_printf_float+0x102>
 800b41c:	6863      	ldr	r3, [r4, #4]
 800b41e:	4299      	cmp	r1, r3
 800b420:	dd41      	ble.n	800b4a6 <_printf_float+0x186>
 800b422:	f1a9 0902 	sub.w	r9, r9, #2
 800b426:	fa5f f989 	uxtb.w	r9, r9
 800b42a:	3901      	subs	r1, #1
 800b42c:	464a      	mov	r2, r9
 800b42e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b432:	9109      	str	r1, [sp, #36]	@ 0x24
 800b434:	f7ff ff39 	bl	800b2aa <__exponent>
 800b438:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b43a:	1813      	adds	r3, r2, r0
 800b43c:	2a01      	cmp	r2, #1
 800b43e:	4682      	mov	sl, r0
 800b440:	6123      	str	r3, [r4, #16]
 800b442:	dc02      	bgt.n	800b44a <_printf_float+0x12a>
 800b444:	6822      	ldr	r2, [r4, #0]
 800b446:	07d2      	lsls	r2, r2, #31
 800b448:	d501      	bpl.n	800b44e <_printf_float+0x12e>
 800b44a:	3301      	adds	r3, #1
 800b44c:	6123      	str	r3, [r4, #16]
 800b44e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0a6      	beq.n	800b3a4 <_printf_float+0x84>
 800b456:	232d      	movs	r3, #45	@ 0x2d
 800b458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b45c:	e7a2      	b.n	800b3a4 <_printf_float+0x84>
 800b45e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b462:	d1c4      	bne.n	800b3ee <_printf_float+0xce>
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1c2      	bne.n	800b3ee <_printf_float+0xce>
 800b468:	2301      	movs	r3, #1
 800b46a:	e7bf      	b.n	800b3ec <_printf_float+0xcc>
 800b46c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b470:	d9db      	bls.n	800b42a <_printf_float+0x10a>
 800b472:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b476:	d118      	bne.n	800b4aa <_printf_float+0x18a>
 800b478:	2900      	cmp	r1, #0
 800b47a:	6863      	ldr	r3, [r4, #4]
 800b47c:	dd0b      	ble.n	800b496 <_printf_float+0x176>
 800b47e:	6121      	str	r1, [r4, #16]
 800b480:	b913      	cbnz	r3, 800b488 <_printf_float+0x168>
 800b482:	6822      	ldr	r2, [r4, #0]
 800b484:	07d0      	lsls	r0, r2, #31
 800b486:	d502      	bpl.n	800b48e <_printf_float+0x16e>
 800b488:	3301      	adds	r3, #1
 800b48a:	440b      	add	r3, r1
 800b48c:	6123      	str	r3, [r4, #16]
 800b48e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b490:	f04f 0a00 	mov.w	sl, #0
 800b494:	e7db      	b.n	800b44e <_printf_float+0x12e>
 800b496:	b913      	cbnz	r3, 800b49e <_printf_float+0x17e>
 800b498:	6822      	ldr	r2, [r4, #0]
 800b49a:	07d2      	lsls	r2, r2, #31
 800b49c:	d501      	bpl.n	800b4a2 <_printf_float+0x182>
 800b49e:	3302      	adds	r3, #2
 800b4a0:	e7f4      	b.n	800b48c <_printf_float+0x16c>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e7f2      	b.n	800b48c <_printf_float+0x16c>
 800b4a6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b4aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4ac:	4299      	cmp	r1, r3
 800b4ae:	db05      	blt.n	800b4bc <_printf_float+0x19c>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	6121      	str	r1, [r4, #16]
 800b4b4:	07d8      	lsls	r0, r3, #31
 800b4b6:	d5ea      	bpl.n	800b48e <_printf_float+0x16e>
 800b4b8:	1c4b      	adds	r3, r1, #1
 800b4ba:	e7e7      	b.n	800b48c <_printf_float+0x16c>
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	bfd4      	ite	le
 800b4c0:	f1c1 0202 	rsble	r2, r1, #2
 800b4c4:	2201      	movgt	r2, #1
 800b4c6:	4413      	add	r3, r2
 800b4c8:	e7e0      	b.n	800b48c <_printf_float+0x16c>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	055a      	lsls	r2, r3, #21
 800b4ce:	d407      	bmi.n	800b4e0 <_printf_float+0x1c0>
 800b4d0:	6923      	ldr	r3, [r4, #16]
 800b4d2:	4642      	mov	r2, r8
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	47b8      	blx	r7
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d12a      	bne.n	800b534 <_printf_float+0x214>
 800b4de:	e76b      	b.n	800b3b8 <_printf_float+0x98>
 800b4e0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b4e4:	f240 80e0 	bls.w	800b6a8 <_printf_float+0x388>
 800b4e8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b4ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f4:	d133      	bne.n	800b55e <_printf_float+0x23e>
 800b4f6:	4a38      	ldr	r2, [pc, #224]	@ (800b5d8 <_printf_float+0x2b8>)
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	47b8      	blx	r7
 800b500:	3001      	adds	r0, #1
 800b502:	f43f af59 	beq.w	800b3b8 <_printf_float+0x98>
 800b506:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b50a:	4543      	cmp	r3, r8
 800b50c:	db02      	blt.n	800b514 <_printf_float+0x1f4>
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	07d8      	lsls	r0, r3, #31
 800b512:	d50f      	bpl.n	800b534 <_printf_float+0x214>
 800b514:	9b05      	ldr	r3, [sp, #20]
 800b516:	465a      	mov	r2, fp
 800b518:	4631      	mov	r1, r6
 800b51a:	4628      	mov	r0, r5
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	f43f af4a 	beq.w	800b3b8 <_printf_float+0x98>
 800b524:	f04f 0900 	mov.w	r9, #0
 800b528:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b52c:	f104 0a1a 	add.w	sl, r4, #26
 800b530:	45c8      	cmp	r8, r9
 800b532:	dc09      	bgt.n	800b548 <_printf_float+0x228>
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	079b      	lsls	r3, r3, #30
 800b538:	f100 8107 	bmi.w	800b74a <_printf_float+0x42a>
 800b53c:	68e0      	ldr	r0, [r4, #12]
 800b53e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b540:	4298      	cmp	r0, r3
 800b542:	bfb8      	it	lt
 800b544:	4618      	movlt	r0, r3
 800b546:	e739      	b.n	800b3bc <_printf_float+0x9c>
 800b548:	2301      	movs	r3, #1
 800b54a:	4652      	mov	r2, sl
 800b54c:	4631      	mov	r1, r6
 800b54e:	4628      	mov	r0, r5
 800b550:	47b8      	blx	r7
 800b552:	3001      	adds	r0, #1
 800b554:	f43f af30 	beq.w	800b3b8 <_printf_float+0x98>
 800b558:	f109 0901 	add.w	r9, r9, #1
 800b55c:	e7e8      	b.n	800b530 <_printf_float+0x210>
 800b55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b560:	2b00      	cmp	r3, #0
 800b562:	dc3b      	bgt.n	800b5dc <_printf_float+0x2bc>
 800b564:	4a1c      	ldr	r2, [pc, #112]	@ (800b5d8 <_printf_float+0x2b8>)
 800b566:	2301      	movs	r3, #1
 800b568:	4631      	mov	r1, r6
 800b56a:	4628      	mov	r0, r5
 800b56c:	47b8      	blx	r7
 800b56e:	3001      	adds	r0, #1
 800b570:	f43f af22 	beq.w	800b3b8 <_printf_float+0x98>
 800b574:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b578:	ea59 0303 	orrs.w	r3, r9, r3
 800b57c:	d102      	bne.n	800b584 <_printf_float+0x264>
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	07d9      	lsls	r1, r3, #31
 800b582:	d5d7      	bpl.n	800b534 <_printf_float+0x214>
 800b584:	9b05      	ldr	r3, [sp, #20]
 800b586:	465a      	mov	r2, fp
 800b588:	4631      	mov	r1, r6
 800b58a:	4628      	mov	r0, r5
 800b58c:	47b8      	blx	r7
 800b58e:	3001      	adds	r0, #1
 800b590:	f43f af12 	beq.w	800b3b8 <_printf_float+0x98>
 800b594:	f04f 0a00 	mov.w	sl, #0
 800b598:	f104 0b1a 	add.w	fp, r4, #26
 800b59c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b59e:	425b      	negs	r3, r3
 800b5a0:	4553      	cmp	r3, sl
 800b5a2:	dc01      	bgt.n	800b5a8 <_printf_float+0x288>
 800b5a4:	464b      	mov	r3, r9
 800b5a6:	e794      	b.n	800b4d2 <_printf_float+0x1b2>
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	465a      	mov	r2, fp
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	47b8      	blx	r7
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	f43f af00 	beq.w	800b3b8 <_printf_float+0x98>
 800b5b8:	f10a 0a01 	add.w	sl, sl, #1
 800b5bc:	e7ee      	b.n	800b59c <_printf_float+0x27c>
 800b5be:	bf00      	nop
 800b5c0:	ffffffff 	.word	0xffffffff
 800b5c4:	7fefffff 	.word	0x7fefffff
 800b5c8:	08010744 	.word	0x08010744
 800b5cc:	08010748 	.word	0x08010748
 800b5d0:	0801074c 	.word	0x0801074c
 800b5d4:	08010750 	.word	0x08010750
 800b5d8:	08010754 	.word	0x08010754
 800b5dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b5de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b5e2:	4553      	cmp	r3, sl
 800b5e4:	bfa8      	it	ge
 800b5e6:	4653      	movge	r3, sl
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	4699      	mov	r9, r3
 800b5ec:	dc37      	bgt.n	800b65e <_printf_float+0x33e>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9307      	str	r3, [sp, #28]
 800b5f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5f6:	f104 021a 	add.w	r2, r4, #26
 800b5fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b5fc:	9907      	ldr	r1, [sp, #28]
 800b5fe:	9306      	str	r3, [sp, #24]
 800b600:	eba3 0309 	sub.w	r3, r3, r9
 800b604:	428b      	cmp	r3, r1
 800b606:	dc31      	bgt.n	800b66c <_printf_float+0x34c>
 800b608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b60a:	459a      	cmp	sl, r3
 800b60c:	dc3b      	bgt.n	800b686 <_printf_float+0x366>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	07da      	lsls	r2, r3, #31
 800b612:	d438      	bmi.n	800b686 <_printf_float+0x366>
 800b614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b616:	ebaa 0903 	sub.w	r9, sl, r3
 800b61a:	9b06      	ldr	r3, [sp, #24]
 800b61c:	ebaa 0303 	sub.w	r3, sl, r3
 800b620:	4599      	cmp	r9, r3
 800b622:	bfa8      	it	ge
 800b624:	4699      	movge	r9, r3
 800b626:	f1b9 0f00 	cmp.w	r9, #0
 800b62a:	dc34      	bgt.n	800b696 <_printf_float+0x376>
 800b62c:	f04f 0800 	mov.w	r8, #0
 800b630:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b634:	f104 0b1a 	add.w	fp, r4, #26
 800b638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b63a:	ebaa 0303 	sub.w	r3, sl, r3
 800b63e:	eba3 0309 	sub.w	r3, r3, r9
 800b642:	4543      	cmp	r3, r8
 800b644:	f77f af76 	ble.w	800b534 <_printf_float+0x214>
 800b648:	2301      	movs	r3, #1
 800b64a:	465a      	mov	r2, fp
 800b64c:	4631      	mov	r1, r6
 800b64e:	4628      	mov	r0, r5
 800b650:	47b8      	blx	r7
 800b652:	3001      	adds	r0, #1
 800b654:	f43f aeb0 	beq.w	800b3b8 <_printf_float+0x98>
 800b658:	f108 0801 	add.w	r8, r8, #1
 800b65c:	e7ec      	b.n	800b638 <_printf_float+0x318>
 800b65e:	4642      	mov	r2, r8
 800b660:	4631      	mov	r1, r6
 800b662:	4628      	mov	r0, r5
 800b664:	47b8      	blx	r7
 800b666:	3001      	adds	r0, #1
 800b668:	d1c1      	bne.n	800b5ee <_printf_float+0x2ce>
 800b66a:	e6a5      	b.n	800b3b8 <_printf_float+0x98>
 800b66c:	2301      	movs	r3, #1
 800b66e:	4631      	mov	r1, r6
 800b670:	4628      	mov	r0, r5
 800b672:	9206      	str	r2, [sp, #24]
 800b674:	47b8      	blx	r7
 800b676:	3001      	adds	r0, #1
 800b678:	f43f ae9e 	beq.w	800b3b8 <_printf_float+0x98>
 800b67c:	9b07      	ldr	r3, [sp, #28]
 800b67e:	9a06      	ldr	r2, [sp, #24]
 800b680:	3301      	adds	r3, #1
 800b682:	9307      	str	r3, [sp, #28]
 800b684:	e7b9      	b.n	800b5fa <_printf_float+0x2da>
 800b686:	9b05      	ldr	r3, [sp, #20]
 800b688:	465a      	mov	r2, fp
 800b68a:	4631      	mov	r1, r6
 800b68c:	4628      	mov	r0, r5
 800b68e:	47b8      	blx	r7
 800b690:	3001      	adds	r0, #1
 800b692:	d1bf      	bne.n	800b614 <_printf_float+0x2f4>
 800b694:	e690      	b.n	800b3b8 <_printf_float+0x98>
 800b696:	9a06      	ldr	r2, [sp, #24]
 800b698:	464b      	mov	r3, r9
 800b69a:	4442      	add	r2, r8
 800b69c:	4631      	mov	r1, r6
 800b69e:	4628      	mov	r0, r5
 800b6a0:	47b8      	blx	r7
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	d1c2      	bne.n	800b62c <_printf_float+0x30c>
 800b6a6:	e687      	b.n	800b3b8 <_printf_float+0x98>
 800b6a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b6ac:	f1b9 0f01 	cmp.w	r9, #1
 800b6b0:	dc01      	bgt.n	800b6b6 <_printf_float+0x396>
 800b6b2:	07db      	lsls	r3, r3, #31
 800b6b4:	d536      	bpl.n	800b724 <_printf_float+0x404>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	4642      	mov	r2, r8
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4628      	mov	r0, r5
 800b6be:	47b8      	blx	r7
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	f43f ae79 	beq.w	800b3b8 <_printf_float+0x98>
 800b6c6:	9b05      	ldr	r3, [sp, #20]
 800b6c8:	465a      	mov	r2, fp
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	47b8      	blx	r7
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	f43f ae71 	beq.w	800b3b8 <_printf_float+0x98>
 800b6d6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b6da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800b6e6:	d018      	beq.n	800b71a <_printf_float+0x3fa>
 800b6e8:	464b      	mov	r3, r9
 800b6ea:	f108 0201 	add.w	r2, r8, #1
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	47b8      	blx	r7
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	d10c      	bne.n	800b712 <_printf_float+0x3f2>
 800b6f8:	e65e      	b.n	800b3b8 <_printf_float+0x98>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	465a      	mov	r2, fp
 800b6fe:	4631      	mov	r1, r6
 800b700:	4628      	mov	r0, r5
 800b702:	47b8      	blx	r7
 800b704:	3001      	adds	r0, #1
 800b706:	f43f ae57 	beq.w	800b3b8 <_printf_float+0x98>
 800b70a:	f108 0801 	add.w	r8, r8, #1
 800b70e:	45c8      	cmp	r8, r9
 800b710:	dbf3      	blt.n	800b6fa <_printf_float+0x3da>
 800b712:	4653      	mov	r3, sl
 800b714:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b718:	e6dc      	b.n	800b4d4 <_printf_float+0x1b4>
 800b71a:	f04f 0800 	mov.w	r8, #0
 800b71e:	f104 0b1a 	add.w	fp, r4, #26
 800b722:	e7f4      	b.n	800b70e <_printf_float+0x3ee>
 800b724:	2301      	movs	r3, #1
 800b726:	4642      	mov	r2, r8
 800b728:	e7e1      	b.n	800b6ee <_printf_float+0x3ce>
 800b72a:	2301      	movs	r3, #1
 800b72c:	464a      	mov	r2, r9
 800b72e:	4631      	mov	r1, r6
 800b730:	4628      	mov	r0, r5
 800b732:	47b8      	blx	r7
 800b734:	3001      	adds	r0, #1
 800b736:	f43f ae3f 	beq.w	800b3b8 <_printf_float+0x98>
 800b73a:	f108 0801 	add.w	r8, r8, #1
 800b73e:	68e3      	ldr	r3, [r4, #12]
 800b740:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b742:	1a5b      	subs	r3, r3, r1
 800b744:	4543      	cmp	r3, r8
 800b746:	dcf0      	bgt.n	800b72a <_printf_float+0x40a>
 800b748:	e6f8      	b.n	800b53c <_printf_float+0x21c>
 800b74a:	f04f 0800 	mov.w	r8, #0
 800b74e:	f104 0919 	add.w	r9, r4, #25
 800b752:	e7f4      	b.n	800b73e <_printf_float+0x41e>

0800b754 <malloc>:
 800b754:	4b02      	ldr	r3, [pc, #8]	@ (800b760 <malloc+0xc>)
 800b756:	4601      	mov	r1, r0
 800b758:	6818      	ldr	r0, [r3, #0]
 800b75a:	f000 b82d 	b.w	800b7b8 <_malloc_r>
 800b75e:	bf00      	nop
 800b760:	20000200 	.word	0x20000200

0800b764 <free>:
 800b764:	4b02      	ldr	r3, [pc, #8]	@ (800b770 <free+0xc>)
 800b766:	4601      	mov	r1, r0
 800b768:	6818      	ldr	r0, [r3, #0]
 800b76a:	f002 baf3 	b.w	800dd54 <_free_r>
 800b76e:	bf00      	nop
 800b770:	20000200 	.word	0x20000200

0800b774 <sbrk_aligned>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	4e0f      	ldr	r6, [pc, #60]	@ (800b7b4 <sbrk_aligned+0x40>)
 800b778:	460c      	mov	r4, r1
 800b77a:	6831      	ldr	r1, [r6, #0]
 800b77c:	4605      	mov	r5, r0
 800b77e:	b911      	cbnz	r1, 800b786 <sbrk_aligned+0x12>
 800b780:	f001 fc8a 	bl	800d098 <_sbrk_r>
 800b784:	6030      	str	r0, [r6, #0]
 800b786:	4621      	mov	r1, r4
 800b788:	4628      	mov	r0, r5
 800b78a:	f001 fc85 	bl	800d098 <_sbrk_r>
 800b78e:	1c43      	adds	r3, r0, #1
 800b790:	d103      	bne.n	800b79a <sbrk_aligned+0x26>
 800b792:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b796:	4620      	mov	r0, r4
 800b798:	bd70      	pop	{r4, r5, r6, pc}
 800b79a:	1cc4      	adds	r4, r0, #3
 800b79c:	f024 0403 	bic.w	r4, r4, #3
 800b7a0:	42a0      	cmp	r0, r4
 800b7a2:	d0f8      	beq.n	800b796 <sbrk_aligned+0x22>
 800b7a4:	1a21      	subs	r1, r4, r0
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f001 fc76 	bl	800d098 <_sbrk_r>
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	d1f2      	bne.n	800b796 <sbrk_aligned+0x22>
 800b7b0:	e7ef      	b.n	800b792 <sbrk_aligned+0x1e>
 800b7b2:	bf00      	nop
 800b7b4:	20000688 	.word	0x20000688

0800b7b8 <_malloc_r>:
 800b7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7bc:	1ccd      	adds	r5, r1, #3
 800b7be:	f025 0503 	bic.w	r5, r5, #3
 800b7c2:	3508      	adds	r5, #8
 800b7c4:	2d0c      	cmp	r5, #12
 800b7c6:	bf38      	it	cc
 800b7c8:	250c      	movcc	r5, #12
 800b7ca:	2d00      	cmp	r5, #0
 800b7cc:	4606      	mov	r6, r0
 800b7ce:	db01      	blt.n	800b7d4 <_malloc_r+0x1c>
 800b7d0:	42a9      	cmp	r1, r5
 800b7d2:	d904      	bls.n	800b7de <_malloc_r+0x26>
 800b7d4:	230c      	movs	r3, #12
 800b7d6:	6033      	str	r3, [r6, #0]
 800b7d8:	2000      	movs	r0, #0
 800b7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8b4 <_malloc_r+0xfc>
 800b7e2:	f000 fc37 	bl	800c054 <__malloc_lock>
 800b7e6:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ea:	461c      	mov	r4, r3
 800b7ec:	bb44      	cbnz	r4, 800b840 <_malloc_r+0x88>
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f7ff ffbf 	bl	800b774 <sbrk_aligned>
 800b7f6:	1c43      	adds	r3, r0, #1
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	d158      	bne.n	800b8ae <_malloc_r+0xf6>
 800b7fc:	f8d8 4000 	ldr.w	r4, [r8]
 800b800:	4627      	mov	r7, r4
 800b802:	2f00      	cmp	r7, #0
 800b804:	d143      	bne.n	800b88e <_malloc_r+0xd6>
 800b806:	2c00      	cmp	r4, #0
 800b808:	d04b      	beq.n	800b8a2 <_malloc_r+0xea>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	4639      	mov	r1, r7
 800b80e:	4630      	mov	r0, r6
 800b810:	eb04 0903 	add.w	r9, r4, r3
 800b814:	f001 fc40 	bl	800d098 <_sbrk_r>
 800b818:	4581      	cmp	r9, r0
 800b81a:	d142      	bne.n	800b8a2 <_malloc_r+0xea>
 800b81c:	6821      	ldr	r1, [r4, #0]
 800b81e:	1a6d      	subs	r5, r5, r1
 800b820:	4629      	mov	r1, r5
 800b822:	4630      	mov	r0, r6
 800b824:	f7ff ffa6 	bl	800b774 <sbrk_aligned>
 800b828:	3001      	adds	r0, #1
 800b82a:	d03a      	beq.n	800b8a2 <_malloc_r+0xea>
 800b82c:	6823      	ldr	r3, [r4, #0]
 800b82e:	442b      	add	r3, r5
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	f8d8 3000 	ldr.w	r3, [r8]
 800b836:	685a      	ldr	r2, [r3, #4]
 800b838:	bb62      	cbnz	r2, 800b894 <_malloc_r+0xdc>
 800b83a:	f8c8 7000 	str.w	r7, [r8]
 800b83e:	e00f      	b.n	800b860 <_malloc_r+0xa8>
 800b840:	6822      	ldr	r2, [r4, #0]
 800b842:	1b52      	subs	r2, r2, r5
 800b844:	d420      	bmi.n	800b888 <_malloc_r+0xd0>
 800b846:	2a0b      	cmp	r2, #11
 800b848:	d917      	bls.n	800b87a <_malloc_r+0xc2>
 800b84a:	1961      	adds	r1, r4, r5
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	6025      	str	r5, [r4, #0]
 800b850:	bf18      	it	ne
 800b852:	6059      	strne	r1, [r3, #4]
 800b854:	6863      	ldr	r3, [r4, #4]
 800b856:	bf08      	it	eq
 800b858:	f8c8 1000 	streq.w	r1, [r8]
 800b85c:	5162      	str	r2, [r4, r5]
 800b85e:	604b      	str	r3, [r1, #4]
 800b860:	4630      	mov	r0, r6
 800b862:	f000 fbfd 	bl	800c060 <__malloc_unlock>
 800b866:	f104 000b 	add.w	r0, r4, #11
 800b86a:	1d23      	adds	r3, r4, #4
 800b86c:	f020 0007 	bic.w	r0, r0, #7
 800b870:	1ac2      	subs	r2, r0, r3
 800b872:	bf1c      	itt	ne
 800b874:	1a1b      	subne	r3, r3, r0
 800b876:	50a3      	strne	r3, [r4, r2]
 800b878:	e7af      	b.n	800b7da <_malloc_r+0x22>
 800b87a:	6862      	ldr	r2, [r4, #4]
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	bf0c      	ite	eq
 800b880:	f8c8 2000 	streq.w	r2, [r8]
 800b884:	605a      	strne	r2, [r3, #4]
 800b886:	e7eb      	b.n	800b860 <_malloc_r+0xa8>
 800b888:	4623      	mov	r3, r4
 800b88a:	6864      	ldr	r4, [r4, #4]
 800b88c:	e7ae      	b.n	800b7ec <_malloc_r+0x34>
 800b88e:	463c      	mov	r4, r7
 800b890:	687f      	ldr	r7, [r7, #4]
 800b892:	e7b6      	b.n	800b802 <_malloc_r+0x4a>
 800b894:	461a      	mov	r2, r3
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	42a3      	cmp	r3, r4
 800b89a:	d1fb      	bne.n	800b894 <_malloc_r+0xdc>
 800b89c:	2300      	movs	r3, #0
 800b89e:	6053      	str	r3, [r2, #4]
 800b8a0:	e7de      	b.n	800b860 <_malloc_r+0xa8>
 800b8a2:	230c      	movs	r3, #12
 800b8a4:	6033      	str	r3, [r6, #0]
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f000 fbda 	bl	800c060 <__malloc_unlock>
 800b8ac:	e794      	b.n	800b7d8 <_malloc_r+0x20>
 800b8ae:	6005      	str	r5, [r0, #0]
 800b8b0:	e7d6      	b.n	800b860 <_malloc_r+0xa8>
 800b8b2:	bf00      	nop
 800b8b4:	2000068c 	.word	0x2000068c

0800b8b8 <_printf_common>:
 800b8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8bc:	4616      	mov	r6, r2
 800b8be:	4698      	mov	r8, r3
 800b8c0:	688a      	ldr	r2, [r1, #8]
 800b8c2:	690b      	ldr	r3, [r1, #16]
 800b8c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	bfb8      	it	lt
 800b8cc:	4613      	movlt	r3, r2
 800b8ce:	6033      	str	r3, [r6, #0]
 800b8d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b8d4:	4607      	mov	r7, r0
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	b10a      	cbz	r2, 800b8de <_printf_common+0x26>
 800b8da:	3301      	adds	r3, #1
 800b8dc:	6033      	str	r3, [r6, #0]
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	0699      	lsls	r1, r3, #26
 800b8e2:	bf42      	ittt	mi
 800b8e4:	6833      	ldrmi	r3, [r6, #0]
 800b8e6:	3302      	addmi	r3, #2
 800b8e8:	6033      	strmi	r3, [r6, #0]
 800b8ea:	6825      	ldr	r5, [r4, #0]
 800b8ec:	f015 0506 	ands.w	r5, r5, #6
 800b8f0:	d106      	bne.n	800b900 <_printf_common+0x48>
 800b8f2:	f104 0a19 	add.w	sl, r4, #25
 800b8f6:	68e3      	ldr	r3, [r4, #12]
 800b8f8:	6832      	ldr	r2, [r6, #0]
 800b8fa:	1a9b      	subs	r3, r3, r2
 800b8fc:	42ab      	cmp	r3, r5
 800b8fe:	dc26      	bgt.n	800b94e <_printf_common+0x96>
 800b900:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b904:	6822      	ldr	r2, [r4, #0]
 800b906:	3b00      	subs	r3, #0
 800b908:	bf18      	it	ne
 800b90a:	2301      	movne	r3, #1
 800b90c:	0692      	lsls	r2, r2, #26
 800b90e:	d42b      	bmi.n	800b968 <_printf_common+0xb0>
 800b910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b914:	4641      	mov	r1, r8
 800b916:	4638      	mov	r0, r7
 800b918:	47c8      	blx	r9
 800b91a:	3001      	adds	r0, #1
 800b91c:	d01e      	beq.n	800b95c <_printf_common+0xa4>
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	6922      	ldr	r2, [r4, #16]
 800b922:	f003 0306 	and.w	r3, r3, #6
 800b926:	2b04      	cmp	r3, #4
 800b928:	bf02      	ittt	eq
 800b92a:	68e5      	ldreq	r5, [r4, #12]
 800b92c:	6833      	ldreq	r3, [r6, #0]
 800b92e:	1aed      	subeq	r5, r5, r3
 800b930:	68a3      	ldr	r3, [r4, #8]
 800b932:	bf0c      	ite	eq
 800b934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b938:	2500      	movne	r5, #0
 800b93a:	4293      	cmp	r3, r2
 800b93c:	bfc4      	itt	gt
 800b93e:	1a9b      	subgt	r3, r3, r2
 800b940:	18ed      	addgt	r5, r5, r3
 800b942:	2600      	movs	r6, #0
 800b944:	341a      	adds	r4, #26
 800b946:	42b5      	cmp	r5, r6
 800b948:	d11a      	bne.n	800b980 <_printf_common+0xc8>
 800b94a:	2000      	movs	r0, #0
 800b94c:	e008      	b.n	800b960 <_printf_common+0xa8>
 800b94e:	2301      	movs	r3, #1
 800b950:	4652      	mov	r2, sl
 800b952:	4641      	mov	r1, r8
 800b954:	4638      	mov	r0, r7
 800b956:	47c8      	blx	r9
 800b958:	3001      	adds	r0, #1
 800b95a:	d103      	bne.n	800b964 <_printf_common+0xac>
 800b95c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b964:	3501      	adds	r5, #1
 800b966:	e7c6      	b.n	800b8f6 <_printf_common+0x3e>
 800b968:	18e1      	adds	r1, r4, r3
 800b96a:	1c5a      	adds	r2, r3, #1
 800b96c:	2030      	movs	r0, #48	@ 0x30
 800b96e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b972:	4422      	add	r2, r4
 800b974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b97c:	3302      	adds	r3, #2
 800b97e:	e7c7      	b.n	800b910 <_printf_common+0x58>
 800b980:	2301      	movs	r3, #1
 800b982:	4622      	mov	r2, r4
 800b984:	4641      	mov	r1, r8
 800b986:	4638      	mov	r0, r7
 800b988:	47c8      	blx	r9
 800b98a:	3001      	adds	r0, #1
 800b98c:	d0e6      	beq.n	800b95c <_printf_common+0xa4>
 800b98e:	3601      	adds	r6, #1
 800b990:	e7d9      	b.n	800b946 <_printf_common+0x8e>
	...

0800b994 <_printf_i>:
 800b994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b998:	7e0f      	ldrb	r7, [r1, #24]
 800b99a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b99c:	2f78      	cmp	r7, #120	@ 0x78
 800b99e:	4691      	mov	r9, r2
 800b9a0:	4680      	mov	r8, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	469a      	mov	sl, r3
 800b9a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b9aa:	d807      	bhi.n	800b9bc <_printf_i+0x28>
 800b9ac:	2f62      	cmp	r7, #98	@ 0x62
 800b9ae:	d80a      	bhi.n	800b9c6 <_printf_i+0x32>
 800b9b0:	2f00      	cmp	r7, #0
 800b9b2:	f000 80d2 	beq.w	800bb5a <_printf_i+0x1c6>
 800b9b6:	2f58      	cmp	r7, #88	@ 0x58
 800b9b8:	f000 80b9 	beq.w	800bb2e <_printf_i+0x19a>
 800b9bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b9c4:	e03a      	b.n	800ba3c <_printf_i+0xa8>
 800b9c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b9ca:	2b15      	cmp	r3, #21
 800b9cc:	d8f6      	bhi.n	800b9bc <_printf_i+0x28>
 800b9ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b9d4 <_printf_i+0x40>)
 800b9d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9d4:	0800ba2d 	.word	0x0800ba2d
 800b9d8:	0800ba41 	.word	0x0800ba41
 800b9dc:	0800b9bd 	.word	0x0800b9bd
 800b9e0:	0800b9bd 	.word	0x0800b9bd
 800b9e4:	0800b9bd 	.word	0x0800b9bd
 800b9e8:	0800b9bd 	.word	0x0800b9bd
 800b9ec:	0800ba41 	.word	0x0800ba41
 800b9f0:	0800b9bd 	.word	0x0800b9bd
 800b9f4:	0800b9bd 	.word	0x0800b9bd
 800b9f8:	0800b9bd 	.word	0x0800b9bd
 800b9fc:	0800b9bd 	.word	0x0800b9bd
 800ba00:	0800bb41 	.word	0x0800bb41
 800ba04:	0800ba6b 	.word	0x0800ba6b
 800ba08:	0800bafb 	.word	0x0800bafb
 800ba0c:	0800b9bd 	.word	0x0800b9bd
 800ba10:	0800b9bd 	.word	0x0800b9bd
 800ba14:	0800bb63 	.word	0x0800bb63
 800ba18:	0800b9bd 	.word	0x0800b9bd
 800ba1c:	0800ba6b 	.word	0x0800ba6b
 800ba20:	0800b9bd 	.word	0x0800b9bd
 800ba24:	0800b9bd 	.word	0x0800b9bd
 800ba28:	0800bb03 	.word	0x0800bb03
 800ba2c:	6833      	ldr	r3, [r6, #0]
 800ba2e:	1d1a      	adds	r2, r3, #4
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	6032      	str	r2, [r6, #0]
 800ba34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e09d      	b.n	800bb7c <_printf_i+0x1e8>
 800ba40:	6833      	ldr	r3, [r6, #0]
 800ba42:	6820      	ldr	r0, [r4, #0]
 800ba44:	1d19      	adds	r1, r3, #4
 800ba46:	6031      	str	r1, [r6, #0]
 800ba48:	0606      	lsls	r6, r0, #24
 800ba4a:	d501      	bpl.n	800ba50 <_printf_i+0xbc>
 800ba4c:	681d      	ldr	r5, [r3, #0]
 800ba4e:	e003      	b.n	800ba58 <_printf_i+0xc4>
 800ba50:	0645      	lsls	r5, r0, #25
 800ba52:	d5fb      	bpl.n	800ba4c <_printf_i+0xb8>
 800ba54:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba58:	2d00      	cmp	r5, #0
 800ba5a:	da03      	bge.n	800ba64 <_printf_i+0xd0>
 800ba5c:	232d      	movs	r3, #45	@ 0x2d
 800ba5e:	426d      	negs	r5, r5
 800ba60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba64:	4859      	ldr	r0, [pc, #356]	@ (800bbcc <_printf_i+0x238>)
 800ba66:	230a      	movs	r3, #10
 800ba68:	e011      	b.n	800ba8e <_printf_i+0xfa>
 800ba6a:	6821      	ldr	r1, [r4, #0]
 800ba6c:	6833      	ldr	r3, [r6, #0]
 800ba6e:	0608      	lsls	r0, r1, #24
 800ba70:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba74:	d402      	bmi.n	800ba7c <_printf_i+0xe8>
 800ba76:	0649      	lsls	r1, r1, #25
 800ba78:	bf48      	it	mi
 800ba7a:	b2ad      	uxthmi	r5, r5
 800ba7c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba7e:	4853      	ldr	r0, [pc, #332]	@ (800bbcc <_printf_i+0x238>)
 800ba80:	6033      	str	r3, [r6, #0]
 800ba82:	bf14      	ite	ne
 800ba84:	230a      	movne	r3, #10
 800ba86:	2308      	moveq	r3, #8
 800ba88:	2100      	movs	r1, #0
 800ba8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba8e:	6866      	ldr	r6, [r4, #4]
 800ba90:	60a6      	str	r6, [r4, #8]
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	bfa2      	ittt	ge
 800ba96:	6821      	ldrge	r1, [r4, #0]
 800ba98:	f021 0104 	bicge.w	r1, r1, #4
 800ba9c:	6021      	strge	r1, [r4, #0]
 800ba9e:	b90d      	cbnz	r5, 800baa4 <_printf_i+0x110>
 800baa0:	2e00      	cmp	r6, #0
 800baa2:	d04b      	beq.n	800bb3c <_printf_i+0x1a8>
 800baa4:	4616      	mov	r6, r2
 800baa6:	fbb5 f1f3 	udiv	r1, r5, r3
 800baaa:	fb03 5711 	mls	r7, r3, r1, r5
 800baae:	5dc7      	ldrb	r7, [r0, r7]
 800bab0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bab4:	462f      	mov	r7, r5
 800bab6:	42bb      	cmp	r3, r7
 800bab8:	460d      	mov	r5, r1
 800baba:	d9f4      	bls.n	800baa6 <_printf_i+0x112>
 800babc:	2b08      	cmp	r3, #8
 800babe:	d10b      	bne.n	800bad8 <_printf_i+0x144>
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	07df      	lsls	r7, r3, #31
 800bac4:	d508      	bpl.n	800bad8 <_printf_i+0x144>
 800bac6:	6923      	ldr	r3, [r4, #16]
 800bac8:	6861      	ldr	r1, [r4, #4]
 800baca:	4299      	cmp	r1, r3
 800bacc:	bfde      	ittt	le
 800bace:	2330      	movle	r3, #48	@ 0x30
 800bad0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bad4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bad8:	1b92      	subs	r2, r2, r6
 800bada:	6122      	str	r2, [r4, #16]
 800badc:	f8cd a000 	str.w	sl, [sp]
 800bae0:	464b      	mov	r3, r9
 800bae2:	aa03      	add	r2, sp, #12
 800bae4:	4621      	mov	r1, r4
 800bae6:	4640      	mov	r0, r8
 800bae8:	f7ff fee6 	bl	800b8b8 <_printf_common>
 800baec:	3001      	adds	r0, #1
 800baee:	d14a      	bne.n	800bb86 <_printf_i+0x1f2>
 800baf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800baf4:	b004      	add	sp, #16
 800baf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafa:	6823      	ldr	r3, [r4, #0]
 800bafc:	f043 0320 	orr.w	r3, r3, #32
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	4833      	ldr	r0, [pc, #204]	@ (800bbd0 <_printf_i+0x23c>)
 800bb04:	2778      	movs	r7, #120	@ 0x78
 800bb06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	6831      	ldr	r1, [r6, #0]
 800bb0e:	061f      	lsls	r7, r3, #24
 800bb10:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb14:	d402      	bmi.n	800bb1c <_printf_i+0x188>
 800bb16:	065f      	lsls	r7, r3, #25
 800bb18:	bf48      	it	mi
 800bb1a:	b2ad      	uxthmi	r5, r5
 800bb1c:	6031      	str	r1, [r6, #0]
 800bb1e:	07d9      	lsls	r1, r3, #31
 800bb20:	bf44      	itt	mi
 800bb22:	f043 0320 	orrmi.w	r3, r3, #32
 800bb26:	6023      	strmi	r3, [r4, #0]
 800bb28:	b11d      	cbz	r5, 800bb32 <_printf_i+0x19e>
 800bb2a:	2310      	movs	r3, #16
 800bb2c:	e7ac      	b.n	800ba88 <_printf_i+0xf4>
 800bb2e:	4827      	ldr	r0, [pc, #156]	@ (800bbcc <_printf_i+0x238>)
 800bb30:	e7e9      	b.n	800bb06 <_printf_i+0x172>
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	f023 0320 	bic.w	r3, r3, #32
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	e7f6      	b.n	800bb2a <_printf_i+0x196>
 800bb3c:	4616      	mov	r6, r2
 800bb3e:	e7bd      	b.n	800babc <_printf_i+0x128>
 800bb40:	6833      	ldr	r3, [r6, #0]
 800bb42:	6825      	ldr	r5, [r4, #0]
 800bb44:	6961      	ldr	r1, [r4, #20]
 800bb46:	1d18      	adds	r0, r3, #4
 800bb48:	6030      	str	r0, [r6, #0]
 800bb4a:	062e      	lsls	r6, r5, #24
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	d501      	bpl.n	800bb54 <_printf_i+0x1c0>
 800bb50:	6019      	str	r1, [r3, #0]
 800bb52:	e002      	b.n	800bb5a <_printf_i+0x1c6>
 800bb54:	0668      	lsls	r0, r5, #25
 800bb56:	d5fb      	bpl.n	800bb50 <_printf_i+0x1bc>
 800bb58:	8019      	strh	r1, [r3, #0]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	6123      	str	r3, [r4, #16]
 800bb5e:	4616      	mov	r6, r2
 800bb60:	e7bc      	b.n	800badc <_printf_i+0x148>
 800bb62:	6833      	ldr	r3, [r6, #0]
 800bb64:	1d1a      	adds	r2, r3, #4
 800bb66:	6032      	str	r2, [r6, #0]
 800bb68:	681e      	ldr	r6, [r3, #0]
 800bb6a:	6862      	ldr	r2, [r4, #4]
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	4630      	mov	r0, r6
 800bb70:	f7f4 fb66 	bl	8000240 <memchr>
 800bb74:	b108      	cbz	r0, 800bb7a <_printf_i+0x1e6>
 800bb76:	1b80      	subs	r0, r0, r6
 800bb78:	6060      	str	r0, [r4, #4]
 800bb7a:	6863      	ldr	r3, [r4, #4]
 800bb7c:	6123      	str	r3, [r4, #16]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb84:	e7aa      	b.n	800badc <_printf_i+0x148>
 800bb86:	6923      	ldr	r3, [r4, #16]
 800bb88:	4632      	mov	r2, r6
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	47d0      	blx	sl
 800bb90:	3001      	adds	r0, #1
 800bb92:	d0ad      	beq.n	800baf0 <_printf_i+0x15c>
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	079b      	lsls	r3, r3, #30
 800bb98:	d413      	bmi.n	800bbc2 <_printf_i+0x22e>
 800bb9a:	68e0      	ldr	r0, [r4, #12]
 800bb9c:	9b03      	ldr	r3, [sp, #12]
 800bb9e:	4298      	cmp	r0, r3
 800bba0:	bfb8      	it	lt
 800bba2:	4618      	movlt	r0, r3
 800bba4:	e7a6      	b.n	800baf4 <_printf_i+0x160>
 800bba6:	2301      	movs	r3, #1
 800bba8:	4632      	mov	r2, r6
 800bbaa:	4649      	mov	r1, r9
 800bbac:	4640      	mov	r0, r8
 800bbae:	47d0      	blx	sl
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	d09d      	beq.n	800baf0 <_printf_i+0x15c>
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	68e3      	ldr	r3, [r4, #12]
 800bbb8:	9903      	ldr	r1, [sp, #12]
 800bbba:	1a5b      	subs	r3, r3, r1
 800bbbc:	42ab      	cmp	r3, r5
 800bbbe:	dcf2      	bgt.n	800bba6 <_printf_i+0x212>
 800bbc0:	e7eb      	b.n	800bb9a <_printf_i+0x206>
 800bbc2:	2500      	movs	r5, #0
 800bbc4:	f104 0619 	add.w	r6, r4, #25
 800bbc8:	e7f5      	b.n	800bbb6 <_printf_i+0x222>
 800bbca:	bf00      	nop
 800bbcc:	08010756 	.word	0x08010756
 800bbd0:	08010767 	.word	0x08010767

0800bbd4 <_scanf_float>:
 800bbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd8:	b087      	sub	sp, #28
 800bbda:	4617      	mov	r7, r2
 800bbdc:	9303      	str	r3, [sp, #12]
 800bbde:	688b      	ldr	r3, [r1, #8]
 800bbe0:	1e5a      	subs	r2, r3, #1
 800bbe2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bbe6:	bf81      	itttt	hi
 800bbe8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bbec:	eb03 0b05 	addhi.w	fp, r3, r5
 800bbf0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bbf4:	608b      	strhi	r3, [r1, #8]
 800bbf6:	680b      	ldr	r3, [r1, #0]
 800bbf8:	460a      	mov	r2, r1
 800bbfa:	f04f 0500 	mov.w	r5, #0
 800bbfe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bc02:	f842 3b1c 	str.w	r3, [r2], #28
 800bc06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bc0a:	4680      	mov	r8, r0
 800bc0c:	460c      	mov	r4, r1
 800bc0e:	bf98      	it	ls
 800bc10:	f04f 0b00 	movls.w	fp, #0
 800bc14:	9201      	str	r2, [sp, #4]
 800bc16:	4616      	mov	r6, r2
 800bc18:	46aa      	mov	sl, r5
 800bc1a:	46a9      	mov	r9, r5
 800bc1c:	9502      	str	r5, [sp, #8]
 800bc1e:	68a2      	ldr	r2, [r4, #8]
 800bc20:	b152      	cbz	r2, 800bc38 <_scanf_float+0x64>
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	2b4e      	cmp	r3, #78	@ 0x4e
 800bc28:	d864      	bhi.n	800bcf4 <_scanf_float+0x120>
 800bc2a:	2b40      	cmp	r3, #64	@ 0x40
 800bc2c:	d83c      	bhi.n	800bca8 <_scanf_float+0xd4>
 800bc2e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bc32:	b2c8      	uxtb	r0, r1
 800bc34:	280e      	cmp	r0, #14
 800bc36:	d93a      	bls.n	800bcae <_scanf_float+0xda>
 800bc38:	f1b9 0f00 	cmp.w	r9, #0
 800bc3c:	d003      	beq.n	800bc46 <_scanf_float+0x72>
 800bc3e:	6823      	ldr	r3, [r4, #0]
 800bc40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc44:	6023      	str	r3, [r4, #0]
 800bc46:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bc4a:	f1ba 0f01 	cmp.w	sl, #1
 800bc4e:	f200 8117 	bhi.w	800be80 <_scanf_float+0x2ac>
 800bc52:	9b01      	ldr	r3, [sp, #4]
 800bc54:	429e      	cmp	r6, r3
 800bc56:	f200 8108 	bhi.w	800be6a <_scanf_float+0x296>
 800bc5a:	2001      	movs	r0, #1
 800bc5c:	b007      	add	sp, #28
 800bc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc62:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bc66:	2a0d      	cmp	r2, #13
 800bc68:	d8e6      	bhi.n	800bc38 <_scanf_float+0x64>
 800bc6a:	a101      	add	r1, pc, #4	@ (adr r1, 800bc70 <_scanf_float+0x9c>)
 800bc6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bc70:	0800bdb7 	.word	0x0800bdb7
 800bc74:	0800bc39 	.word	0x0800bc39
 800bc78:	0800bc39 	.word	0x0800bc39
 800bc7c:	0800bc39 	.word	0x0800bc39
 800bc80:	0800be17 	.word	0x0800be17
 800bc84:	0800bdef 	.word	0x0800bdef
 800bc88:	0800bc39 	.word	0x0800bc39
 800bc8c:	0800bc39 	.word	0x0800bc39
 800bc90:	0800bdc5 	.word	0x0800bdc5
 800bc94:	0800bc39 	.word	0x0800bc39
 800bc98:	0800bc39 	.word	0x0800bc39
 800bc9c:	0800bc39 	.word	0x0800bc39
 800bca0:	0800bc39 	.word	0x0800bc39
 800bca4:	0800bd7d 	.word	0x0800bd7d
 800bca8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bcac:	e7db      	b.n	800bc66 <_scanf_float+0x92>
 800bcae:	290e      	cmp	r1, #14
 800bcb0:	d8c2      	bhi.n	800bc38 <_scanf_float+0x64>
 800bcb2:	a001      	add	r0, pc, #4	@ (adr r0, 800bcb8 <_scanf_float+0xe4>)
 800bcb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bcb8:	0800bd6d 	.word	0x0800bd6d
 800bcbc:	0800bc39 	.word	0x0800bc39
 800bcc0:	0800bd6d 	.word	0x0800bd6d
 800bcc4:	0800be03 	.word	0x0800be03
 800bcc8:	0800bc39 	.word	0x0800bc39
 800bccc:	0800bd15 	.word	0x0800bd15
 800bcd0:	0800bd53 	.word	0x0800bd53
 800bcd4:	0800bd53 	.word	0x0800bd53
 800bcd8:	0800bd53 	.word	0x0800bd53
 800bcdc:	0800bd53 	.word	0x0800bd53
 800bce0:	0800bd53 	.word	0x0800bd53
 800bce4:	0800bd53 	.word	0x0800bd53
 800bce8:	0800bd53 	.word	0x0800bd53
 800bcec:	0800bd53 	.word	0x0800bd53
 800bcf0:	0800bd53 	.word	0x0800bd53
 800bcf4:	2b6e      	cmp	r3, #110	@ 0x6e
 800bcf6:	d809      	bhi.n	800bd0c <_scanf_float+0x138>
 800bcf8:	2b60      	cmp	r3, #96	@ 0x60
 800bcfa:	d8b2      	bhi.n	800bc62 <_scanf_float+0x8e>
 800bcfc:	2b54      	cmp	r3, #84	@ 0x54
 800bcfe:	d07b      	beq.n	800bdf8 <_scanf_float+0x224>
 800bd00:	2b59      	cmp	r3, #89	@ 0x59
 800bd02:	d199      	bne.n	800bc38 <_scanf_float+0x64>
 800bd04:	2d07      	cmp	r5, #7
 800bd06:	d197      	bne.n	800bc38 <_scanf_float+0x64>
 800bd08:	2508      	movs	r5, #8
 800bd0a:	e02c      	b.n	800bd66 <_scanf_float+0x192>
 800bd0c:	2b74      	cmp	r3, #116	@ 0x74
 800bd0e:	d073      	beq.n	800bdf8 <_scanf_float+0x224>
 800bd10:	2b79      	cmp	r3, #121	@ 0x79
 800bd12:	e7f6      	b.n	800bd02 <_scanf_float+0x12e>
 800bd14:	6821      	ldr	r1, [r4, #0]
 800bd16:	05c8      	lsls	r0, r1, #23
 800bd18:	d51b      	bpl.n	800bd52 <_scanf_float+0x17e>
 800bd1a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bd1e:	6021      	str	r1, [r4, #0]
 800bd20:	f109 0901 	add.w	r9, r9, #1
 800bd24:	f1bb 0f00 	cmp.w	fp, #0
 800bd28:	d003      	beq.n	800bd32 <_scanf_float+0x15e>
 800bd2a:	3201      	adds	r2, #1
 800bd2c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800bd30:	60a2      	str	r2, [r4, #8]
 800bd32:	68a3      	ldr	r3, [r4, #8]
 800bd34:	3b01      	subs	r3, #1
 800bd36:	60a3      	str	r3, [r4, #8]
 800bd38:	6923      	ldr	r3, [r4, #16]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	6123      	str	r3, [r4, #16]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	607b      	str	r3, [r7, #4]
 800bd46:	f340 8087 	ble.w	800be58 <_scanf_float+0x284>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	603b      	str	r3, [r7, #0]
 800bd50:	e765      	b.n	800bc1e <_scanf_float+0x4a>
 800bd52:	eb1a 0105 	adds.w	r1, sl, r5
 800bd56:	f47f af6f 	bne.w	800bc38 <_scanf_float+0x64>
 800bd5a:	6822      	ldr	r2, [r4, #0]
 800bd5c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bd60:	6022      	str	r2, [r4, #0]
 800bd62:	460d      	mov	r5, r1
 800bd64:	468a      	mov	sl, r1
 800bd66:	f806 3b01 	strb.w	r3, [r6], #1
 800bd6a:	e7e2      	b.n	800bd32 <_scanf_float+0x15e>
 800bd6c:	6822      	ldr	r2, [r4, #0]
 800bd6e:	0610      	lsls	r0, r2, #24
 800bd70:	f57f af62 	bpl.w	800bc38 <_scanf_float+0x64>
 800bd74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bd78:	6022      	str	r2, [r4, #0]
 800bd7a:	e7f4      	b.n	800bd66 <_scanf_float+0x192>
 800bd7c:	f1ba 0f00 	cmp.w	sl, #0
 800bd80:	d10e      	bne.n	800bda0 <_scanf_float+0x1cc>
 800bd82:	f1b9 0f00 	cmp.w	r9, #0
 800bd86:	d10e      	bne.n	800bda6 <_scanf_float+0x1d2>
 800bd88:	6822      	ldr	r2, [r4, #0]
 800bd8a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bd8e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bd92:	d108      	bne.n	800bda6 <_scanf_float+0x1d2>
 800bd94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bd98:	6022      	str	r2, [r4, #0]
 800bd9a:	f04f 0a01 	mov.w	sl, #1
 800bd9e:	e7e2      	b.n	800bd66 <_scanf_float+0x192>
 800bda0:	f1ba 0f02 	cmp.w	sl, #2
 800bda4:	d055      	beq.n	800be52 <_scanf_float+0x27e>
 800bda6:	2d01      	cmp	r5, #1
 800bda8:	d002      	beq.n	800bdb0 <_scanf_float+0x1dc>
 800bdaa:	2d04      	cmp	r5, #4
 800bdac:	f47f af44 	bne.w	800bc38 <_scanf_float+0x64>
 800bdb0:	3501      	adds	r5, #1
 800bdb2:	b2ed      	uxtb	r5, r5
 800bdb4:	e7d7      	b.n	800bd66 <_scanf_float+0x192>
 800bdb6:	f1ba 0f01 	cmp.w	sl, #1
 800bdba:	f47f af3d 	bne.w	800bc38 <_scanf_float+0x64>
 800bdbe:	f04f 0a02 	mov.w	sl, #2
 800bdc2:	e7d0      	b.n	800bd66 <_scanf_float+0x192>
 800bdc4:	b97d      	cbnz	r5, 800bde6 <_scanf_float+0x212>
 800bdc6:	f1b9 0f00 	cmp.w	r9, #0
 800bdca:	f47f af38 	bne.w	800bc3e <_scanf_float+0x6a>
 800bdce:	6822      	ldr	r2, [r4, #0]
 800bdd0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bdd4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bdd8:	f040 8101 	bne.w	800bfde <_scanf_float+0x40a>
 800bddc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bde0:	6022      	str	r2, [r4, #0]
 800bde2:	2501      	movs	r5, #1
 800bde4:	e7bf      	b.n	800bd66 <_scanf_float+0x192>
 800bde6:	2d03      	cmp	r5, #3
 800bde8:	d0e2      	beq.n	800bdb0 <_scanf_float+0x1dc>
 800bdea:	2d05      	cmp	r5, #5
 800bdec:	e7de      	b.n	800bdac <_scanf_float+0x1d8>
 800bdee:	2d02      	cmp	r5, #2
 800bdf0:	f47f af22 	bne.w	800bc38 <_scanf_float+0x64>
 800bdf4:	2503      	movs	r5, #3
 800bdf6:	e7b6      	b.n	800bd66 <_scanf_float+0x192>
 800bdf8:	2d06      	cmp	r5, #6
 800bdfa:	f47f af1d 	bne.w	800bc38 <_scanf_float+0x64>
 800bdfe:	2507      	movs	r5, #7
 800be00:	e7b1      	b.n	800bd66 <_scanf_float+0x192>
 800be02:	6822      	ldr	r2, [r4, #0]
 800be04:	0591      	lsls	r1, r2, #22
 800be06:	f57f af17 	bpl.w	800bc38 <_scanf_float+0x64>
 800be0a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800be0e:	6022      	str	r2, [r4, #0]
 800be10:	f8cd 9008 	str.w	r9, [sp, #8]
 800be14:	e7a7      	b.n	800bd66 <_scanf_float+0x192>
 800be16:	6822      	ldr	r2, [r4, #0]
 800be18:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800be1c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800be20:	d006      	beq.n	800be30 <_scanf_float+0x25c>
 800be22:	0550      	lsls	r0, r2, #21
 800be24:	f57f af08 	bpl.w	800bc38 <_scanf_float+0x64>
 800be28:	f1b9 0f00 	cmp.w	r9, #0
 800be2c:	f000 80d7 	beq.w	800bfde <_scanf_float+0x40a>
 800be30:	0591      	lsls	r1, r2, #22
 800be32:	bf58      	it	pl
 800be34:	9902      	ldrpl	r1, [sp, #8]
 800be36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800be3a:	bf58      	it	pl
 800be3c:	eba9 0101 	subpl.w	r1, r9, r1
 800be40:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800be44:	bf58      	it	pl
 800be46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800be4a:	6022      	str	r2, [r4, #0]
 800be4c:	f04f 0900 	mov.w	r9, #0
 800be50:	e789      	b.n	800bd66 <_scanf_float+0x192>
 800be52:	f04f 0a03 	mov.w	sl, #3
 800be56:	e786      	b.n	800bd66 <_scanf_float+0x192>
 800be58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800be5c:	4639      	mov	r1, r7
 800be5e:	4640      	mov	r0, r8
 800be60:	4798      	blx	r3
 800be62:	2800      	cmp	r0, #0
 800be64:	f43f aedb 	beq.w	800bc1e <_scanf_float+0x4a>
 800be68:	e6e6      	b.n	800bc38 <_scanf_float+0x64>
 800be6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800be72:	463a      	mov	r2, r7
 800be74:	4640      	mov	r0, r8
 800be76:	4798      	blx	r3
 800be78:	6923      	ldr	r3, [r4, #16]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	6123      	str	r3, [r4, #16]
 800be7e:	e6e8      	b.n	800bc52 <_scanf_float+0x7e>
 800be80:	1e6b      	subs	r3, r5, #1
 800be82:	2b06      	cmp	r3, #6
 800be84:	d824      	bhi.n	800bed0 <_scanf_float+0x2fc>
 800be86:	2d02      	cmp	r5, #2
 800be88:	d836      	bhi.n	800bef8 <_scanf_float+0x324>
 800be8a:	9b01      	ldr	r3, [sp, #4]
 800be8c:	429e      	cmp	r6, r3
 800be8e:	f67f aee4 	bls.w	800bc5a <_scanf_float+0x86>
 800be92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800be9a:	463a      	mov	r2, r7
 800be9c:	4640      	mov	r0, r8
 800be9e:	4798      	blx	r3
 800bea0:	6923      	ldr	r3, [r4, #16]
 800bea2:	3b01      	subs	r3, #1
 800bea4:	6123      	str	r3, [r4, #16]
 800bea6:	e7f0      	b.n	800be8a <_scanf_float+0x2b6>
 800bea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800beac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800beb0:	463a      	mov	r2, r7
 800beb2:	4640      	mov	r0, r8
 800beb4:	4798      	blx	r3
 800beb6:	6923      	ldr	r3, [r4, #16]
 800beb8:	3b01      	subs	r3, #1
 800beba:	6123      	str	r3, [r4, #16]
 800bebc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bec0:	fa5f fa8a 	uxtb.w	sl, sl
 800bec4:	f1ba 0f02 	cmp.w	sl, #2
 800bec8:	d1ee      	bne.n	800bea8 <_scanf_float+0x2d4>
 800beca:	3d03      	subs	r5, #3
 800becc:	b2ed      	uxtb	r5, r5
 800bece:	1b76      	subs	r6, r6, r5
 800bed0:	6823      	ldr	r3, [r4, #0]
 800bed2:	05da      	lsls	r2, r3, #23
 800bed4:	d530      	bpl.n	800bf38 <_scanf_float+0x364>
 800bed6:	055b      	lsls	r3, r3, #21
 800bed8:	d511      	bpl.n	800befe <_scanf_float+0x32a>
 800beda:	9b01      	ldr	r3, [sp, #4]
 800bedc:	429e      	cmp	r6, r3
 800bede:	f67f aebc 	bls.w	800bc5a <_scanf_float+0x86>
 800bee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bee6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800beea:	463a      	mov	r2, r7
 800beec:	4640      	mov	r0, r8
 800beee:	4798      	blx	r3
 800bef0:	6923      	ldr	r3, [r4, #16]
 800bef2:	3b01      	subs	r3, #1
 800bef4:	6123      	str	r3, [r4, #16]
 800bef6:	e7f0      	b.n	800beda <_scanf_float+0x306>
 800bef8:	46aa      	mov	sl, r5
 800befa:	46b3      	mov	fp, r6
 800befc:	e7de      	b.n	800bebc <_scanf_float+0x2e8>
 800befe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	2965      	cmp	r1, #101	@ 0x65
 800bf06:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bf0a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800bf0e:	6123      	str	r3, [r4, #16]
 800bf10:	d00c      	beq.n	800bf2c <_scanf_float+0x358>
 800bf12:	2945      	cmp	r1, #69	@ 0x45
 800bf14:	d00a      	beq.n	800bf2c <_scanf_float+0x358>
 800bf16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bf1a:	463a      	mov	r2, r7
 800bf1c:	4640      	mov	r0, r8
 800bf1e:	4798      	blx	r3
 800bf20:	6923      	ldr	r3, [r4, #16]
 800bf22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bf26:	3b01      	subs	r3, #1
 800bf28:	1eb5      	subs	r5, r6, #2
 800bf2a:	6123      	str	r3, [r4, #16]
 800bf2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bf30:	463a      	mov	r2, r7
 800bf32:	4640      	mov	r0, r8
 800bf34:	4798      	blx	r3
 800bf36:	462e      	mov	r6, r5
 800bf38:	6822      	ldr	r2, [r4, #0]
 800bf3a:	f012 0210 	ands.w	r2, r2, #16
 800bf3e:	d001      	beq.n	800bf44 <_scanf_float+0x370>
 800bf40:	2000      	movs	r0, #0
 800bf42:	e68b      	b.n	800bc5c <_scanf_float+0x88>
 800bf44:	7032      	strb	r2, [r6, #0]
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bf4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf50:	d11a      	bne.n	800bf88 <_scanf_float+0x3b4>
 800bf52:	9b02      	ldr	r3, [sp, #8]
 800bf54:	454b      	cmp	r3, r9
 800bf56:	eba3 0209 	sub.w	r2, r3, r9
 800bf5a:	d121      	bne.n	800bfa0 <_scanf_float+0x3cc>
 800bf5c:	9901      	ldr	r1, [sp, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	4640      	mov	r0, r8
 800bf62:	f000 ff63 	bl	800ce2c <_strtod_r>
 800bf66:	9b03      	ldr	r3, [sp, #12]
 800bf68:	6821      	ldr	r1, [r4, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f011 0f02 	tst.w	r1, #2
 800bf70:	f103 0204 	add.w	r2, r3, #4
 800bf74:	d01f      	beq.n	800bfb6 <_scanf_float+0x3e2>
 800bf76:	9903      	ldr	r1, [sp, #12]
 800bf78:	600a      	str	r2, [r1, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	ed83 0b00 	vstr	d0, [r3]
 800bf80:	68e3      	ldr	r3, [r4, #12]
 800bf82:	3301      	adds	r3, #1
 800bf84:	60e3      	str	r3, [r4, #12]
 800bf86:	e7db      	b.n	800bf40 <_scanf_float+0x36c>
 800bf88:	9b04      	ldr	r3, [sp, #16]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d0e6      	beq.n	800bf5c <_scanf_float+0x388>
 800bf8e:	9905      	ldr	r1, [sp, #20]
 800bf90:	230a      	movs	r3, #10
 800bf92:	3101      	adds	r1, #1
 800bf94:	4640      	mov	r0, r8
 800bf96:	f000 ffc9 	bl	800cf2c <_strtol_r>
 800bf9a:	9b04      	ldr	r3, [sp, #16]
 800bf9c:	9e05      	ldr	r6, [sp, #20]
 800bf9e:	1ac2      	subs	r2, r0, r3
 800bfa0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bfa4:	429e      	cmp	r6, r3
 800bfa6:	bf28      	it	cs
 800bfa8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bfac:	490d      	ldr	r1, [pc, #52]	@ (800bfe4 <_scanf_float+0x410>)
 800bfae:	4630      	mov	r0, r6
 800bfb0:	f000 f85c 	bl	800c06c <siprintf>
 800bfb4:	e7d2      	b.n	800bf5c <_scanf_float+0x388>
 800bfb6:	f011 0f04 	tst.w	r1, #4
 800bfba:	9903      	ldr	r1, [sp, #12]
 800bfbc:	600a      	str	r2, [r1, #0]
 800bfbe:	d1dc      	bne.n	800bf7a <_scanf_float+0x3a6>
 800bfc0:	eeb4 0b40 	vcmp.f64	d0, d0
 800bfc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc8:	681d      	ldr	r5, [r3, #0]
 800bfca:	d705      	bvc.n	800bfd8 <_scanf_float+0x404>
 800bfcc:	4806      	ldr	r0, [pc, #24]	@ (800bfe8 <_scanf_float+0x414>)
 800bfce:	f001 f8bf 	bl	800d150 <nanf>
 800bfd2:	ed85 0a00 	vstr	s0, [r5]
 800bfd6:	e7d3      	b.n	800bf80 <_scanf_float+0x3ac>
 800bfd8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bfdc:	e7f9      	b.n	800bfd2 <_scanf_float+0x3fe>
 800bfde:	f04f 0900 	mov.w	r9, #0
 800bfe2:	e630      	b.n	800bc46 <_scanf_float+0x72>
 800bfe4:	08010778 	.word	0x08010778
 800bfe8:	08010984 	.word	0x08010984

0800bfec <sniprintf>:
 800bfec:	b40c      	push	{r2, r3}
 800bfee:	b530      	push	{r4, r5, lr}
 800bff0:	4b17      	ldr	r3, [pc, #92]	@ (800c050 <sniprintf+0x64>)
 800bff2:	1e0c      	subs	r4, r1, #0
 800bff4:	681d      	ldr	r5, [r3, #0]
 800bff6:	b09d      	sub	sp, #116	@ 0x74
 800bff8:	da08      	bge.n	800c00c <sniprintf+0x20>
 800bffa:	238b      	movs	r3, #139	@ 0x8b
 800bffc:	602b      	str	r3, [r5, #0]
 800bffe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c002:	b01d      	add	sp, #116	@ 0x74
 800c004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c008:	b002      	add	sp, #8
 800c00a:	4770      	bx	lr
 800c00c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c010:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c014:	bf14      	ite	ne
 800c016:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800c01a:	4623      	moveq	r3, r4
 800c01c:	9304      	str	r3, [sp, #16]
 800c01e:	9307      	str	r3, [sp, #28]
 800c020:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c024:	9002      	str	r0, [sp, #8]
 800c026:	9006      	str	r0, [sp, #24]
 800c028:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c02c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c02e:	ab21      	add	r3, sp, #132	@ 0x84
 800c030:	a902      	add	r1, sp, #8
 800c032:	4628      	mov	r0, r5
 800c034:	9301      	str	r3, [sp, #4]
 800c036:	f002 fa6b 	bl	800e510 <_svfiprintf_r>
 800c03a:	1c43      	adds	r3, r0, #1
 800c03c:	bfbc      	itt	lt
 800c03e:	238b      	movlt	r3, #139	@ 0x8b
 800c040:	602b      	strlt	r3, [r5, #0]
 800c042:	2c00      	cmp	r4, #0
 800c044:	d0dd      	beq.n	800c002 <sniprintf+0x16>
 800c046:	9b02      	ldr	r3, [sp, #8]
 800c048:	2200      	movs	r2, #0
 800c04a:	701a      	strb	r2, [r3, #0]
 800c04c:	e7d9      	b.n	800c002 <sniprintf+0x16>
 800c04e:	bf00      	nop
 800c050:	20000200 	.word	0x20000200

0800c054 <__malloc_lock>:
 800c054:	4801      	ldr	r0, [pc, #4]	@ (800c05c <__malloc_lock+0x8>)
 800c056:	f001 b85a 	b.w	800d10e <__retarget_lock_acquire_recursive>
 800c05a:	bf00      	nop
 800c05c:	200007cc 	.word	0x200007cc

0800c060 <__malloc_unlock>:
 800c060:	4801      	ldr	r0, [pc, #4]	@ (800c068 <__malloc_unlock+0x8>)
 800c062:	f001 b855 	b.w	800d110 <__retarget_lock_release_recursive>
 800c066:	bf00      	nop
 800c068:	200007cc 	.word	0x200007cc

0800c06c <siprintf>:
 800c06c:	b40e      	push	{r1, r2, r3}
 800c06e:	b500      	push	{lr}
 800c070:	b09c      	sub	sp, #112	@ 0x70
 800c072:	ab1d      	add	r3, sp, #116	@ 0x74
 800c074:	9002      	str	r0, [sp, #8]
 800c076:	9006      	str	r0, [sp, #24]
 800c078:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c07c:	4809      	ldr	r0, [pc, #36]	@ (800c0a4 <siprintf+0x38>)
 800c07e:	9107      	str	r1, [sp, #28]
 800c080:	9104      	str	r1, [sp, #16]
 800c082:	4909      	ldr	r1, [pc, #36]	@ (800c0a8 <siprintf+0x3c>)
 800c084:	f853 2b04 	ldr.w	r2, [r3], #4
 800c088:	9105      	str	r1, [sp, #20]
 800c08a:	6800      	ldr	r0, [r0, #0]
 800c08c:	9301      	str	r3, [sp, #4]
 800c08e:	a902      	add	r1, sp, #8
 800c090:	f002 fa3e 	bl	800e510 <_svfiprintf_r>
 800c094:	9b02      	ldr	r3, [sp, #8]
 800c096:	2200      	movs	r2, #0
 800c098:	701a      	strb	r2, [r3, #0]
 800c09a:	b01c      	add	sp, #112	@ 0x70
 800c09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0a0:	b003      	add	sp, #12
 800c0a2:	4770      	bx	lr
 800c0a4:	20000200 	.word	0x20000200
 800c0a8:	ffff0208 	.word	0xffff0208

0800c0ac <srand>:
 800c0ac:	b538      	push	{r3, r4, r5, lr}
 800c0ae:	4b10      	ldr	r3, [pc, #64]	@ (800c0f0 <srand+0x44>)
 800c0b0:	681d      	ldr	r5, [r3, #0]
 800c0b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	b9b3      	cbnz	r3, 800c0e6 <srand+0x3a>
 800c0b8:	2018      	movs	r0, #24
 800c0ba:	f7ff fb4b 	bl	800b754 <malloc>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	6328      	str	r0, [r5, #48]	@ 0x30
 800c0c2:	b920      	cbnz	r0, 800c0ce <srand+0x22>
 800c0c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c0f4 <srand+0x48>)
 800c0c6:	480c      	ldr	r0, [pc, #48]	@ (800c0f8 <srand+0x4c>)
 800c0c8:	2146      	movs	r1, #70	@ 0x46
 800c0ca:	f001 f847 	bl	800d15c <__assert_func>
 800c0ce:	490b      	ldr	r1, [pc, #44]	@ (800c0fc <srand+0x50>)
 800c0d0:	4b0b      	ldr	r3, [pc, #44]	@ (800c100 <srand+0x54>)
 800c0d2:	e9c0 1300 	strd	r1, r3, [r0]
 800c0d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c104 <srand+0x58>)
 800c0d8:	6083      	str	r3, [r0, #8]
 800c0da:	230b      	movs	r3, #11
 800c0dc:	8183      	strh	r3, [r0, #12]
 800c0de:	2100      	movs	r1, #0
 800c0e0:	2001      	movs	r0, #1
 800c0e2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c0e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	611c      	str	r4, [r3, #16]
 800c0ec:	615a      	str	r2, [r3, #20]
 800c0ee:	bd38      	pop	{r3, r4, r5, pc}
 800c0f0:	20000200 	.word	0x20000200
 800c0f4:	0801077d 	.word	0x0801077d
 800c0f8:	08010794 	.word	0x08010794
 800c0fc:	abcd330e 	.word	0xabcd330e
 800c100:	e66d1234 	.word	0xe66d1234
 800c104:	0005deec 	.word	0x0005deec

0800c108 <rand>:
 800c108:	4b16      	ldr	r3, [pc, #88]	@ (800c164 <rand+0x5c>)
 800c10a:	b510      	push	{r4, lr}
 800c10c:	681c      	ldr	r4, [r3, #0]
 800c10e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c110:	b9b3      	cbnz	r3, 800c140 <rand+0x38>
 800c112:	2018      	movs	r0, #24
 800c114:	f7ff fb1e 	bl	800b754 <malloc>
 800c118:	4602      	mov	r2, r0
 800c11a:	6320      	str	r0, [r4, #48]	@ 0x30
 800c11c:	b920      	cbnz	r0, 800c128 <rand+0x20>
 800c11e:	4b12      	ldr	r3, [pc, #72]	@ (800c168 <rand+0x60>)
 800c120:	4812      	ldr	r0, [pc, #72]	@ (800c16c <rand+0x64>)
 800c122:	2152      	movs	r1, #82	@ 0x52
 800c124:	f001 f81a 	bl	800d15c <__assert_func>
 800c128:	4911      	ldr	r1, [pc, #68]	@ (800c170 <rand+0x68>)
 800c12a:	4b12      	ldr	r3, [pc, #72]	@ (800c174 <rand+0x6c>)
 800c12c:	e9c0 1300 	strd	r1, r3, [r0]
 800c130:	4b11      	ldr	r3, [pc, #68]	@ (800c178 <rand+0x70>)
 800c132:	6083      	str	r3, [r0, #8]
 800c134:	230b      	movs	r3, #11
 800c136:	8183      	strh	r3, [r0, #12]
 800c138:	2100      	movs	r1, #0
 800c13a:	2001      	movs	r0, #1
 800c13c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c140:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c142:	480e      	ldr	r0, [pc, #56]	@ (800c17c <rand+0x74>)
 800c144:	690b      	ldr	r3, [r1, #16]
 800c146:	694c      	ldr	r4, [r1, #20]
 800c148:	4a0d      	ldr	r2, [pc, #52]	@ (800c180 <rand+0x78>)
 800c14a:	4358      	muls	r0, r3
 800c14c:	fb02 0004 	mla	r0, r2, r4, r0
 800c150:	fba3 3202 	umull	r3, r2, r3, r2
 800c154:	3301      	adds	r3, #1
 800c156:	eb40 0002 	adc.w	r0, r0, r2
 800c15a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c15e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c162:	bd10      	pop	{r4, pc}
 800c164:	20000200 	.word	0x20000200
 800c168:	0801077d 	.word	0x0801077d
 800c16c:	08010794 	.word	0x08010794
 800c170:	abcd330e 	.word	0xabcd330e
 800c174:	e66d1234 	.word	0xe66d1234
 800c178:	0005deec 	.word	0x0005deec
 800c17c:	5851f42d 	.word	0x5851f42d
 800c180:	4c957f2d 	.word	0x4c957f2d

0800c184 <std>:
 800c184:	2300      	movs	r3, #0
 800c186:	b510      	push	{r4, lr}
 800c188:	4604      	mov	r4, r0
 800c18a:	e9c0 3300 	strd	r3, r3, [r0]
 800c18e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c192:	6083      	str	r3, [r0, #8]
 800c194:	8181      	strh	r1, [r0, #12]
 800c196:	6643      	str	r3, [r0, #100]	@ 0x64
 800c198:	81c2      	strh	r2, [r0, #14]
 800c19a:	6183      	str	r3, [r0, #24]
 800c19c:	4619      	mov	r1, r3
 800c19e:	2208      	movs	r2, #8
 800c1a0:	305c      	adds	r0, #92	@ 0x5c
 800c1a2:	f000 ff6d 	bl	800d080 <memset>
 800c1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c1dc <std+0x58>)
 800c1a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e0 <std+0x5c>)
 800c1ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e4 <std+0x60>)
 800c1b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e8 <std+0x64>)
 800c1b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c1ec <std+0x68>)
 800c1b8:	6224      	str	r4, [r4, #32]
 800c1ba:	429c      	cmp	r4, r3
 800c1bc:	d006      	beq.n	800c1cc <std+0x48>
 800c1be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c1c2:	4294      	cmp	r4, r2
 800c1c4:	d002      	beq.n	800c1cc <std+0x48>
 800c1c6:	33d0      	adds	r3, #208	@ 0xd0
 800c1c8:	429c      	cmp	r4, r3
 800c1ca:	d105      	bne.n	800c1d8 <std+0x54>
 800c1cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1d4:	f000 bf9a 	b.w	800d10c <__retarget_lock_init_recursive>
 800c1d8:	bd10      	pop	{r4, pc}
 800c1da:	bf00      	nop
 800c1dc:	0800f467 	.word	0x0800f467
 800c1e0:	0800f489 	.word	0x0800f489
 800c1e4:	0800f4c1 	.word	0x0800f4c1
 800c1e8:	0800f4e5 	.word	0x0800f4e5
 800c1ec:	20000690 	.word	0x20000690

0800c1f0 <stdio_exit_handler>:
 800c1f0:	4a02      	ldr	r2, [pc, #8]	@ (800c1fc <stdio_exit_handler+0xc>)
 800c1f2:	4903      	ldr	r1, [pc, #12]	@ (800c200 <stdio_exit_handler+0x10>)
 800c1f4:	4803      	ldr	r0, [pc, #12]	@ (800c204 <stdio_exit_handler+0x14>)
 800c1f6:	f000 be9b 	b.w	800cf30 <_fwalk_sglue>
 800c1fa:	bf00      	nop
 800c1fc:	20000088 	.word	0x20000088
 800c200:	0800eab9 	.word	0x0800eab9
 800c204:	20000204 	.word	0x20000204

0800c208 <cleanup_stdio>:
 800c208:	6841      	ldr	r1, [r0, #4]
 800c20a:	4b0c      	ldr	r3, [pc, #48]	@ (800c23c <cleanup_stdio+0x34>)
 800c20c:	4299      	cmp	r1, r3
 800c20e:	b510      	push	{r4, lr}
 800c210:	4604      	mov	r4, r0
 800c212:	d001      	beq.n	800c218 <cleanup_stdio+0x10>
 800c214:	f002 fc50 	bl	800eab8 <_fflush_r>
 800c218:	68a1      	ldr	r1, [r4, #8]
 800c21a:	4b09      	ldr	r3, [pc, #36]	@ (800c240 <cleanup_stdio+0x38>)
 800c21c:	4299      	cmp	r1, r3
 800c21e:	d002      	beq.n	800c226 <cleanup_stdio+0x1e>
 800c220:	4620      	mov	r0, r4
 800c222:	f002 fc49 	bl	800eab8 <_fflush_r>
 800c226:	68e1      	ldr	r1, [r4, #12]
 800c228:	4b06      	ldr	r3, [pc, #24]	@ (800c244 <cleanup_stdio+0x3c>)
 800c22a:	4299      	cmp	r1, r3
 800c22c:	d004      	beq.n	800c238 <cleanup_stdio+0x30>
 800c22e:	4620      	mov	r0, r4
 800c230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c234:	f002 bc40 	b.w	800eab8 <_fflush_r>
 800c238:	bd10      	pop	{r4, pc}
 800c23a:	bf00      	nop
 800c23c:	20000690 	.word	0x20000690
 800c240:	200006f8 	.word	0x200006f8
 800c244:	20000760 	.word	0x20000760

0800c248 <global_stdio_init.part.0>:
 800c248:	b510      	push	{r4, lr}
 800c24a:	4b0b      	ldr	r3, [pc, #44]	@ (800c278 <global_stdio_init.part.0+0x30>)
 800c24c:	4c0b      	ldr	r4, [pc, #44]	@ (800c27c <global_stdio_init.part.0+0x34>)
 800c24e:	4a0c      	ldr	r2, [pc, #48]	@ (800c280 <global_stdio_init.part.0+0x38>)
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	4620      	mov	r0, r4
 800c254:	2200      	movs	r2, #0
 800c256:	2104      	movs	r1, #4
 800c258:	f7ff ff94 	bl	800c184 <std>
 800c25c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c260:	2201      	movs	r2, #1
 800c262:	2109      	movs	r1, #9
 800c264:	f7ff ff8e 	bl	800c184 <std>
 800c268:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c26c:	2202      	movs	r2, #2
 800c26e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c272:	2112      	movs	r1, #18
 800c274:	f7ff bf86 	b.w	800c184 <std>
 800c278:	200007c8 	.word	0x200007c8
 800c27c:	20000690 	.word	0x20000690
 800c280:	0800c1f1 	.word	0x0800c1f1

0800c284 <__sfp_lock_acquire>:
 800c284:	4801      	ldr	r0, [pc, #4]	@ (800c28c <__sfp_lock_acquire+0x8>)
 800c286:	f000 bf42 	b.w	800d10e <__retarget_lock_acquire_recursive>
 800c28a:	bf00      	nop
 800c28c:	200007cd 	.word	0x200007cd

0800c290 <__sfp_lock_release>:
 800c290:	4801      	ldr	r0, [pc, #4]	@ (800c298 <__sfp_lock_release+0x8>)
 800c292:	f000 bf3d 	b.w	800d110 <__retarget_lock_release_recursive>
 800c296:	bf00      	nop
 800c298:	200007cd 	.word	0x200007cd

0800c29c <__sinit>:
 800c29c:	b510      	push	{r4, lr}
 800c29e:	4604      	mov	r4, r0
 800c2a0:	f7ff fff0 	bl	800c284 <__sfp_lock_acquire>
 800c2a4:	6a23      	ldr	r3, [r4, #32]
 800c2a6:	b11b      	cbz	r3, 800c2b0 <__sinit+0x14>
 800c2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2ac:	f7ff bff0 	b.w	800c290 <__sfp_lock_release>
 800c2b0:	4b04      	ldr	r3, [pc, #16]	@ (800c2c4 <__sinit+0x28>)
 800c2b2:	6223      	str	r3, [r4, #32]
 800c2b4:	4b04      	ldr	r3, [pc, #16]	@ (800c2c8 <__sinit+0x2c>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1f5      	bne.n	800c2a8 <__sinit+0xc>
 800c2bc:	f7ff ffc4 	bl	800c248 <global_stdio_init.part.0>
 800c2c0:	e7f2      	b.n	800c2a8 <__sinit+0xc>
 800c2c2:	bf00      	nop
 800c2c4:	0800c209 	.word	0x0800c209
 800c2c8:	200007c8 	.word	0x200007c8

0800c2cc <sulp>:
 800c2cc:	b570      	push	{r4, r5, r6, lr}
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	4616      	mov	r6, r2
 800c2d4:	ec45 4b10 	vmov	d0, r4, r5
 800c2d8:	f002 ff8a 	bl	800f1f0 <__ulp>
 800c2dc:	b17e      	cbz	r6, 800c2fe <sulp+0x32>
 800c2de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c2e2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	dd09      	ble.n	800c2fe <sulp+0x32>
 800c2ea:	051b      	lsls	r3, r3, #20
 800c2ec:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800c2f6:	ec41 0b17 	vmov	d7, r0, r1
 800c2fa:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}

0800c300 <_strtod_l>:
 800c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c304:	ed2d 8b0a 	vpush	{d8-d12}
 800c308:	b097      	sub	sp, #92	@ 0x5c
 800c30a:	4688      	mov	r8, r1
 800c30c:	920e      	str	r2, [sp, #56]	@ 0x38
 800c30e:	2200      	movs	r2, #0
 800c310:	9212      	str	r2, [sp, #72]	@ 0x48
 800c312:	9005      	str	r0, [sp, #20]
 800c314:	f04f 0a00 	mov.w	sl, #0
 800c318:	f04f 0b00 	mov.w	fp, #0
 800c31c:	460a      	mov	r2, r1
 800c31e:	9211      	str	r2, [sp, #68]	@ 0x44
 800c320:	7811      	ldrb	r1, [r2, #0]
 800c322:	292b      	cmp	r1, #43	@ 0x2b
 800c324:	d04c      	beq.n	800c3c0 <_strtod_l+0xc0>
 800c326:	d839      	bhi.n	800c39c <_strtod_l+0x9c>
 800c328:	290d      	cmp	r1, #13
 800c32a:	d833      	bhi.n	800c394 <_strtod_l+0x94>
 800c32c:	2908      	cmp	r1, #8
 800c32e:	d833      	bhi.n	800c398 <_strtod_l+0x98>
 800c330:	2900      	cmp	r1, #0
 800c332:	d03c      	beq.n	800c3ae <_strtod_l+0xae>
 800c334:	2200      	movs	r2, #0
 800c336:	9208      	str	r2, [sp, #32]
 800c338:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800c33a:	782a      	ldrb	r2, [r5, #0]
 800c33c:	2a30      	cmp	r2, #48	@ 0x30
 800c33e:	f040 80b5 	bne.w	800c4ac <_strtod_l+0x1ac>
 800c342:	786a      	ldrb	r2, [r5, #1]
 800c344:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c348:	2a58      	cmp	r2, #88	@ 0x58
 800c34a:	d170      	bne.n	800c42e <_strtod_l+0x12e>
 800c34c:	9302      	str	r3, [sp, #8]
 800c34e:	9b08      	ldr	r3, [sp, #32]
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	ab12      	add	r3, sp, #72	@ 0x48
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	4a8b      	ldr	r2, [pc, #556]	@ (800c584 <_strtod_l+0x284>)
 800c358:	9805      	ldr	r0, [sp, #20]
 800c35a:	ab13      	add	r3, sp, #76	@ 0x4c
 800c35c:	a911      	add	r1, sp, #68	@ 0x44
 800c35e:	f001 fdab 	bl	800deb8 <__gethex>
 800c362:	f010 060f 	ands.w	r6, r0, #15
 800c366:	4604      	mov	r4, r0
 800c368:	d005      	beq.n	800c376 <_strtod_l+0x76>
 800c36a:	2e06      	cmp	r6, #6
 800c36c:	d12a      	bne.n	800c3c4 <_strtod_l+0xc4>
 800c36e:	3501      	adds	r5, #1
 800c370:	2300      	movs	r3, #0
 800c372:	9511      	str	r5, [sp, #68]	@ 0x44
 800c374:	9308      	str	r3, [sp, #32]
 800c376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f040 852f 	bne.w	800cddc <_strtod_l+0xadc>
 800c37e:	9b08      	ldr	r3, [sp, #32]
 800c380:	ec4b ab10 	vmov	d0, sl, fp
 800c384:	b1cb      	cbz	r3, 800c3ba <_strtod_l+0xba>
 800c386:	eeb1 0b40 	vneg.f64	d0, d0
 800c38a:	b017      	add	sp, #92	@ 0x5c
 800c38c:	ecbd 8b0a 	vpop	{d8-d12}
 800c390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	2920      	cmp	r1, #32
 800c396:	d1cd      	bne.n	800c334 <_strtod_l+0x34>
 800c398:	3201      	adds	r2, #1
 800c39a:	e7c0      	b.n	800c31e <_strtod_l+0x1e>
 800c39c:	292d      	cmp	r1, #45	@ 0x2d
 800c39e:	d1c9      	bne.n	800c334 <_strtod_l+0x34>
 800c3a0:	2101      	movs	r1, #1
 800c3a2:	9108      	str	r1, [sp, #32]
 800c3a4:	1c51      	adds	r1, r2, #1
 800c3a6:	9111      	str	r1, [sp, #68]	@ 0x44
 800c3a8:	7852      	ldrb	r2, [r2, #1]
 800c3aa:	2a00      	cmp	r2, #0
 800c3ac:	d1c4      	bne.n	800c338 <_strtod_l+0x38>
 800c3ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3b0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f040 850f 	bne.w	800cdd8 <_strtod_l+0xad8>
 800c3ba:	ec4b ab10 	vmov	d0, sl, fp
 800c3be:	e7e4      	b.n	800c38a <_strtod_l+0x8a>
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	e7ee      	b.n	800c3a2 <_strtod_l+0xa2>
 800c3c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c3c6:	b13a      	cbz	r2, 800c3d8 <_strtod_l+0xd8>
 800c3c8:	2135      	movs	r1, #53	@ 0x35
 800c3ca:	a814      	add	r0, sp, #80	@ 0x50
 800c3cc:	f003 f807 	bl	800f3de <__copybits>
 800c3d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c3d2:	9805      	ldr	r0, [sp, #20]
 800c3d4:	f002 fbd8 	bl	800eb88 <_Bfree>
 800c3d8:	1e73      	subs	r3, r6, #1
 800c3da:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c3dc:	2b04      	cmp	r3, #4
 800c3de:	d806      	bhi.n	800c3ee <_strtod_l+0xee>
 800c3e0:	e8df f003 	tbb	[pc, r3]
 800c3e4:	201d0314 	.word	0x201d0314
 800c3e8:	14          	.byte	0x14
 800c3e9:	00          	.byte	0x00
 800c3ea:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800c3ee:	05e3      	lsls	r3, r4, #23
 800c3f0:	bf48      	it	mi
 800c3f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c3f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c3fa:	0d1b      	lsrs	r3, r3, #20
 800c3fc:	051b      	lsls	r3, r3, #20
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1b9      	bne.n	800c376 <_strtod_l+0x76>
 800c402:	f000 fe59 	bl	800d0b8 <__errno>
 800c406:	2322      	movs	r3, #34	@ 0x22
 800c408:	6003      	str	r3, [r0, #0]
 800c40a:	e7b4      	b.n	800c376 <_strtod_l+0x76>
 800c40c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800c410:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c414:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c418:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c41c:	e7e7      	b.n	800c3ee <_strtod_l+0xee>
 800c41e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800c58c <_strtod_l+0x28c>
 800c422:	e7e4      	b.n	800c3ee <_strtod_l+0xee>
 800c424:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c428:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c42c:	e7df      	b.n	800c3ee <_strtod_l+0xee>
 800c42e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	9211      	str	r2, [sp, #68]	@ 0x44
 800c434:	785b      	ldrb	r3, [r3, #1]
 800c436:	2b30      	cmp	r3, #48	@ 0x30
 800c438:	d0f9      	beq.n	800c42e <_strtod_l+0x12e>
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d09b      	beq.n	800c376 <_strtod_l+0x76>
 800c43e:	2301      	movs	r3, #1
 800c440:	2600      	movs	r6, #0
 800c442:	9307      	str	r3, [sp, #28]
 800c444:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c446:	930a      	str	r3, [sp, #40]	@ 0x28
 800c448:	46b1      	mov	r9, r6
 800c44a:	4635      	mov	r5, r6
 800c44c:	220a      	movs	r2, #10
 800c44e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800c450:	7804      	ldrb	r4, [r0, #0]
 800c452:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800c456:	b2d9      	uxtb	r1, r3
 800c458:	2909      	cmp	r1, #9
 800c45a:	d929      	bls.n	800c4b0 <_strtod_l+0x1b0>
 800c45c:	494a      	ldr	r1, [pc, #296]	@ (800c588 <_strtod_l+0x288>)
 800c45e:	2201      	movs	r2, #1
 800c460:	f000 fdfc 	bl	800d05c <strncmp>
 800c464:	b378      	cbz	r0, 800c4c6 <_strtod_l+0x1c6>
 800c466:	2000      	movs	r0, #0
 800c468:	4622      	mov	r2, r4
 800c46a:	462b      	mov	r3, r5
 800c46c:	4607      	mov	r7, r0
 800c46e:	9006      	str	r0, [sp, #24]
 800c470:	2a65      	cmp	r2, #101	@ 0x65
 800c472:	d001      	beq.n	800c478 <_strtod_l+0x178>
 800c474:	2a45      	cmp	r2, #69	@ 0x45
 800c476:	d117      	bne.n	800c4a8 <_strtod_l+0x1a8>
 800c478:	b91b      	cbnz	r3, 800c482 <_strtod_l+0x182>
 800c47a:	9b07      	ldr	r3, [sp, #28]
 800c47c:	4303      	orrs	r3, r0
 800c47e:	d096      	beq.n	800c3ae <_strtod_l+0xae>
 800c480:	2300      	movs	r3, #0
 800c482:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800c486:	f108 0201 	add.w	r2, r8, #1
 800c48a:	9211      	str	r2, [sp, #68]	@ 0x44
 800c48c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c490:	2a2b      	cmp	r2, #43	@ 0x2b
 800c492:	d06b      	beq.n	800c56c <_strtod_l+0x26c>
 800c494:	2a2d      	cmp	r2, #45	@ 0x2d
 800c496:	d071      	beq.n	800c57c <_strtod_l+0x27c>
 800c498:	f04f 0e00 	mov.w	lr, #0
 800c49c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c4a0:	2c09      	cmp	r4, #9
 800c4a2:	d979      	bls.n	800c598 <_strtod_l+0x298>
 800c4a4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c4a8:	2400      	movs	r4, #0
 800c4aa:	e094      	b.n	800c5d6 <_strtod_l+0x2d6>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	e7c7      	b.n	800c440 <_strtod_l+0x140>
 800c4b0:	2d08      	cmp	r5, #8
 800c4b2:	f100 0001 	add.w	r0, r0, #1
 800c4b6:	bfd4      	ite	le
 800c4b8:	fb02 3909 	mlale	r9, r2, r9, r3
 800c4bc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800c4c0:	3501      	adds	r5, #1
 800c4c2:	9011      	str	r0, [sp, #68]	@ 0x44
 800c4c4:	e7c3      	b.n	800c44e <_strtod_l+0x14e>
 800c4c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4c8:	1c5a      	adds	r2, r3, #1
 800c4ca:	9211      	str	r2, [sp, #68]	@ 0x44
 800c4cc:	785a      	ldrb	r2, [r3, #1]
 800c4ce:	b375      	cbz	r5, 800c52e <_strtod_l+0x22e>
 800c4d0:	4607      	mov	r7, r0
 800c4d2:	462b      	mov	r3, r5
 800c4d4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c4d8:	2909      	cmp	r1, #9
 800c4da:	d913      	bls.n	800c504 <_strtod_l+0x204>
 800c4dc:	2101      	movs	r1, #1
 800c4de:	9106      	str	r1, [sp, #24]
 800c4e0:	e7c6      	b.n	800c470 <_strtod_l+0x170>
 800c4e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4e4:	1c5a      	adds	r2, r3, #1
 800c4e6:	9211      	str	r2, [sp, #68]	@ 0x44
 800c4e8:	785a      	ldrb	r2, [r3, #1]
 800c4ea:	3001      	adds	r0, #1
 800c4ec:	2a30      	cmp	r2, #48	@ 0x30
 800c4ee:	d0f8      	beq.n	800c4e2 <_strtod_l+0x1e2>
 800c4f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c4f4:	2b08      	cmp	r3, #8
 800c4f6:	f200 8476 	bhi.w	800cde6 <_strtod_l+0xae6>
 800c4fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4fe:	4607      	mov	r7, r0
 800c500:	2000      	movs	r0, #0
 800c502:	4603      	mov	r3, r0
 800c504:	3a30      	subs	r2, #48	@ 0x30
 800c506:	f100 0101 	add.w	r1, r0, #1
 800c50a:	d023      	beq.n	800c554 <_strtod_l+0x254>
 800c50c:	440f      	add	r7, r1
 800c50e:	eb00 0c03 	add.w	ip, r0, r3
 800c512:	4619      	mov	r1, r3
 800c514:	240a      	movs	r4, #10
 800c516:	4561      	cmp	r1, ip
 800c518:	d10b      	bne.n	800c532 <_strtod_l+0x232>
 800c51a:	1c5c      	adds	r4, r3, #1
 800c51c:	4403      	add	r3, r0
 800c51e:	2b08      	cmp	r3, #8
 800c520:	4404      	add	r4, r0
 800c522:	dc11      	bgt.n	800c548 <_strtod_l+0x248>
 800c524:	230a      	movs	r3, #10
 800c526:	fb03 2909 	mla	r9, r3, r9, r2
 800c52a:	2100      	movs	r1, #0
 800c52c:	e013      	b.n	800c556 <_strtod_l+0x256>
 800c52e:	4628      	mov	r0, r5
 800c530:	e7dc      	b.n	800c4ec <_strtod_l+0x1ec>
 800c532:	2908      	cmp	r1, #8
 800c534:	f101 0101 	add.w	r1, r1, #1
 800c538:	dc02      	bgt.n	800c540 <_strtod_l+0x240>
 800c53a:	fb04 f909 	mul.w	r9, r4, r9
 800c53e:	e7ea      	b.n	800c516 <_strtod_l+0x216>
 800c540:	2910      	cmp	r1, #16
 800c542:	bfd8      	it	le
 800c544:	4366      	mulle	r6, r4
 800c546:	e7e6      	b.n	800c516 <_strtod_l+0x216>
 800c548:	2b0f      	cmp	r3, #15
 800c54a:	dcee      	bgt.n	800c52a <_strtod_l+0x22a>
 800c54c:	230a      	movs	r3, #10
 800c54e:	fb03 2606 	mla	r6, r3, r6, r2
 800c552:	e7ea      	b.n	800c52a <_strtod_l+0x22a>
 800c554:	461c      	mov	r4, r3
 800c556:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c558:	1c5a      	adds	r2, r3, #1
 800c55a:	9211      	str	r2, [sp, #68]	@ 0x44
 800c55c:	785a      	ldrb	r2, [r3, #1]
 800c55e:	4608      	mov	r0, r1
 800c560:	4623      	mov	r3, r4
 800c562:	e7b7      	b.n	800c4d4 <_strtod_l+0x1d4>
 800c564:	2301      	movs	r3, #1
 800c566:	2700      	movs	r7, #0
 800c568:	9306      	str	r3, [sp, #24]
 800c56a:	e786      	b.n	800c47a <_strtod_l+0x17a>
 800c56c:	f04f 0e00 	mov.w	lr, #0
 800c570:	f108 0202 	add.w	r2, r8, #2
 800c574:	9211      	str	r2, [sp, #68]	@ 0x44
 800c576:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c57a:	e78f      	b.n	800c49c <_strtod_l+0x19c>
 800c57c:	f04f 0e01 	mov.w	lr, #1
 800c580:	e7f6      	b.n	800c570 <_strtod_l+0x270>
 800c582:	bf00      	nop
 800c584:	08010804 	.word	0x08010804
 800c588:	080107ec 	.word	0x080107ec
 800c58c:	7ff00000 	.word	0x7ff00000
 800c590:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c592:	1c54      	adds	r4, r2, #1
 800c594:	9411      	str	r4, [sp, #68]	@ 0x44
 800c596:	7852      	ldrb	r2, [r2, #1]
 800c598:	2a30      	cmp	r2, #48	@ 0x30
 800c59a:	d0f9      	beq.n	800c590 <_strtod_l+0x290>
 800c59c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800c5a0:	2c08      	cmp	r4, #8
 800c5a2:	d881      	bhi.n	800c4a8 <_strtod_l+0x1a8>
 800c5a4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800c5a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c5aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c5ae:	1c51      	adds	r1, r2, #1
 800c5b0:	9111      	str	r1, [sp, #68]	@ 0x44
 800c5b2:	7852      	ldrb	r2, [r2, #1]
 800c5b4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c5b8:	2c09      	cmp	r4, #9
 800c5ba:	d938      	bls.n	800c62e <_strtod_l+0x32e>
 800c5bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800c5be:	1b0c      	subs	r4, r1, r4
 800c5c0:	2c08      	cmp	r4, #8
 800c5c2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800c5c6:	dc02      	bgt.n	800c5ce <_strtod_l+0x2ce>
 800c5c8:	4564      	cmp	r4, ip
 800c5ca:	bfa8      	it	ge
 800c5cc:	4664      	movge	r4, ip
 800c5ce:	f1be 0f00 	cmp.w	lr, #0
 800c5d2:	d000      	beq.n	800c5d6 <_strtod_l+0x2d6>
 800c5d4:	4264      	negs	r4, r4
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d14e      	bne.n	800c678 <_strtod_l+0x378>
 800c5da:	9b07      	ldr	r3, [sp, #28]
 800c5dc:	4318      	orrs	r0, r3
 800c5de:	f47f aeca 	bne.w	800c376 <_strtod_l+0x76>
 800c5e2:	9b06      	ldr	r3, [sp, #24]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f47f aee2 	bne.w	800c3ae <_strtod_l+0xae>
 800c5ea:	2a69      	cmp	r2, #105	@ 0x69
 800c5ec:	d027      	beq.n	800c63e <_strtod_l+0x33e>
 800c5ee:	dc24      	bgt.n	800c63a <_strtod_l+0x33a>
 800c5f0:	2a49      	cmp	r2, #73	@ 0x49
 800c5f2:	d024      	beq.n	800c63e <_strtod_l+0x33e>
 800c5f4:	2a4e      	cmp	r2, #78	@ 0x4e
 800c5f6:	f47f aeda 	bne.w	800c3ae <_strtod_l+0xae>
 800c5fa:	4997      	ldr	r1, [pc, #604]	@ (800c858 <_strtod_l+0x558>)
 800c5fc:	a811      	add	r0, sp, #68	@ 0x44
 800c5fe:	f001 fe7d 	bl	800e2fc <__match>
 800c602:	2800      	cmp	r0, #0
 800c604:	f43f aed3 	beq.w	800c3ae <_strtod_l+0xae>
 800c608:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	2b28      	cmp	r3, #40	@ 0x28
 800c60e:	d12d      	bne.n	800c66c <_strtod_l+0x36c>
 800c610:	4992      	ldr	r1, [pc, #584]	@ (800c85c <_strtod_l+0x55c>)
 800c612:	aa14      	add	r2, sp, #80	@ 0x50
 800c614:	a811      	add	r0, sp, #68	@ 0x44
 800c616:	f001 fe85 	bl	800e324 <__hexnan>
 800c61a:	2805      	cmp	r0, #5
 800c61c:	d126      	bne.n	800c66c <_strtod_l+0x36c>
 800c61e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c620:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800c624:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c628:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c62c:	e6a3      	b.n	800c376 <_strtod_l+0x76>
 800c62e:	240a      	movs	r4, #10
 800c630:	fb04 2c0c 	mla	ip, r4, ip, r2
 800c634:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800c638:	e7b8      	b.n	800c5ac <_strtod_l+0x2ac>
 800c63a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c63c:	e7db      	b.n	800c5f6 <_strtod_l+0x2f6>
 800c63e:	4988      	ldr	r1, [pc, #544]	@ (800c860 <_strtod_l+0x560>)
 800c640:	a811      	add	r0, sp, #68	@ 0x44
 800c642:	f001 fe5b 	bl	800e2fc <__match>
 800c646:	2800      	cmp	r0, #0
 800c648:	f43f aeb1 	beq.w	800c3ae <_strtod_l+0xae>
 800c64c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c64e:	4985      	ldr	r1, [pc, #532]	@ (800c864 <_strtod_l+0x564>)
 800c650:	3b01      	subs	r3, #1
 800c652:	a811      	add	r0, sp, #68	@ 0x44
 800c654:	9311      	str	r3, [sp, #68]	@ 0x44
 800c656:	f001 fe51 	bl	800e2fc <__match>
 800c65a:	b910      	cbnz	r0, 800c662 <_strtod_l+0x362>
 800c65c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c65e:	3301      	adds	r3, #1
 800c660:	9311      	str	r3, [sp, #68]	@ 0x44
 800c662:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800c878 <_strtod_l+0x578>
 800c666:	f04f 0a00 	mov.w	sl, #0
 800c66a:	e684      	b.n	800c376 <_strtod_l+0x76>
 800c66c:	487e      	ldr	r0, [pc, #504]	@ (800c868 <_strtod_l+0x568>)
 800c66e:	f000 fd67 	bl	800d140 <nan>
 800c672:	ec5b ab10 	vmov	sl, fp, d0
 800c676:	e67e      	b.n	800c376 <_strtod_l+0x76>
 800c678:	ee07 9a90 	vmov	s15, r9
 800c67c:	1be2      	subs	r2, r4, r7
 800c67e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c682:	2d00      	cmp	r5, #0
 800c684:	bf08      	it	eq
 800c686:	461d      	moveq	r5, r3
 800c688:	2b10      	cmp	r3, #16
 800c68a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c68c:	461a      	mov	r2, r3
 800c68e:	bfa8      	it	ge
 800c690:	2210      	movge	r2, #16
 800c692:	2b09      	cmp	r3, #9
 800c694:	ec5b ab17 	vmov	sl, fp, d7
 800c698:	dc15      	bgt.n	800c6c6 <_strtod_l+0x3c6>
 800c69a:	1be1      	subs	r1, r4, r7
 800c69c:	2900      	cmp	r1, #0
 800c69e:	f43f ae6a 	beq.w	800c376 <_strtod_l+0x76>
 800c6a2:	eba4 0107 	sub.w	r1, r4, r7
 800c6a6:	dd72      	ble.n	800c78e <_strtod_l+0x48e>
 800c6a8:	2916      	cmp	r1, #22
 800c6aa:	dc59      	bgt.n	800c760 <_strtod_l+0x460>
 800c6ac:	4b6f      	ldr	r3, [pc, #444]	@ (800c86c <_strtod_l+0x56c>)
 800c6ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6b4:	ed93 7b00 	vldr	d7, [r3]
 800c6b8:	ec4b ab16 	vmov	d6, sl, fp
 800c6bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c6c0:	ec5b ab17 	vmov	sl, fp, d7
 800c6c4:	e657      	b.n	800c376 <_strtod_l+0x76>
 800c6c6:	4969      	ldr	r1, [pc, #420]	@ (800c86c <_strtod_l+0x56c>)
 800c6c8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c6cc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c6d0:	ee06 6a90 	vmov	s13, r6
 800c6d4:	2b0f      	cmp	r3, #15
 800c6d6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c6da:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c6de:	ec5b ab16 	vmov	sl, fp, d6
 800c6e2:	ddda      	ble.n	800c69a <_strtod_l+0x39a>
 800c6e4:	1a9a      	subs	r2, r3, r2
 800c6e6:	1be1      	subs	r1, r4, r7
 800c6e8:	440a      	add	r2, r1
 800c6ea:	2a00      	cmp	r2, #0
 800c6ec:	f340 8094 	ble.w	800c818 <_strtod_l+0x518>
 800c6f0:	f012 000f 	ands.w	r0, r2, #15
 800c6f4:	d00a      	beq.n	800c70c <_strtod_l+0x40c>
 800c6f6:	495d      	ldr	r1, [pc, #372]	@ (800c86c <_strtod_l+0x56c>)
 800c6f8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c6fc:	ed91 7b00 	vldr	d7, [r1]
 800c700:	ec4b ab16 	vmov	d6, sl, fp
 800c704:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c708:	ec5b ab17 	vmov	sl, fp, d7
 800c70c:	f032 020f 	bics.w	r2, r2, #15
 800c710:	d073      	beq.n	800c7fa <_strtod_l+0x4fa>
 800c712:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800c716:	dd47      	ble.n	800c7a8 <_strtod_l+0x4a8>
 800c718:	2400      	movs	r4, #0
 800c71a:	4625      	mov	r5, r4
 800c71c:	9407      	str	r4, [sp, #28]
 800c71e:	4626      	mov	r6, r4
 800c720:	9a05      	ldr	r2, [sp, #20]
 800c722:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c878 <_strtod_l+0x578>
 800c726:	2322      	movs	r3, #34	@ 0x22
 800c728:	6013      	str	r3, [r2, #0]
 800c72a:	f04f 0a00 	mov.w	sl, #0
 800c72e:	9b07      	ldr	r3, [sp, #28]
 800c730:	2b00      	cmp	r3, #0
 800c732:	f43f ae20 	beq.w	800c376 <_strtod_l+0x76>
 800c736:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c738:	9805      	ldr	r0, [sp, #20]
 800c73a:	f002 fa25 	bl	800eb88 <_Bfree>
 800c73e:	9805      	ldr	r0, [sp, #20]
 800c740:	4631      	mov	r1, r6
 800c742:	f002 fa21 	bl	800eb88 <_Bfree>
 800c746:	9805      	ldr	r0, [sp, #20]
 800c748:	4629      	mov	r1, r5
 800c74a:	f002 fa1d 	bl	800eb88 <_Bfree>
 800c74e:	9907      	ldr	r1, [sp, #28]
 800c750:	9805      	ldr	r0, [sp, #20]
 800c752:	f002 fa19 	bl	800eb88 <_Bfree>
 800c756:	9805      	ldr	r0, [sp, #20]
 800c758:	4621      	mov	r1, r4
 800c75a:	f002 fa15 	bl	800eb88 <_Bfree>
 800c75e:	e60a      	b.n	800c376 <_strtod_l+0x76>
 800c760:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800c764:	1be0      	subs	r0, r4, r7
 800c766:	4281      	cmp	r1, r0
 800c768:	dbbc      	blt.n	800c6e4 <_strtod_l+0x3e4>
 800c76a:	4a40      	ldr	r2, [pc, #256]	@ (800c86c <_strtod_l+0x56c>)
 800c76c:	f1c3 030f 	rsb	r3, r3, #15
 800c770:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c774:	ed91 7b00 	vldr	d7, [r1]
 800c778:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c77a:	ec4b ab16 	vmov	d6, sl, fp
 800c77e:	1acb      	subs	r3, r1, r3
 800c780:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c784:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c788:	ed92 6b00 	vldr	d6, [r2]
 800c78c:	e796      	b.n	800c6bc <_strtod_l+0x3bc>
 800c78e:	3116      	adds	r1, #22
 800c790:	dba8      	blt.n	800c6e4 <_strtod_l+0x3e4>
 800c792:	4b36      	ldr	r3, [pc, #216]	@ (800c86c <_strtod_l+0x56c>)
 800c794:	1b3c      	subs	r4, r7, r4
 800c796:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c79a:	ed94 7b00 	vldr	d7, [r4]
 800c79e:	ec4b ab16 	vmov	d6, sl, fp
 800c7a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c7a6:	e78b      	b.n	800c6c0 <_strtod_l+0x3c0>
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	ec4b ab17 	vmov	d7, sl, fp
 800c7ae:	4e30      	ldr	r6, [pc, #192]	@ (800c870 <_strtod_l+0x570>)
 800c7b0:	1112      	asrs	r2, r2, #4
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	2a01      	cmp	r2, #1
 800c7b6:	dc23      	bgt.n	800c800 <_strtod_l+0x500>
 800c7b8:	b108      	cbz	r0, 800c7be <_strtod_l+0x4be>
 800c7ba:	ec5b ab17 	vmov	sl, fp, d7
 800c7be:	4a2c      	ldr	r2, [pc, #176]	@ (800c870 <_strtod_l+0x570>)
 800c7c0:	482c      	ldr	r0, [pc, #176]	@ (800c874 <_strtod_l+0x574>)
 800c7c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c7c6:	ed92 7b00 	vldr	d7, [r2]
 800c7ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c7ce:	ec4b ab16 	vmov	d6, sl, fp
 800c7d2:	4a29      	ldr	r2, [pc, #164]	@ (800c878 <_strtod_l+0x578>)
 800c7d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c7d8:	ee17 1a90 	vmov	r1, s15
 800c7dc:	400a      	ands	r2, r1
 800c7de:	4282      	cmp	r2, r0
 800c7e0:	ec5b ab17 	vmov	sl, fp, d7
 800c7e4:	d898      	bhi.n	800c718 <_strtod_l+0x418>
 800c7e6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800c7ea:	4282      	cmp	r2, r0
 800c7ec:	bf86      	itte	hi
 800c7ee:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c87c <_strtod_l+0x57c>
 800c7f2:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800c7f6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	9206      	str	r2, [sp, #24]
 800c7fe:	e076      	b.n	800c8ee <_strtod_l+0x5ee>
 800c800:	f012 0f01 	tst.w	r2, #1
 800c804:	d004      	beq.n	800c810 <_strtod_l+0x510>
 800c806:	ed96 6b00 	vldr	d6, [r6]
 800c80a:	2001      	movs	r0, #1
 800c80c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c810:	3101      	adds	r1, #1
 800c812:	1052      	asrs	r2, r2, #1
 800c814:	3608      	adds	r6, #8
 800c816:	e7cd      	b.n	800c7b4 <_strtod_l+0x4b4>
 800c818:	d0ef      	beq.n	800c7fa <_strtod_l+0x4fa>
 800c81a:	4252      	negs	r2, r2
 800c81c:	f012 000f 	ands.w	r0, r2, #15
 800c820:	d00a      	beq.n	800c838 <_strtod_l+0x538>
 800c822:	4912      	ldr	r1, [pc, #72]	@ (800c86c <_strtod_l+0x56c>)
 800c824:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c828:	ed91 7b00 	vldr	d7, [r1]
 800c82c:	ec4b ab16 	vmov	d6, sl, fp
 800c830:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c834:	ec5b ab17 	vmov	sl, fp, d7
 800c838:	1112      	asrs	r2, r2, #4
 800c83a:	d0de      	beq.n	800c7fa <_strtod_l+0x4fa>
 800c83c:	2a1f      	cmp	r2, #31
 800c83e:	dd1f      	ble.n	800c880 <_strtod_l+0x580>
 800c840:	2400      	movs	r4, #0
 800c842:	4625      	mov	r5, r4
 800c844:	9407      	str	r4, [sp, #28]
 800c846:	4626      	mov	r6, r4
 800c848:	9a05      	ldr	r2, [sp, #20]
 800c84a:	2322      	movs	r3, #34	@ 0x22
 800c84c:	f04f 0a00 	mov.w	sl, #0
 800c850:	f04f 0b00 	mov.w	fp, #0
 800c854:	6013      	str	r3, [r2, #0]
 800c856:	e76a      	b.n	800c72e <_strtod_l+0x42e>
 800c858:	08010751 	.word	0x08010751
 800c85c:	080107f0 	.word	0x080107f0
 800c860:	08010749 	.word	0x08010749
 800c864:	08010988 	.word	0x08010988
 800c868:	08010984 	.word	0x08010984
 800c86c:	08010b00 	.word	0x08010b00
 800c870:	08010ad8 	.word	0x08010ad8
 800c874:	7ca00000 	.word	0x7ca00000
 800c878:	7ff00000 	.word	0x7ff00000
 800c87c:	7fefffff 	.word	0x7fefffff
 800c880:	f012 0110 	ands.w	r1, r2, #16
 800c884:	bf18      	it	ne
 800c886:	216a      	movne	r1, #106	@ 0x6a
 800c888:	9106      	str	r1, [sp, #24]
 800c88a:	ec4b ab17 	vmov	d7, sl, fp
 800c88e:	49b0      	ldr	r1, [pc, #704]	@ (800cb50 <_strtod_l+0x850>)
 800c890:	2000      	movs	r0, #0
 800c892:	07d6      	lsls	r6, r2, #31
 800c894:	d504      	bpl.n	800c8a0 <_strtod_l+0x5a0>
 800c896:	ed91 6b00 	vldr	d6, [r1]
 800c89a:	2001      	movs	r0, #1
 800c89c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c8a0:	1052      	asrs	r2, r2, #1
 800c8a2:	f101 0108 	add.w	r1, r1, #8
 800c8a6:	d1f4      	bne.n	800c892 <_strtod_l+0x592>
 800c8a8:	b108      	cbz	r0, 800c8ae <_strtod_l+0x5ae>
 800c8aa:	ec5b ab17 	vmov	sl, fp, d7
 800c8ae:	9a06      	ldr	r2, [sp, #24]
 800c8b0:	b1b2      	cbz	r2, 800c8e0 <_strtod_l+0x5e0>
 800c8b2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800c8b6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800c8ba:	2a00      	cmp	r2, #0
 800c8bc:	4658      	mov	r0, fp
 800c8be:	dd0f      	ble.n	800c8e0 <_strtod_l+0x5e0>
 800c8c0:	2a1f      	cmp	r2, #31
 800c8c2:	dd55      	ble.n	800c970 <_strtod_l+0x670>
 800c8c4:	2a34      	cmp	r2, #52	@ 0x34
 800c8c6:	bfde      	ittt	le
 800c8c8:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 800c8cc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800c8d0:	408a      	lslle	r2, r1
 800c8d2:	f04f 0a00 	mov.w	sl, #0
 800c8d6:	bfcc      	ite	gt
 800c8d8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c8dc:	ea02 0b00 	andle.w	fp, r2, r0
 800c8e0:	ec4b ab17 	vmov	d7, sl, fp
 800c8e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ec:	d0a8      	beq.n	800c840 <_strtod_l+0x540>
 800c8ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c8f0:	9805      	ldr	r0, [sp, #20]
 800c8f2:	f8cd 9000 	str.w	r9, [sp]
 800c8f6:	462a      	mov	r2, r5
 800c8f8:	f002 f9ae 	bl	800ec58 <__s2b>
 800c8fc:	9007      	str	r0, [sp, #28]
 800c8fe:	2800      	cmp	r0, #0
 800c900:	f43f af0a 	beq.w	800c718 <_strtod_l+0x418>
 800c904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c906:	1b3f      	subs	r7, r7, r4
 800c908:	2b00      	cmp	r3, #0
 800c90a:	bfb4      	ite	lt
 800c90c:	463b      	movlt	r3, r7
 800c90e:	2300      	movge	r3, #0
 800c910:	930a      	str	r3, [sp, #40]	@ 0x28
 800c912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c914:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800cb40 <_strtod_l+0x840>
 800c918:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c91c:	2400      	movs	r4, #0
 800c91e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c920:	4625      	mov	r5, r4
 800c922:	9b07      	ldr	r3, [sp, #28]
 800c924:	9805      	ldr	r0, [sp, #20]
 800c926:	6859      	ldr	r1, [r3, #4]
 800c928:	f002 f8ee 	bl	800eb08 <_Balloc>
 800c92c:	4606      	mov	r6, r0
 800c92e:	2800      	cmp	r0, #0
 800c930:	f43f aef6 	beq.w	800c720 <_strtod_l+0x420>
 800c934:	9b07      	ldr	r3, [sp, #28]
 800c936:	691a      	ldr	r2, [r3, #16]
 800c938:	ec4b ab19 	vmov	d9, sl, fp
 800c93c:	3202      	adds	r2, #2
 800c93e:	f103 010c 	add.w	r1, r3, #12
 800c942:	0092      	lsls	r2, r2, #2
 800c944:	300c      	adds	r0, #12
 800c946:	f000 fbe4 	bl	800d112 <memcpy>
 800c94a:	eeb0 0b49 	vmov.f64	d0, d9
 800c94e:	9805      	ldr	r0, [sp, #20]
 800c950:	aa14      	add	r2, sp, #80	@ 0x50
 800c952:	a913      	add	r1, sp, #76	@ 0x4c
 800c954:	f002 fcbc 	bl	800f2d0 <__d2b>
 800c958:	9012      	str	r0, [sp, #72]	@ 0x48
 800c95a:	2800      	cmp	r0, #0
 800c95c:	f43f aee0 	beq.w	800c720 <_strtod_l+0x420>
 800c960:	9805      	ldr	r0, [sp, #20]
 800c962:	2101      	movs	r1, #1
 800c964:	f002 fa0e 	bl	800ed84 <__i2b>
 800c968:	4605      	mov	r5, r0
 800c96a:	b940      	cbnz	r0, 800c97e <_strtod_l+0x67e>
 800c96c:	2500      	movs	r5, #0
 800c96e:	e6d7      	b.n	800c720 <_strtod_l+0x420>
 800c970:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c974:	fa01 f202 	lsl.w	r2, r1, r2
 800c978:	ea02 0a0a 	and.w	sl, r2, sl
 800c97c:	e7b0      	b.n	800c8e0 <_strtod_l+0x5e0>
 800c97e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800c980:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c982:	2f00      	cmp	r7, #0
 800c984:	bfab      	itete	ge
 800c986:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800c988:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800c98a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800c98e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800c992:	bfac      	ite	ge
 800c994:	eb07 0903 	addge.w	r9, r7, r3
 800c998:	eba3 0807 	sublt.w	r8, r3, r7
 800c99c:	9b06      	ldr	r3, [sp, #24]
 800c99e:	1aff      	subs	r7, r7, r3
 800c9a0:	4417      	add	r7, r2
 800c9a2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800c9a6:	4a6b      	ldr	r2, [pc, #428]	@ (800cb54 <_strtod_l+0x854>)
 800c9a8:	3f01      	subs	r7, #1
 800c9aa:	4297      	cmp	r7, r2
 800c9ac:	da51      	bge.n	800ca52 <_strtod_l+0x752>
 800c9ae:	1bd1      	subs	r1, r2, r7
 800c9b0:	291f      	cmp	r1, #31
 800c9b2:	eba3 0301 	sub.w	r3, r3, r1
 800c9b6:	f04f 0201 	mov.w	r2, #1
 800c9ba:	dc3e      	bgt.n	800ca3a <_strtod_l+0x73a>
 800c9bc:	408a      	lsls	r2, r1
 800c9be:	920c      	str	r2, [sp, #48]	@ 0x30
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c9c4:	eb09 0703 	add.w	r7, r9, r3
 800c9c8:	4498      	add	r8, r3
 800c9ca:	9b06      	ldr	r3, [sp, #24]
 800c9cc:	45b9      	cmp	r9, r7
 800c9ce:	4498      	add	r8, r3
 800c9d0:	464b      	mov	r3, r9
 800c9d2:	bfa8      	it	ge
 800c9d4:	463b      	movge	r3, r7
 800c9d6:	4543      	cmp	r3, r8
 800c9d8:	bfa8      	it	ge
 800c9da:	4643      	movge	r3, r8
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	bfc2      	ittt	gt
 800c9e0:	1aff      	subgt	r7, r7, r3
 800c9e2:	eba8 0803 	subgt.w	r8, r8, r3
 800c9e6:	eba9 0903 	subgt.w	r9, r9, r3
 800c9ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	dd16      	ble.n	800ca1e <_strtod_l+0x71e>
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	9805      	ldr	r0, [sp, #20]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	f002 fa85 	bl	800ef04 <__pow5mult>
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d0b5      	beq.n	800c96c <_strtod_l+0x66c>
 800ca00:	4601      	mov	r1, r0
 800ca02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ca04:	9805      	ldr	r0, [sp, #20]
 800ca06:	f002 f9d3 	bl	800edb0 <__multiply>
 800ca0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	f43f ae87 	beq.w	800c720 <_strtod_l+0x420>
 800ca12:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ca14:	9805      	ldr	r0, [sp, #20]
 800ca16:	f002 f8b7 	bl	800eb88 <_Bfree>
 800ca1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca1c:	9312      	str	r3, [sp, #72]	@ 0x48
 800ca1e:	2f00      	cmp	r7, #0
 800ca20:	dc1b      	bgt.n	800ca5a <_strtod_l+0x75a>
 800ca22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	dd21      	ble.n	800ca6c <_strtod_l+0x76c>
 800ca28:	4631      	mov	r1, r6
 800ca2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca2c:	9805      	ldr	r0, [sp, #20]
 800ca2e:	f002 fa69 	bl	800ef04 <__pow5mult>
 800ca32:	4606      	mov	r6, r0
 800ca34:	b9d0      	cbnz	r0, 800ca6c <_strtod_l+0x76c>
 800ca36:	2600      	movs	r6, #0
 800ca38:	e672      	b.n	800c720 <_strtod_l+0x420>
 800ca3a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ca3e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ca42:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ca46:	37e2      	adds	r7, #226	@ 0xe2
 800ca48:	fa02 f107 	lsl.w	r1, r2, r7
 800ca4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ca4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ca50:	e7b8      	b.n	800c9c4 <_strtod_l+0x6c4>
 800ca52:	2200      	movs	r2, #0
 800ca54:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ca56:	2201      	movs	r2, #1
 800ca58:	e7f9      	b.n	800ca4e <_strtod_l+0x74e>
 800ca5a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ca5c:	9805      	ldr	r0, [sp, #20]
 800ca5e:	463a      	mov	r2, r7
 800ca60:	f002 faaa 	bl	800efb8 <__lshift>
 800ca64:	9012      	str	r0, [sp, #72]	@ 0x48
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d1db      	bne.n	800ca22 <_strtod_l+0x722>
 800ca6a:	e659      	b.n	800c720 <_strtod_l+0x420>
 800ca6c:	f1b8 0f00 	cmp.w	r8, #0
 800ca70:	dd07      	ble.n	800ca82 <_strtod_l+0x782>
 800ca72:	4631      	mov	r1, r6
 800ca74:	9805      	ldr	r0, [sp, #20]
 800ca76:	4642      	mov	r2, r8
 800ca78:	f002 fa9e 	bl	800efb8 <__lshift>
 800ca7c:	4606      	mov	r6, r0
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d0d9      	beq.n	800ca36 <_strtod_l+0x736>
 800ca82:	f1b9 0f00 	cmp.w	r9, #0
 800ca86:	dd08      	ble.n	800ca9a <_strtod_l+0x79a>
 800ca88:	4629      	mov	r1, r5
 800ca8a:	9805      	ldr	r0, [sp, #20]
 800ca8c:	464a      	mov	r2, r9
 800ca8e:	f002 fa93 	bl	800efb8 <__lshift>
 800ca92:	4605      	mov	r5, r0
 800ca94:	2800      	cmp	r0, #0
 800ca96:	f43f ae43 	beq.w	800c720 <_strtod_l+0x420>
 800ca9a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ca9c:	9805      	ldr	r0, [sp, #20]
 800ca9e:	4632      	mov	r2, r6
 800caa0:	f002 fb12 	bl	800f0c8 <__mdiff>
 800caa4:	4604      	mov	r4, r0
 800caa6:	2800      	cmp	r0, #0
 800caa8:	f43f ae3a 	beq.w	800c720 <_strtod_l+0x420>
 800caac:	2300      	movs	r3, #0
 800caae:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800cab2:	60c3      	str	r3, [r0, #12]
 800cab4:	4629      	mov	r1, r5
 800cab6:	f002 faeb 	bl	800f090 <__mcmp>
 800caba:	2800      	cmp	r0, #0
 800cabc:	da4e      	bge.n	800cb5c <_strtod_l+0x85c>
 800cabe:	ea58 080a 	orrs.w	r8, r8, sl
 800cac2:	d174      	bne.n	800cbae <_strtod_l+0x8ae>
 800cac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d170      	bne.n	800cbae <_strtod_l+0x8ae>
 800cacc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cad0:	0d1b      	lsrs	r3, r3, #20
 800cad2:	051b      	lsls	r3, r3, #20
 800cad4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cad8:	d969      	bls.n	800cbae <_strtod_l+0x8ae>
 800cada:	6963      	ldr	r3, [r4, #20]
 800cadc:	b913      	cbnz	r3, 800cae4 <_strtod_l+0x7e4>
 800cade:	6923      	ldr	r3, [r4, #16]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	dd64      	ble.n	800cbae <_strtod_l+0x8ae>
 800cae4:	4621      	mov	r1, r4
 800cae6:	2201      	movs	r2, #1
 800cae8:	9805      	ldr	r0, [sp, #20]
 800caea:	f002 fa65 	bl	800efb8 <__lshift>
 800caee:	4629      	mov	r1, r5
 800caf0:	4604      	mov	r4, r0
 800caf2:	f002 facd 	bl	800f090 <__mcmp>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	dd59      	ble.n	800cbae <_strtod_l+0x8ae>
 800cafa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cafe:	9a06      	ldr	r2, [sp, #24]
 800cb00:	0d1b      	lsrs	r3, r3, #20
 800cb02:	051b      	lsls	r3, r3, #20
 800cb04:	2a00      	cmp	r2, #0
 800cb06:	d070      	beq.n	800cbea <_strtod_l+0x8ea>
 800cb08:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cb0c:	d86d      	bhi.n	800cbea <_strtod_l+0x8ea>
 800cb0e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cb12:	f67f ae99 	bls.w	800c848 <_strtod_l+0x548>
 800cb16:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800cb48 <_strtod_l+0x848>
 800cb1a:	ec4b ab16 	vmov	d6, sl, fp
 800cb1e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb58 <_strtod_l+0x858>)
 800cb20:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cb24:	ee17 2a90 	vmov	r2, s15
 800cb28:	4013      	ands	r3, r2
 800cb2a:	ec5b ab17 	vmov	sl, fp, d7
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f47f ae01 	bne.w	800c736 <_strtod_l+0x436>
 800cb34:	9a05      	ldr	r2, [sp, #20]
 800cb36:	2322      	movs	r3, #34	@ 0x22
 800cb38:	6013      	str	r3, [r2, #0]
 800cb3a:	e5fc      	b.n	800c736 <_strtod_l+0x436>
 800cb3c:	f3af 8000 	nop.w
 800cb40:	ffc00000 	.word	0xffc00000
 800cb44:	41dfffff 	.word	0x41dfffff
 800cb48:	00000000 	.word	0x00000000
 800cb4c:	39500000 	.word	0x39500000
 800cb50:	08010818 	.word	0x08010818
 800cb54:	fffffc02 	.word	0xfffffc02
 800cb58:	7ff00000 	.word	0x7ff00000
 800cb5c:	46d9      	mov	r9, fp
 800cb5e:	d15d      	bne.n	800cc1c <_strtod_l+0x91c>
 800cb60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb64:	f1b8 0f00 	cmp.w	r8, #0
 800cb68:	d02a      	beq.n	800cbc0 <_strtod_l+0x8c0>
 800cb6a:	4aab      	ldr	r2, [pc, #684]	@ (800ce18 <_strtod_l+0xb18>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d12a      	bne.n	800cbc6 <_strtod_l+0x8c6>
 800cb70:	9b06      	ldr	r3, [sp, #24]
 800cb72:	4652      	mov	r2, sl
 800cb74:	b1fb      	cbz	r3, 800cbb6 <_strtod_l+0x8b6>
 800cb76:	4ba9      	ldr	r3, [pc, #676]	@ (800ce1c <_strtod_l+0xb1c>)
 800cb78:	ea0b 0303 	and.w	r3, fp, r3
 800cb7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cb80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800cb84:	d81a      	bhi.n	800cbbc <_strtod_l+0x8bc>
 800cb86:	0d1b      	lsrs	r3, r3, #20
 800cb88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cb8c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d118      	bne.n	800cbc6 <_strtod_l+0x8c6>
 800cb94:	4ba2      	ldr	r3, [pc, #648]	@ (800ce20 <_strtod_l+0xb20>)
 800cb96:	4599      	cmp	r9, r3
 800cb98:	d102      	bne.n	800cba0 <_strtod_l+0x8a0>
 800cb9a:	3201      	adds	r2, #1
 800cb9c:	f43f adc0 	beq.w	800c720 <_strtod_l+0x420>
 800cba0:	4b9e      	ldr	r3, [pc, #632]	@ (800ce1c <_strtod_l+0xb1c>)
 800cba2:	ea09 0303 	and.w	r3, r9, r3
 800cba6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800cbaa:	f04f 0a00 	mov.w	sl, #0
 800cbae:	9b06      	ldr	r3, [sp, #24]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1b0      	bne.n	800cb16 <_strtod_l+0x816>
 800cbb4:	e5bf      	b.n	800c736 <_strtod_l+0x436>
 800cbb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cbba:	e7e9      	b.n	800cb90 <_strtod_l+0x890>
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	e7e7      	b.n	800cb90 <_strtod_l+0x890>
 800cbc0:	ea53 030a 	orrs.w	r3, r3, sl
 800cbc4:	d099      	beq.n	800cafa <_strtod_l+0x7fa>
 800cbc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbc8:	b1c3      	cbz	r3, 800cbfc <_strtod_l+0x8fc>
 800cbca:	ea13 0f09 	tst.w	r3, r9
 800cbce:	d0ee      	beq.n	800cbae <_strtod_l+0x8ae>
 800cbd0:	9a06      	ldr	r2, [sp, #24]
 800cbd2:	4650      	mov	r0, sl
 800cbd4:	4659      	mov	r1, fp
 800cbd6:	f1b8 0f00 	cmp.w	r8, #0
 800cbda:	d013      	beq.n	800cc04 <_strtod_l+0x904>
 800cbdc:	f7ff fb76 	bl	800c2cc <sulp>
 800cbe0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800cbe4:	ec5b ab17 	vmov	sl, fp, d7
 800cbe8:	e7e1      	b.n	800cbae <_strtod_l+0x8ae>
 800cbea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cbee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cbf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cbf6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800cbfa:	e7d8      	b.n	800cbae <_strtod_l+0x8ae>
 800cbfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbfe:	ea13 0f0a 	tst.w	r3, sl
 800cc02:	e7e4      	b.n	800cbce <_strtod_l+0x8ce>
 800cc04:	f7ff fb62 	bl	800c2cc <sulp>
 800cc08:	ee39 0b40 	vsub.f64	d0, d9, d0
 800cc0c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800cc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc14:	ec5b ab10 	vmov	sl, fp, d0
 800cc18:	d1c9      	bne.n	800cbae <_strtod_l+0x8ae>
 800cc1a:	e615      	b.n	800c848 <_strtod_l+0x548>
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f002 fbae 	bl	800f380 <__ratio>
 800cc24:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800cc28:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc30:	d85d      	bhi.n	800ccee <_strtod_l+0x9ee>
 800cc32:	f1b8 0f00 	cmp.w	r8, #0
 800cc36:	d164      	bne.n	800cd02 <_strtod_l+0xa02>
 800cc38:	f1ba 0f00 	cmp.w	sl, #0
 800cc3c:	d14b      	bne.n	800ccd6 <_strtod_l+0x9d6>
 800cc3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc42:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d160      	bne.n	800cd0c <_strtod_l+0xa0c>
 800cc4a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800cc4e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800cc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc56:	d401      	bmi.n	800cc5c <_strtod_l+0x95c>
 800cc58:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cc5c:	eeb1 ab48 	vneg.f64	d10, d8
 800cc60:	486e      	ldr	r0, [pc, #440]	@ (800ce1c <_strtod_l+0xb1c>)
 800cc62:	4970      	ldr	r1, [pc, #448]	@ (800ce24 <_strtod_l+0xb24>)
 800cc64:	ea09 0700 	and.w	r7, r9, r0
 800cc68:	428f      	cmp	r7, r1
 800cc6a:	ec53 2b1a 	vmov	r2, r3, d10
 800cc6e:	d17d      	bne.n	800cd6c <_strtod_l+0xa6c>
 800cc70:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800cc74:	ec4b ab1c 	vmov	d12, sl, fp
 800cc78:	eeb0 0b4c 	vmov.f64	d0, d12
 800cc7c:	f002 fab8 	bl	800f1f0 <__ulp>
 800cc80:	4866      	ldr	r0, [pc, #408]	@ (800ce1c <_strtod_l+0xb1c>)
 800cc82:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800cc86:	ee1c 3a90 	vmov	r3, s25
 800cc8a:	4a67      	ldr	r2, [pc, #412]	@ (800ce28 <_strtod_l+0xb28>)
 800cc8c:	ea03 0100 	and.w	r1, r3, r0
 800cc90:	4291      	cmp	r1, r2
 800cc92:	ec5b ab1c 	vmov	sl, fp, d12
 800cc96:	d93c      	bls.n	800cd12 <_strtod_l+0xa12>
 800cc98:	ee19 2a90 	vmov	r2, s19
 800cc9c:	4b60      	ldr	r3, [pc, #384]	@ (800ce20 <_strtod_l+0xb20>)
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d104      	bne.n	800ccac <_strtod_l+0x9ac>
 800cca2:	ee19 3a10 	vmov	r3, s18
 800cca6:	3301      	adds	r3, #1
 800cca8:	f43f ad3a 	beq.w	800c720 <_strtod_l+0x420>
 800ccac:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800ce20 <_strtod_l+0xb20>
 800ccb0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ccb4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ccb6:	9805      	ldr	r0, [sp, #20]
 800ccb8:	f001 ff66 	bl	800eb88 <_Bfree>
 800ccbc:	9805      	ldr	r0, [sp, #20]
 800ccbe:	4631      	mov	r1, r6
 800ccc0:	f001 ff62 	bl	800eb88 <_Bfree>
 800ccc4:	9805      	ldr	r0, [sp, #20]
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	f001 ff5e 	bl	800eb88 <_Bfree>
 800cccc:	9805      	ldr	r0, [sp, #20]
 800ccce:	4621      	mov	r1, r4
 800ccd0:	f001 ff5a 	bl	800eb88 <_Bfree>
 800ccd4:	e625      	b.n	800c922 <_strtod_l+0x622>
 800ccd6:	f1ba 0f01 	cmp.w	sl, #1
 800ccda:	d103      	bne.n	800cce4 <_strtod_l+0x9e4>
 800ccdc:	f1bb 0f00 	cmp.w	fp, #0
 800cce0:	f43f adb2 	beq.w	800c848 <_strtod_l+0x548>
 800cce4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800cce8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ccec:	e7b8      	b.n	800cc60 <_strtod_l+0x960>
 800ccee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ccf2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ccf6:	f1b8 0f00 	cmp.w	r8, #0
 800ccfa:	d0af      	beq.n	800cc5c <_strtod_l+0x95c>
 800ccfc:	eeb0 ab48 	vmov.f64	d10, d8
 800cd00:	e7ae      	b.n	800cc60 <_strtod_l+0x960>
 800cd02:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800cd06:	eeb0 8b4a 	vmov.f64	d8, d10
 800cd0a:	e7a9      	b.n	800cc60 <_strtod_l+0x960>
 800cd0c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800cd10:	e7a6      	b.n	800cc60 <_strtod_l+0x960>
 800cd12:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cd16:	9b06      	ldr	r3, [sp, #24]
 800cd18:	46d9      	mov	r9, fp
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1ca      	bne.n	800ccb4 <_strtod_l+0x9b4>
 800cd1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd22:	0d1b      	lsrs	r3, r3, #20
 800cd24:	051b      	lsls	r3, r3, #20
 800cd26:	429f      	cmp	r7, r3
 800cd28:	d1c4      	bne.n	800ccb4 <_strtod_l+0x9b4>
 800cd2a:	ec51 0b18 	vmov	r0, r1, d8
 800cd2e:	f7f3 fcbd 	bl	80006ac <__aeabi_d2lz>
 800cd32:	f7f3 fc75 	bl	8000620 <__aeabi_l2d>
 800cd36:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800cd3a:	ec41 0b17 	vmov	d7, r0, r1
 800cd3e:	ea49 090a 	orr.w	r9, r9, sl
 800cd42:	ea59 0908 	orrs.w	r9, r9, r8
 800cd46:	ee38 8b47 	vsub.f64	d8, d8, d7
 800cd4a:	d03c      	beq.n	800cdc6 <_strtod_l+0xac6>
 800cd4c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ce00 <_strtod_l+0xb00>
 800cd50:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd58:	f53f aced 	bmi.w	800c736 <_strtod_l+0x436>
 800cd5c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ce08 <_strtod_l+0xb08>
 800cd60:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd68:	dda4      	ble.n	800ccb4 <_strtod_l+0x9b4>
 800cd6a:	e4e4      	b.n	800c736 <_strtod_l+0x436>
 800cd6c:	9906      	ldr	r1, [sp, #24]
 800cd6e:	b1e1      	cbz	r1, 800cdaa <_strtod_l+0xaaa>
 800cd70:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800cd74:	d819      	bhi.n	800cdaa <_strtod_l+0xaaa>
 800cd76:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800cd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd7e:	d811      	bhi.n	800cda4 <_strtod_l+0xaa4>
 800cd80:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800cd84:	ee18 3a10 	vmov	r3, s16
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	bf38      	it	cc
 800cd8c:	2301      	movcc	r3, #1
 800cd8e:	ee08 3a10 	vmov	s16, r3
 800cd92:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800cd96:	f1b8 0f00 	cmp.w	r8, #0
 800cd9a:	d111      	bne.n	800cdc0 <_strtod_l+0xac0>
 800cd9c:	eeb1 7b48 	vneg.f64	d7, d8
 800cda0:	ec53 2b17 	vmov	r2, r3, d7
 800cda4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800cda8:	1bcb      	subs	r3, r1, r7
 800cdaa:	eeb0 0b49 	vmov.f64	d0, d9
 800cdae:	ec43 2b1a 	vmov	d10, r2, r3
 800cdb2:	f002 fa1d 	bl	800f1f0 <__ulp>
 800cdb6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800cdba:	ec5b ab19 	vmov	sl, fp, d9
 800cdbe:	e7aa      	b.n	800cd16 <_strtod_l+0xa16>
 800cdc0:	eeb0 7b48 	vmov.f64	d7, d8
 800cdc4:	e7ec      	b.n	800cda0 <_strtod_l+0xaa0>
 800cdc6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800ce10 <_strtod_l+0xb10>
 800cdca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd2:	f57f af6f 	bpl.w	800ccb4 <_strtod_l+0x9b4>
 800cdd6:	e4ae      	b.n	800c736 <_strtod_l+0x436>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	9308      	str	r3, [sp, #32]
 800cddc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	f7ff bacc 	b.w	800c37e <_strtod_l+0x7e>
 800cde6:	2a65      	cmp	r2, #101	@ 0x65
 800cde8:	f43f abbc 	beq.w	800c564 <_strtod_l+0x264>
 800cdec:	2a45      	cmp	r2, #69	@ 0x45
 800cdee:	f43f abb9 	beq.w	800c564 <_strtod_l+0x264>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	9306      	str	r3, [sp, #24]
 800cdf6:	f7ff bbf0 	b.w	800c5da <_strtod_l+0x2da>
 800cdfa:	bf00      	nop
 800cdfc:	f3af 8000 	nop.w
 800ce00:	94a03595 	.word	0x94a03595
 800ce04:	3fdfffff 	.word	0x3fdfffff
 800ce08:	35afe535 	.word	0x35afe535
 800ce0c:	3fe00000 	.word	0x3fe00000
 800ce10:	94a03595 	.word	0x94a03595
 800ce14:	3fcfffff 	.word	0x3fcfffff
 800ce18:	000fffff 	.word	0x000fffff
 800ce1c:	7ff00000 	.word	0x7ff00000
 800ce20:	7fefffff 	.word	0x7fefffff
 800ce24:	7fe00000 	.word	0x7fe00000
 800ce28:	7c9fffff 	.word	0x7c9fffff

0800ce2c <_strtod_r>:
 800ce2c:	4b01      	ldr	r3, [pc, #4]	@ (800ce34 <_strtod_r+0x8>)
 800ce2e:	f7ff ba67 	b.w	800c300 <_strtod_l>
 800ce32:	bf00      	nop
 800ce34:	20000094 	.word	0x20000094

0800ce38 <_strtol_l.constprop.0>:
 800ce38:	2b24      	cmp	r3, #36	@ 0x24
 800ce3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce3e:	4686      	mov	lr, r0
 800ce40:	4690      	mov	r8, r2
 800ce42:	d801      	bhi.n	800ce48 <_strtol_l.constprop.0+0x10>
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d106      	bne.n	800ce56 <_strtol_l.constprop.0+0x1e>
 800ce48:	f000 f936 	bl	800d0b8 <__errno>
 800ce4c:	2316      	movs	r3, #22
 800ce4e:	6003      	str	r3, [r0, #0]
 800ce50:	2000      	movs	r0, #0
 800ce52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce56:	4834      	ldr	r0, [pc, #208]	@ (800cf28 <_strtol_l.constprop.0+0xf0>)
 800ce58:	460d      	mov	r5, r1
 800ce5a:	462a      	mov	r2, r5
 800ce5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce60:	5d06      	ldrb	r6, [r0, r4]
 800ce62:	f016 0608 	ands.w	r6, r6, #8
 800ce66:	d1f8      	bne.n	800ce5a <_strtol_l.constprop.0+0x22>
 800ce68:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce6a:	d12d      	bne.n	800cec8 <_strtol_l.constprop.0+0x90>
 800ce6c:	782c      	ldrb	r4, [r5, #0]
 800ce6e:	2601      	movs	r6, #1
 800ce70:	1c95      	adds	r5, r2, #2
 800ce72:	f033 0210 	bics.w	r2, r3, #16
 800ce76:	d109      	bne.n	800ce8c <_strtol_l.constprop.0+0x54>
 800ce78:	2c30      	cmp	r4, #48	@ 0x30
 800ce7a:	d12a      	bne.n	800ced2 <_strtol_l.constprop.0+0x9a>
 800ce7c:	782a      	ldrb	r2, [r5, #0]
 800ce7e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce82:	2a58      	cmp	r2, #88	@ 0x58
 800ce84:	d125      	bne.n	800ced2 <_strtol_l.constprop.0+0x9a>
 800ce86:	786c      	ldrb	r4, [r5, #1]
 800ce88:	2310      	movs	r3, #16
 800ce8a:	3502      	adds	r5, #2
 800ce8c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ce90:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ce94:	2200      	movs	r2, #0
 800ce96:	fbbc f9f3 	udiv	r9, ip, r3
 800ce9a:	4610      	mov	r0, r2
 800ce9c:	fb03 ca19 	mls	sl, r3, r9, ip
 800cea0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cea4:	2f09      	cmp	r7, #9
 800cea6:	d81b      	bhi.n	800cee0 <_strtol_l.constprop.0+0xa8>
 800cea8:	463c      	mov	r4, r7
 800ceaa:	42a3      	cmp	r3, r4
 800ceac:	dd27      	ble.n	800cefe <_strtol_l.constprop.0+0xc6>
 800ceae:	1c57      	adds	r7, r2, #1
 800ceb0:	d007      	beq.n	800cec2 <_strtol_l.constprop.0+0x8a>
 800ceb2:	4581      	cmp	r9, r0
 800ceb4:	d320      	bcc.n	800cef8 <_strtol_l.constprop.0+0xc0>
 800ceb6:	d101      	bne.n	800cebc <_strtol_l.constprop.0+0x84>
 800ceb8:	45a2      	cmp	sl, r4
 800ceba:	db1d      	blt.n	800cef8 <_strtol_l.constprop.0+0xc0>
 800cebc:	fb00 4003 	mla	r0, r0, r3, r4
 800cec0:	2201      	movs	r2, #1
 800cec2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cec6:	e7eb      	b.n	800cea0 <_strtol_l.constprop.0+0x68>
 800cec8:	2c2b      	cmp	r4, #43	@ 0x2b
 800ceca:	bf04      	itt	eq
 800cecc:	782c      	ldrbeq	r4, [r5, #0]
 800cece:	1c95      	addeq	r5, r2, #2
 800ced0:	e7cf      	b.n	800ce72 <_strtol_l.constprop.0+0x3a>
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1da      	bne.n	800ce8c <_strtol_l.constprop.0+0x54>
 800ced6:	2c30      	cmp	r4, #48	@ 0x30
 800ced8:	bf0c      	ite	eq
 800ceda:	2308      	moveq	r3, #8
 800cedc:	230a      	movne	r3, #10
 800cede:	e7d5      	b.n	800ce8c <_strtol_l.constprop.0+0x54>
 800cee0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cee4:	2f19      	cmp	r7, #25
 800cee6:	d801      	bhi.n	800ceec <_strtol_l.constprop.0+0xb4>
 800cee8:	3c37      	subs	r4, #55	@ 0x37
 800ceea:	e7de      	b.n	800ceaa <_strtol_l.constprop.0+0x72>
 800ceec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cef0:	2f19      	cmp	r7, #25
 800cef2:	d804      	bhi.n	800cefe <_strtol_l.constprop.0+0xc6>
 800cef4:	3c57      	subs	r4, #87	@ 0x57
 800cef6:	e7d8      	b.n	800ceaa <_strtol_l.constprop.0+0x72>
 800cef8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cefc:	e7e1      	b.n	800cec2 <_strtol_l.constprop.0+0x8a>
 800cefe:	1c53      	adds	r3, r2, #1
 800cf00:	d108      	bne.n	800cf14 <_strtol_l.constprop.0+0xdc>
 800cf02:	2322      	movs	r3, #34	@ 0x22
 800cf04:	f8ce 3000 	str.w	r3, [lr]
 800cf08:	4660      	mov	r0, ip
 800cf0a:	f1b8 0f00 	cmp.w	r8, #0
 800cf0e:	d0a0      	beq.n	800ce52 <_strtol_l.constprop.0+0x1a>
 800cf10:	1e69      	subs	r1, r5, #1
 800cf12:	e006      	b.n	800cf22 <_strtol_l.constprop.0+0xea>
 800cf14:	b106      	cbz	r6, 800cf18 <_strtol_l.constprop.0+0xe0>
 800cf16:	4240      	negs	r0, r0
 800cf18:	f1b8 0f00 	cmp.w	r8, #0
 800cf1c:	d099      	beq.n	800ce52 <_strtol_l.constprop.0+0x1a>
 800cf1e:	2a00      	cmp	r2, #0
 800cf20:	d1f6      	bne.n	800cf10 <_strtol_l.constprop.0+0xd8>
 800cf22:	f8c8 1000 	str.w	r1, [r8]
 800cf26:	e794      	b.n	800ce52 <_strtol_l.constprop.0+0x1a>
 800cf28:	08010849 	.word	0x08010849

0800cf2c <_strtol_r>:
 800cf2c:	f7ff bf84 	b.w	800ce38 <_strtol_l.constprop.0>

0800cf30 <_fwalk_sglue>:
 800cf30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf34:	4607      	mov	r7, r0
 800cf36:	4688      	mov	r8, r1
 800cf38:	4614      	mov	r4, r2
 800cf3a:	2600      	movs	r6, #0
 800cf3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf40:	f1b9 0901 	subs.w	r9, r9, #1
 800cf44:	d505      	bpl.n	800cf52 <_fwalk_sglue+0x22>
 800cf46:	6824      	ldr	r4, [r4, #0]
 800cf48:	2c00      	cmp	r4, #0
 800cf4a:	d1f7      	bne.n	800cf3c <_fwalk_sglue+0xc>
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf52:	89ab      	ldrh	r3, [r5, #12]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d907      	bls.n	800cf68 <_fwalk_sglue+0x38>
 800cf58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	d003      	beq.n	800cf68 <_fwalk_sglue+0x38>
 800cf60:	4629      	mov	r1, r5
 800cf62:	4638      	mov	r0, r7
 800cf64:	47c0      	blx	r8
 800cf66:	4306      	orrs	r6, r0
 800cf68:	3568      	adds	r5, #104	@ 0x68
 800cf6a:	e7e9      	b.n	800cf40 <_fwalk_sglue+0x10>

0800cf6c <iprintf>:
 800cf6c:	b40f      	push	{r0, r1, r2, r3}
 800cf6e:	b507      	push	{r0, r1, r2, lr}
 800cf70:	4906      	ldr	r1, [pc, #24]	@ (800cf8c <iprintf+0x20>)
 800cf72:	ab04      	add	r3, sp, #16
 800cf74:	6808      	ldr	r0, [r1, #0]
 800cf76:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf7a:	6881      	ldr	r1, [r0, #8]
 800cf7c:	9301      	str	r3, [sp, #4]
 800cf7e:	f001 fbed 	bl	800e75c <_vfiprintf_r>
 800cf82:	b003      	add	sp, #12
 800cf84:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf88:	b004      	add	sp, #16
 800cf8a:	4770      	bx	lr
 800cf8c:	20000200 	.word	0x20000200

0800cf90 <putchar>:
 800cf90:	4b02      	ldr	r3, [pc, #8]	@ (800cf9c <putchar+0xc>)
 800cf92:	4601      	mov	r1, r0
 800cf94:	6818      	ldr	r0, [r3, #0]
 800cf96:	6882      	ldr	r2, [r0, #8]
 800cf98:	f002 bbeb 	b.w	800f772 <_putc_r>
 800cf9c:	20000200 	.word	0x20000200

0800cfa0 <_puts_r>:
 800cfa0:	6a03      	ldr	r3, [r0, #32]
 800cfa2:	b570      	push	{r4, r5, r6, lr}
 800cfa4:	6884      	ldr	r4, [r0, #8]
 800cfa6:	4605      	mov	r5, r0
 800cfa8:	460e      	mov	r6, r1
 800cfaa:	b90b      	cbnz	r3, 800cfb0 <_puts_r+0x10>
 800cfac:	f7ff f976 	bl	800c29c <__sinit>
 800cfb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfb2:	07db      	lsls	r3, r3, #31
 800cfb4:	d405      	bmi.n	800cfc2 <_puts_r+0x22>
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	0598      	lsls	r0, r3, #22
 800cfba:	d402      	bmi.n	800cfc2 <_puts_r+0x22>
 800cfbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfbe:	f000 f8a6 	bl	800d10e <__retarget_lock_acquire_recursive>
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	0719      	lsls	r1, r3, #28
 800cfc6:	d502      	bpl.n	800cfce <_puts_r+0x2e>
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d135      	bne.n	800d03a <_puts_r+0x9a>
 800cfce:	4621      	mov	r1, r4
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	f002 fb09 	bl	800f5e8 <__swsetup_r>
 800cfd6:	b380      	cbz	r0, 800d03a <_puts_r+0x9a>
 800cfd8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800cfdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfde:	07da      	lsls	r2, r3, #31
 800cfe0:	d405      	bmi.n	800cfee <_puts_r+0x4e>
 800cfe2:	89a3      	ldrh	r3, [r4, #12]
 800cfe4:	059b      	lsls	r3, r3, #22
 800cfe6:	d402      	bmi.n	800cfee <_puts_r+0x4e>
 800cfe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfea:	f000 f891 	bl	800d110 <__retarget_lock_release_recursive>
 800cfee:	4628      	mov	r0, r5
 800cff0:	bd70      	pop	{r4, r5, r6, pc}
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	da04      	bge.n	800d000 <_puts_r+0x60>
 800cff6:	69a2      	ldr	r2, [r4, #24]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	dc17      	bgt.n	800d02c <_puts_r+0x8c>
 800cffc:	290a      	cmp	r1, #10
 800cffe:	d015      	beq.n	800d02c <_puts_r+0x8c>
 800d000:	6823      	ldr	r3, [r4, #0]
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	6022      	str	r2, [r4, #0]
 800d006:	7019      	strb	r1, [r3, #0]
 800d008:	68a3      	ldr	r3, [r4, #8]
 800d00a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d00e:	3b01      	subs	r3, #1
 800d010:	60a3      	str	r3, [r4, #8]
 800d012:	2900      	cmp	r1, #0
 800d014:	d1ed      	bne.n	800cff2 <_puts_r+0x52>
 800d016:	2b00      	cmp	r3, #0
 800d018:	da11      	bge.n	800d03e <_puts_r+0x9e>
 800d01a:	4622      	mov	r2, r4
 800d01c:	210a      	movs	r1, #10
 800d01e:	4628      	mov	r0, r5
 800d020:	f002 faa4 	bl	800f56c <__swbuf_r>
 800d024:	3001      	adds	r0, #1
 800d026:	d0d7      	beq.n	800cfd8 <_puts_r+0x38>
 800d028:	250a      	movs	r5, #10
 800d02a:	e7d7      	b.n	800cfdc <_puts_r+0x3c>
 800d02c:	4622      	mov	r2, r4
 800d02e:	4628      	mov	r0, r5
 800d030:	f002 fa9c 	bl	800f56c <__swbuf_r>
 800d034:	3001      	adds	r0, #1
 800d036:	d1e7      	bne.n	800d008 <_puts_r+0x68>
 800d038:	e7ce      	b.n	800cfd8 <_puts_r+0x38>
 800d03a:	3e01      	subs	r6, #1
 800d03c:	e7e4      	b.n	800d008 <_puts_r+0x68>
 800d03e:	6823      	ldr	r3, [r4, #0]
 800d040:	1c5a      	adds	r2, r3, #1
 800d042:	6022      	str	r2, [r4, #0]
 800d044:	220a      	movs	r2, #10
 800d046:	701a      	strb	r2, [r3, #0]
 800d048:	e7ee      	b.n	800d028 <_puts_r+0x88>
	...

0800d04c <puts>:
 800d04c:	4b02      	ldr	r3, [pc, #8]	@ (800d058 <puts+0xc>)
 800d04e:	4601      	mov	r1, r0
 800d050:	6818      	ldr	r0, [r3, #0]
 800d052:	f7ff bfa5 	b.w	800cfa0 <_puts_r>
 800d056:	bf00      	nop
 800d058:	20000200 	.word	0x20000200

0800d05c <strncmp>:
 800d05c:	b510      	push	{r4, lr}
 800d05e:	b16a      	cbz	r2, 800d07c <strncmp+0x20>
 800d060:	3901      	subs	r1, #1
 800d062:	1884      	adds	r4, r0, r2
 800d064:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d068:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d103      	bne.n	800d078 <strncmp+0x1c>
 800d070:	42a0      	cmp	r0, r4
 800d072:	d001      	beq.n	800d078 <strncmp+0x1c>
 800d074:	2a00      	cmp	r2, #0
 800d076:	d1f5      	bne.n	800d064 <strncmp+0x8>
 800d078:	1ad0      	subs	r0, r2, r3
 800d07a:	bd10      	pop	{r4, pc}
 800d07c:	4610      	mov	r0, r2
 800d07e:	e7fc      	b.n	800d07a <strncmp+0x1e>

0800d080 <memset>:
 800d080:	4402      	add	r2, r0
 800d082:	4603      	mov	r3, r0
 800d084:	4293      	cmp	r3, r2
 800d086:	d100      	bne.n	800d08a <memset+0xa>
 800d088:	4770      	bx	lr
 800d08a:	f803 1b01 	strb.w	r1, [r3], #1
 800d08e:	e7f9      	b.n	800d084 <memset+0x4>

0800d090 <_localeconv_r>:
 800d090:	4800      	ldr	r0, [pc, #0]	@ (800d094 <_localeconv_r+0x4>)
 800d092:	4770      	bx	lr
 800d094:	20000184 	.word	0x20000184

0800d098 <_sbrk_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4d06      	ldr	r5, [pc, #24]	@ (800d0b4 <_sbrk_r+0x1c>)
 800d09c:	2300      	movs	r3, #0
 800d09e:	4604      	mov	r4, r0
 800d0a0:	4608      	mov	r0, r1
 800d0a2:	602b      	str	r3, [r5, #0]
 800d0a4:	f7f4 ff60 	bl	8001f68 <_sbrk>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d102      	bne.n	800d0b2 <_sbrk_r+0x1a>
 800d0ac:	682b      	ldr	r3, [r5, #0]
 800d0ae:	b103      	cbz	r3, 800d0b2 <_sbrk_r+0x1a>
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	bd38      	pop	{r3, r4, r5, pc}
 800d0b4:	200007d0 	.word	0x200007d0

0800d0b8 <__errno>:
 800d0b8:	4b01      	ldr	r3, [pc, #4]	@ (800d0c0 <__errno+0x8>)
 800d0ba:	6818      	ldr	r0, [r3, #0]
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	20000200 	.word	0x20000200

0800d0c4 <__libc_init_array>:
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	4d0d      	ldr	r5, [pc, #52]	@ (800d0fc <__libc_init_array+0x38>)
 800d0c8:	4c0d      	ldr	r4, [pc, #52]	@ (800d100 <__libc_init_array+0x3c>)
 800d0ca:	1b64      	subs	r4, r4, r5
 800d0cc:	10a4      	asrs	r4, r4, #2
 800d0ce:	2600      	movs	r6, #0
 800d0d0:	42a6      	cmp	r6, r4
 800d0d2:	d109      	bne.n	800d0e8 <__libc_init_array+0x24>
 800d0d4:	4d0b      	ldr	r5, [pc, #44]	@ (800d104 <__libc_init_array+0x40>)
 800d0d6:	4c0c      	ldr	r4, [pc, #48]	@ (800d108 <__libc_init_array+0x44>)
 800d0d8:	f002 fc6a 	bl	800f9b0 <_init>
 800d0dc:	1b64      	subs	r4, r4, r5
 800d0de:	10a4      	asrs	r4, r4, #2
 800d0e0:	2600      	movs	r6, #0
 800d0e2:	42a6      	cmp	r6, r4
 800d0e4:	d105      	bne.n	800d0f2 <__libc_init_array+0x2e>
 800d0e6:	bd70      	pop	{r4, r5, r6, pc}
 800d0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ec:	4798      	blx	r3
 800d0ee:	3601      	adds	r6, #1
 800d0f0:	e7ee      	b.n	800d0d0 <__libc_init_array+0xc>
 800d0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0f6:	4798      	blx	r3
 800d0f8:	3601      	adds	r6, #1
 800d0fa:	e7f2      	b.n	800d0e2 <__libc_init_array+0x1e>
 800d0fc:	08010bd0 	.word	0x08010bd0
 800d100:	08010bd0 	.word	0x08010bd0
 800d104:	08010bd0 	.word	0x08010bd0
 800d108:	08010bd4 	.word	0x08010bd4

0800d10c <__retarget_lock_init_recursive>:
 800d10c:	4770      	bx	lr

0800d10e <__retarget_lock_acquire_recursive>:
 800d10e:	4770      	bx	lr

0800d110 <__retarget_lock_release_recursive>:
 800d110:	4770      	bx	lr

0800d112 <memcpy>:
 800d112:	440a      	add	r2, r1
 800d114:	4291      	cmp	r1, r2
 800d116:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d11a:	d100      	bne.n	800d11e <memcpy+0xc>
 800d11c:	4770      	bx	lr
 800d11e:	b510      	push	{r4, lr}
 800d120:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d124:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d128:	4291      	cmp	r1, r2
 800d12a:	d1f9      	bne.n	800d120 <memcpy+0xe>
 800d12c:	bd10      	pop	{r4, pc}

0800d12e <system>:
 800d12e:	b508      	push	{r3, lr}
 800d130:	b128      	cbz	r0, 800d13e <system+0x10>
 800d132:	f7ff ffc1 	bl	800d0b8 <__errno>
 800d136:	2358      	movs	r3, #88	@ 0x58
 800d138:	6003      	str	r3, [r0, #0]
 800d13a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d13e:	bd08      	pop	{r3, pc}

0800d140 <nan>:
 800d140:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d148 <nan+0x8>
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	00000000 	.word	0x00000000
 800d14c:	7ff80000 	.word	0x7ff80000

0800d150 <nanf>:
 800d150:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d158 <nanf+0x8>
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	7fc00000 	.word	0x7fc00000

0800d15c <__assert_func>:
 800d15c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d15e:	4614      	mov	r4, r2
 800d160:	461a      	mov	r2, r3
 800d162:	4b09      	ldr	r3, [pc, #36]	@ (800d188 <__assert_func+0x2c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4605      	mov	r5, r0
 800d168:	68d8      	ldr	r0, [r3, #12]
 800d16a:	b954      	cbnz	r4, 800d182 <__assert_func+0x26>
 800d16c:	4b07      	ldr	r3, [pc, #28]	@ (800d18c <__assert_func+0x30>)
 800d16e:	461c      	mov	r4, r3
 800d170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d174:	9100      	str	r1, [sp, #0]
 800d176:	462b      	mov	r3, r5
 800d178:	4905      	ldr	r1, [pc, #20]	@ (800d190 <__assert_func+0x34>)
 800d17a:	f002 f9b7 	bl	800f4ec <fiprintf>
 800d17e:	f002 fbaf 	bl	800f8e0 <abort>
 800d182:	4b04      	ldr	r3, [pc, #16]	@ (800d194 <__assert_func+0x38>)
 800d184:	e7f4      	b.n	800d170 <__assert_func+0x14>
 800d186:	bf00      	nop
 800d188:	20000200 	.word	0x20000200
 800d18c:	08010984 	.word	0x08010984
 800d190:	08010956 	.word	0x08010956
 800d194:	08010949 	.word	0x08010949

0800d198 <quorem>:
 800d198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d19c:	6903      	ldr	r3, [r0, #16]
 800d19e:	690c      	ldr	r4, [r1, #16]
 800d1a0:	42a3      	cmp	r3, r4
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	db7e      	blt.n	800d2a4 <quorem+0x10c>
 800d1a6:	3c01      	subs	r4, #1
 800d1a8:	f101 0814 	add.w	r8, r1, #20
 800d1ac:	00a3      	lsls	r3, r4, #2
 800d1ae:	f100 0514 	add.w	r5, r0, #20
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1b8:	9301      	str	r3, [sp, #4]
 800d1ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d1be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1ca:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1ce:	d32e      	bcc.n	800d22e <quorem+0x96>
 800d1d0:	f04f 0a00 	mov.w	sl, #0
 800d1d4:	46c4      	mov	ip, r8
 800d1d6:	46ae      	mov	lr, r5
 800d1d8:	46d3      	mov	fp, sl
 800d1da:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d1de:	b298      	uxth	r0, r3
 800d1e0:	fb06 a000 	mla	r0, r6, r0, sl
 800d1e4:	0c02      	lsrs	r2, r0, #16
 800d1e6:	0c1b      	lsrs	r3, r3, #16
 800d1e8:	fb06 2303 	mla	r3, r6, r3, r2
 800d1ec:	f8de 2000 	ldr.w	r2, [lr]
 800d1f0:	b280      	uxth	r0, r0
 800d1f2:	b292      	uxth	r2, r2
 800d1f4:	1a12      	subs	r2, r2, r0
 800d1f6:	445a      	add	r2, fp
 800d1f8:	f8de 0000 	ldr.w	r0, [lr]
 800d1fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d200:	b29b      	uxth	r3, r3
 800d202:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d206:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d20a:	b292      	uxth	r2, r2
 800d20c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d210:	45e1      	cmp	r9, ip
 800d212:	f84e 2b04 	str.w	r2, [lr], #4
 800d216:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d21a:	d2de      	bcs.n	800d1da <quorem+0x42>
 800d21c:	9b00      	ldr	r3, [sp, #0]
 800d21e:	58eb      	ldr	r3, [r5, r3]
 800d220:	b92b      	cbnz	r3, 800d22e <quorem+0x96>
 800d222:	9b01      	ldr	r3, [sp, #4]
 800d224:	3b04      	subs	r3, #4
 800d226:	429d      	cmp	r5, r3
 800d228:	461a      	mov	r2, r3
 800d22a:	d32f      	bcc.n	800d28c <quorem+0xf4>
 800d22c:	613c      	str	r4, [r7, #16]
 800d22e:	4638      	mov	r0, r7
 800d230:	f001 ff2e 	bl	800f090 <__mcmp>
 800d234:	2800      	cmp	r0, #0
 800d236:	db25      	blt.n	800d284 <quorem+0xec>
 800d238:	4629      	mov	r1, r5
 800d23a:	2000      	movs	r0, #0
 800d23c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d240:	f8d1 c000 	ldr.w	ip, [r1]
 800d244:	fa1f fe82 	uxth.w	lr, r2
 800d248:	fa1f f38c 	uxth.w	r3, ip
 800d24c:	eba3 030e 	sub.w	r3, r3, lr
 800d250:	4403      	add	r3, r0
 800d252:	0c12      	lsrs	r2, r2, #16
 800d254:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d258:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d262:	45c1      	cmp	r9, r8
 800d264:	f841 3b04 	str.w	r3, [r1], #4
 800d268:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d26c:	d2e6      	bcs.n	800d23c <quorem+0xa4>
 800d26e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d276:	b922      	cbnz	r2, 800d282 <quorem+0xea>
 800d278:	3b04      	subs	r3, #4
 800d27a:	429d      	cmp	r5, r3
 800d27c:	461a      	mov	r2, r3
 800d27e:	d30b      	bcc.n	800d298 <quorem+0x100>
 800d280:	613c      	str	r4, [r7, #16]
 800d282:	3601      	adds	r6, #1
 800d284:	4630      	mov	r0, r6
 800d286:	b003      	add	sp, #12
 800d288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28c:	6812      	ldr	r2, [r2, #0]
 800d28e:	3b04      	subs	r3, #4
 800d290:	2a00      	cmp	r2, #0
 800d292:	d1cb      	bne.n	800d22c <quorem+0x94>
 800d294:	3c01      	subs	r4, #1
 800d296:	e7c6      	b.n	800d226 <quorem+0x8e>
 800d298:	6812      	ldr	r2, [r2, #0]
 800d29a:	3b04      	subs	r3, #4
 800d29c:	2a00      	cmp	r2, #0
 800d29e:	d1ef      	bne.n	800d280 <quorem+0xe8>
 800d2a0:	3c01      	subs	r4, #1
 800d2a2:	e7ea      	b.n	800d27a <quorem+0xe2>
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	e7ee      	b.n	800d286 <quorem+0xee>

0800d2a8 <_dtoa_r>:
 800d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ac:	ed2d 8b02 	vpush	{d8}
 800d2b0:	69c7      	ldr	r7, [r0, #28]
 800d2b2:	b091      	sub	sp, #68	@ 0x44
 800d2b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d2b8:	ec55 4b10 	vmov	r4, r5, d0
 800d2bc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d2be:	9107      	str	r1, [sp, #28]
 800d2c0:	4681      	mov	r9, r0
 800d2c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2c4:	930d      	str	r3, [sp, #52]	@ 0x34
 800d2c6:	b97f      	cbnz	r7, 800d2e8 <_dtoa_r+0x40>
 800d2c8:	2010      	movs	r0, #16
 800d2ca:	f7fe fa43 	bl	800b754 <malloc>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	f8c9 001c 	str.w	r0, [r9, #28]
 800d2d4:	b920      	cbnz	r0, 800d2e0 <_dtoa_r+0x38>
 800d2d6:	4ba0      	ldr	r3, [pc, #640]	@ (800d558 <_dtoa_r+0x2b0>)
 800d2d8:	21ef      	movs	r1, #239	@ 0xef
 800d2da:	48a0      	ldr	r0, [pc, #640]	@ (800d55c <_dtoa_r+0x2b4>)
 800d2dc:	f7ff ff3e 	bl	800d15c <__assert_func>
 800d2e0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d2e4:	6007      	str	r7, [r0, #0]
 800d2e6:	60c7      	str	r7, [r0, #12]
 800d2e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d2ec:	6819      	ldr	r1, [r3, #0]
 800d2ee:	b159      	cbz	r1, 800d308 <_dtoa_r+0x60>
 800d2f0:	685a      	ldr	r2, [r3, #4]
 800d2f2:	604a      	str	r2, [r1, #4]
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	4093      	lsls	r3, r2
 800d2f8:	608b      	str	r3, [r1, #8]
 800d2fa:	4648      	mov	r0, r9
 800d2fc:	f001 fc44 	bl	800eb88 <_Bfree>
 800d300:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d304:	2200      	movs	r2, #0
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	1e2b      	subs	r3, r5, #0
 800d30a:	bfbb      	ittet	lt
 800d30c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d310:	9303      	strlt	r3, [sp, #12]
 800d312:	2300      	movge	r3, #0
 800d314:	2201      	movlt	r2, #1
 800d316:	bfac      	ite	ge
 800d318:	6033      	strge	r3, [r6, #0]
 800d31a:	6032      	strlt	r2, [r6, #0]
 800d31c:	4b90      	ldr	r3, [pc, #576]	@ (800d560 <_dtoa_r+0x2b8>)
 800d31e:	9e03      	ldr	r6, [sp, #12]
 800d320:	43b3      	bics	r3, r6
 800d322:	d110      	bne.n	800d346 <_dtoa_r+0x9e>
 800d324:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d326:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d32a:	6013      	str	r3, [r2, #0]
 800d32c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d330:	4323      	orrs	r3, r4
 800d332:	f000 84de 	beq.w	800dcf2 <_dtoa_r+0xa4a>
 800d336:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d338:	4f8a      	ldr	r7, [pc, #552]	@ (800d564 <_dtoa_r+0x2bc>)
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	f000 84e0 	beq.w	800dd00 <_dtoa_r+0xa58>
 800d340:	1cfb      	adds	r3, r7, #3
 800d342:	f000 bcdb 	b.w	800dcfc <_dtoa_r+0xa54>
 800d346:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d34a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d352:	d10a      	bne.n	800d36a <_dtoa_r+0xc2>
 800d354:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d356:	2301      	movs	r3, #1
 800d358:	6013      	str	r3, [r2, #0]
 800d35a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d35c:	b113      	cbz	r3, 800d364 <_dtoa_r+0xbc>
 800d35e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d360:	4b81      	ldr	r3, [pc, #516]	@ (800d568 <_dtoa_r+0x2c0>)
 800d362:	6013      	str	r3, [r2, #0]
 800d364:	4f81      	ldr	r7, [pc, #516]	@ (800d56c <_dtoa_r+0x2c4>)
 800d366:	f000 bccb 	b.w	800dd00 <_dtoa_r+0xa58>
 800d36a:	aa0e      	add	r2, sp, #56	@ 0x38
 800d36c:	a90f      	add	r1, sp, #60	@ 0x3c
 800d36e:	4648      	mov	r0, r9
 800d370:	eeb0 0b48 	vmov.f64	d0, d8
 800d374:	f001 ffac 	bl	800f2d0 <__d2b>
 800d378:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d37c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d37e:	9001      	str	r0, [sp, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d045      	beq.n	800d410 <_dtoa_r+0x168>
 800d384:	eeb0 7b48 	vmov.f64	d7, d8
 800d388:	ee18 1a90 	vmov	r1, s17
 800d38c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d390:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d394:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d398:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d39c:	2500      	movs	r5, #0
 800d39e:	ee07 1a90 	vmov	s15, r1
 800d3a2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d3a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d540 <_dtoa_r+0x298>
 800d3aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d3ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d548 <_dtoa_r+0x2a0>
 800d3b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d3b6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d550 <_dtoa_r+0x2a8>
 800d3ba:	ee07 3a90 	vmov	s15, r3
 800d3be:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d3c2:	eeb0 7b46 	vmov.f64	d7, d6
 800d3c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d3ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d3ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d6:	ee16 8a90 	vmov	r8, s13
 800d3da:	d508      	bpl.n	800d3ee <_dtoa_r+0x146>
 800d3dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d3e0:	eeb4 6b47 	vcmp.f64	d6, d7
 800d3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e8:	bf18      	it	ne
 800d3ea:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800d3ee:	f1b8 0f16 	cmp.w	r8, #22
 800d3f2:	d82b      	bhi.n	800d44c <_dtoa_r+0x1a4>
 800d3f4:	495e      	ldr	r1, [pc, #376]	@ (800d570 <_dtoa_r+0x2c8>)
 800d3f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d3fa:	ed91 7b00 	vldr	d7, [r1]
 800d3fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d406:	d501      	bpl.n	800d40c <_dtoa_r+0x164>
 800d408:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d40c:	2100      	movs	r1, #0
 800d40e:	e01e      	b.n	800d44e <_dtoa_r+0x1a6>
 800d410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d412:	4413      	add	r3, r2
 800d414:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d418:	2920      	cmp	r1, #32
 800d41a:	bfc1      	itttt	gt
 800d41c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d420:	408e      	lslgt	r6, r1
 800d422:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d426:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d42a:	bfd6      	itet	le
 800d42c:	f1c1 0120 	rsble	r1, r1, #32
 800d430:	4331      	orrgt	r1, r6
 800d432:	fa04 f101 	lslle.w	r1, r4, r1
 800d436:	ee07 1a90 	vmov	s15, r1
 800d43a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d43e:	3b01      	subs	r3, #1
 800d440:	ee17 1a90 	vmov	r1, s15
 800d444:	2501      	movs	r5, #1
 800d446:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d44a:	e7a8      	b.n	800d39e <_dtoa_r+0xf6>
 800d44c:	2101      	movs	r1, #1
 800d44e:	1ad2      	subs	r2, r2, r3
 800d450:	1e53      	subs	r3, r2, #1
 800d452:	9306      	str	r3, [sp, #24]
 800d454:	bf45      	ittet	mi
 800d456:	f1c2 0301 	rsbmi	r3, r2, #1
 800d45a:	9305      	strmi	r3, [sp, #20]
 800d45c:	2300      	movpl	r3, #0
 800d45e:	2300      	movmi	r3, #0
 800d460:	bf4c      	ite	mi
 800d462:	9306      	strmi	r3, [sp, #24]
 800d464:	9305      	strpl	r3, [sp, #20]
 800d466:	f1b8 0f00 	cmp.w	r8, #0
 800d46a:	910c      	str	r1, [sp, #48]	@ 0x30
 800d46c:	db18      	blt.n	800d4a0 <_dtoa_r+0x1f8>
 800d46e:	9b06      	ldr	r3, [sp, #24]
 800d470:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d474:	4443      	add	r3, r8
 800d476:	9306      	str	r3, [sp, #24]
 800d478:	2300      	movs	r3, #0
 800d47a:	9a07      	ldr	r2, [sp, #28]
 800d47c:	2a09      	cmp	r2, #9
 800d47e:	d849      	bhi.n	800d514 <_dtoa_r+0x26c>
 800d480:	2a05      	cmp	r2, #5
 800d482:	bfc4      	itt	gt
 800d484:	3a04      	subgt	r2, #4
 800d486:	9207      	strgt	r2, [sp, #28]
 800d488:	9a07      	ldr	r2, [sp, #28]
 800d48a:	f1a2 0202 	sub.w	r2, r2, #2
 800d48e:	bfcc      	ite	gt
 800d490:	2400      	movgt	r4, #0
 800d492:	2401      	movle	r4, #1
 800d494:	2a03      	cmp	r2, #3
 800d496:	d848      	bhi.n	800d52a <_dtoa_r+0x282>
 800d498:	e8df f002 	tbb	[pc, r2]
 800d49c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d4a0:	9b05      	ldr	r3, [sp, #20]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	eba3 0308 	sub.w	r3, r3, r8
 800d4a8:	9305      	str	r3, [sp, #20]
 800d4aa:	920a      	str	r2, [sp, #40]	@ 0x28
 800d4ac:	f1c8 0300 	rsb	r3, r8, #0
 800d4b0:	e7e3      	b.n	800d47a <_dtoa_r+0x1d2>
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	9208      	str	r2, [sp, #32]
 800d4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4b8:	2a00      	cmp	r2, #0
 800d4ba:	dc39      	bgt.n	800d530 <_dtoa_r+0x288>
 800d4bc:	f04f 0b01 	mov.w	fp, #1
 800d4c0:	46da      	mov	sl, fp
 800d4c2:	465a      	mov	r2, fp
 800d4c4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d4c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	2004      	movs	r0, #4
 800d4d0:	f100 0614 	add.w	r6, r0, #20
 800d4d4:	4296      	cmp	r6, r2
 800d4d6:	d930      	bls.n	800d53a <_dtoa_r+0x292>
 800d4d8:	6079      	str	r1, [r7, #4]
 800d4da:	4648      	mov	r0, r9
 800d4dc:	9304      	str	r3, [sp, #16]
 800d4de:	f001 fb13 	bl	800eb08 <_Balloc>
 800d4e2:	9b04      	ldr	r3, [sp, #16]
 800d4e4:	4607      	mov	r7, r0
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d146      	bne.n	800d578 <_dtoa_r+0x2d0>
 800d4ea:	4b22      	ldr	r3, [pc, #136]	@ (800d574 <_dtoa_r+0x2cc>)
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800d4f2:	e6f2      	b.n	800d2da <_dtoa_r+0x32>
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	e7dd      	b.n	800d4b4 <_dtoa_r+0x20c>
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	9208      	str	r2, [sp, #32]
 800d4fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4fe:	eb08 0b02 	add.w	fp, r8, r2
 800d502:	f10b 0a01 	add.w	sl, fp, #1
 800d506:	4652      	mov	r2, sl
 800d508:	2a01      	cmp	r2, #1
 800d50a:	bfb8      	it	lt
 800d50c:	2201      	movlt	r2, #1
 800d50e:	e7db      	b.n	800d4c8 <_dtoa_r+0x220>
 800d510:	2201      	movs	r2, #1
 800d512:	e7f2      	b.n	800d4fa <_dtoa_r+0x252>
 800d514:	2401      	movs	r4, #1
 800d516:	2200      	movs	r2, #0
 800d518:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d51c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d520:	2100      	movs	r1, #0
 800d522:	46da      	mov	sl, fp
 800d524:	2212      	movs	r2, #18
 800d526:	9109      	str	r1, [sp, #36]	@ 0x24
 800d528:	e7ce      	b.n	800d4c8 <_dtoa_r+0x220>
 800d52a:	2201      	movs	r2, #1
 800d52c:	9208      	str	r2, [sp, #32]
 800d52e:	e7f5      	b.n	800d51c <_dtoa_r+0x274>
 800d530:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800d534:	46da      	mov	sl, fp
 800d536:	465a      	mov	r2, fp
 800d538:	e7c6      	b.n	800d4c8 <_dtoa_r+0x220>
 800d53a:	3101      	adds	r1, #1
 800d53c:	0040      	lsls	r0, r0, #1
 800d53e:	e7c7      	b.n	800d4d0 <_dtoa_r+0x228>
 800d540:	636f4361 	.word	0x636f4361
 800d544:	3fd287a7 	.word	0x3fd287a7
 800d548:	8b60c8b3 	.word	0x8b60c8b3
 800d54c:	3fc68a28 	.word	0x3fc68a28
 800d550:	509f79fb 	.word	0x509f79fb
 800d554:	3fd34413 	.word	0x3fd34413
 800d558:	0801077d 	.word	0x0801077d
 800d55c:	08010992 	.word	0x08010992
 800d560:	7ff00000 	.word	0x7ff00000
 800d564:	0801098e 	.word	0x0801098e
 800d568:	08010755 	.word	0x08010755
 800d56c:	08010754 	.word	0x08010754
 800d570:	08010b00 	.word	0x08010b00
 800d574:	080109ea 	.word	0x080109ea
 800d578:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d57c:	f1ba 0f0e 	cmp.w	sl, #14
 800d580:	6010      	str	r0, [r2, #0]
 800d582:	d86f      	bhi.n	800d664 <_dtoa_r+0x3bc>
 800d584:	2c00      	cmp	r4, #0
 800d586:	d06d      	beq.n	800d664 <_dtoa_r+0x3bc>
 800d588:	f1b8 0f00 	cmp.w	r8, #0
 800d58c:	f340 80c2 	ble.w	800d714 <_dtoa_r+0x46c>
 800d590:	4aca      	ldr	r2, [pc, #808]	@ (800d8bc <_dtoa_r+0x614>)
 800d592:	f008 010f 	and.w	r1, r8, #15
 800d596:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d59a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d59e:	ed92 7b00 	vldr	d7, [r2]
 800d5a2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d5a6:	f000 80a9 	beq.w	800d6fc <_dtoa_r+0x454>
 800d5aa:	4ac5      	ldr	r2, [pc, #788]	@ (800d8c0 <_dtoa_r+0x618>)
 800d5ac:	ed92 6b08 	vldr	d6, [r2, #32]
 800d5b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d5b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d5b8:	f001 010f 	and.w	r1, r1, #15
 800d5bc:	2203      	movs	r2, #3
 800d5be:	48c0      	ldr	r0, [pc, #768]	@ (800d8c0 <_dtoa_r+0x618>)
 800d5c0:	2900      	cmp	r1, #0
 800d5c2:	f040 809d 	bne.w	800d700 <_dtoa_r+0x458>
 800d5c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d5ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d5ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d5d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d5d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5d8:	2900      	cmp	r1, #0
 800d5da:	f000 80c1 	beq.w	800d760 <_dtoa_r+0x4b8>
 800d5de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d5e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ea:	f140 80b9 	bpl.w	800d760 <_dtoa_r+0x4b8>
 800d5ee:	f1ba 0f00 	cmp.w	sl, #0
 800d5f2:	f000 80b5 	beq.w	800d760 <_dtoa_r+0x4b8>
 800d5f6:	f1bb 0f00 	cmp.w	fp, #0
 800d5fa:	dd31      	ble.n	800d660 <_dtoa_r+0x3b8>
 800d5fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d600:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d604:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d608:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800d60c:	9104      	str	r1, [sp, #16]
 800d60e:	3201      	adds	r2, #1
 800d610:	465c      	mov	r4, fp
 800d612:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d616:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d61a:	ee07 2a90 	vmov	s15, r2
 800d61e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d622:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d626:	ee15 2a90 	vmov	r2, s11
 800d62a:	ec51 0b15 	vmov	r0, r1, d5
 800d62e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d632:	2c00      	cmp	r4, #0
 800d634:	f040 8098 	bne.w	800d768 <_dtoa_r+0x4c0>
 800d638:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d63c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d640:	ec41 0b17 	vmov	d7, r0, r1
 800d644:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64c:	f300 8261 	bgt.w	800db12 <_dtoa_r+0x86a>
 800d650:	eeb1 7b47 	vneg.f64	d7, d7
 800d654:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65c:	f100 80f5 	bmi.w	800d84a <_dtoa_r+0x5a2>
 800d660:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d664:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d666:	2a00      	cmp	r2, #0
 800d668:	f2c0 812c 	blt.w	800d8c4 <_dtoa_r+0x61c>
 800d66c:	f1b8 0f0e 	cmp.w	r8, #14
 800d670:	f300 8128 	bgt.w	800d8c4 <_dtoa_r+0x61c>
 800d674:	4b91      	ldr	r3, [pc, #580]	@ (800d8bc <_dtoa_r+0x614>)
 800d676:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d67a:	ed93 6b00 	vldr	d6, [r3]
 800d67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d680:	2b00      	cmp	r3, #0
 800d682:	da03      	bge.n	800d68c <_dtoa_r+0x3e4>
 800d684:	f1ba 0f00 	cmp.w	sl, #0
 800d688:	f340 80d2 	ble.w	800d830 <_dtoa_r+0x588>
 800d68c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d690:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d694:	463e      	mov	r6, r7
 800d696:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d69a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d69e:	ee15 3a10 	vmov	r3, s10
 800d6a2:	3330      	adds	r3, #48	@ 0x30
 800d6a4:	f806 3b01 	strb.w	r3, [r6], #1
 800d6a8:	1bf3      	subs	r3, r6, r7
 800d6aa:	459a      	cmp	sl, r3
 800d6ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d6b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d6b4:	f040 80f8 	bne.w	800d8a8 <_dtoa_r+0x600>
 800d6b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d6bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c4:	f300 80dd 	bgt.w	800d882 <_dtoa_r+0x5da>
 800d6c8:	eeb4 7b46 	vcmp.f64	d7, d6
 800d6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d0:	d104      	bne.n	800d6dc <_dtoa_r+0x434>
 800d6d2:	ee15 3a10 	vmov	r3, s10
 800d6d6:	07db      	lsls	r3, r3, #31
 800d6d8:	f100 80d3 	bmi.w	800d882 <_dtoa_r+0x5da>
 800d6dc:	9901      	ldr	r1, [sp, #4]
 800d6de:	4648      	mov	r0, r9
 800d6e0:	f001 fa52 	bl	800eb88 <_Bfree>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d6e8:	7033      	strb	r3, [r6, #0]
 800d6ea:	f108 0301 	add.w	r3, r8, #1
 800d6ee:	6013      	str	r3, [r2, #0]
 800d6f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f000 8304 	beq.w	800dd00 <_dtoa_r+0xa58>
 800d6f8:	601e      	str	r6, [r3, #0]
 800d6fa:	e301      	b.n	800dd00 <_dtoa_r+0xa58>
 800d6fc:	2202      	movs	r2, #2
 800d6fe:	e75e      	b.n	800d5be <_dtoa_r+0x316>
 800d700:	07cc      	lsls	r4, r1, #31
 800d702:	d504      	bpl.n	800d70e <_dtoa_r+0x466>
 800d704:	ed90 6b00 	vldr	d6, [r0]
 800d708:	3201      	adds	r2, #1
 800d70a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d70e:	1049      	asrs	r1, r1, #1
 800d710:	3008      	adds	r0, #8
 800d712:	e755      	b.n	800d5c0 <_dtoa_r+0x318>
 800d714:	d022      	beq.n	800d75c <_dtoa_r+0x4b4>
 800d716:	f1c8 0100 	rsb	r1, r8, #0
 800d71a:	4a68      	ldr	r2, [pc, #416]	@ (800d8bc <_dtoa_r+0x614>)
 800d71c:	f001 000f 	and.w	r0, r1, #15
 800d720:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d724:	ed92 7b00 	vldr	d7, [r2]
 800d728:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d72c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d730:	4863      	ldr	r0, [pc, #396]	@ (800d8c0 <_dtoa_r+0x618>)
 800d732:	1109      	asrs	r1, r1, #4
 800d734:	2400      	movs	r4, #0
 800d736:	2202      	movs	r2, #2
 800d738:	b929      	cbnz	r1, 800d746 <_dtoa_r+0x49e>
 800d73a:	2c00      	cmp	r4, #0
 800d73c:	f43f af49 	beq.w	800d5d2 <_dtoa_r+0x32a>
 800d740:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d744:	e745      	b.n	800d5d2 <_dtoa_r+0x32a>
 800d746:	07ce      	lsls	r6, r1, #31
 800d748:	d505      	bpl.n	800d756 <_dtoa_r+0x4ae>
 800d74a:	ed90 6b00 	vldr	d6, [r0]
 800d74e:	3201      	adds	r2, #1
 800d750:	2401      	movs	r4, #1
 800d752:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d756:	1049      	asrs	r1, r1, #1
 800d758:	3008      	adds	r0, #8
 800d75a:	e7ed      	b.n	800d738 <_dtoa_r+0x490>
 800d75c:	2202      	movs	r2, #2
 800d75e:	e738      	b.n	800d5d2 <_dtoa_r+0x32a>
 800d760:	f8cd 8010 	str.w	r8, [sp, #16]
 800d764:	4654      	mov	r4, sl
 800d766:	e754      	b.n	800d612 <_dtoa_r+0x36a>
 800d768:	4a54      	ldr	r2, [pc, #336]	@ (800d8bc <_dtoa_r+0x614>)
 800d76a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d76e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d772:	9a08      	ldr	r2, [sp, #32]
 800d774:	ec41 0b17 	vmov	d7, r0, r1
 800d778:	443c      	add	r4, r7
 800d77a:	b34a      	cbz	r2, 800d7d0 <_dtoa_r+0x528>
 800d77c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d780:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d784:	463e      	mov	r6, r7
 800d786:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d78a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d78e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d792:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d796:	ee14 2a90 	vmov	r2, s9
 800d79a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d79e:	3230      	adds	r2, #48	@ 0x30
 800d7a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d7a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ac:	f806 2b01 	strb.w	r2, [r6], #1
 800d7b0:	d438      	bmi.n	800d824 <_dtoa_r+0x57c>
 800d7b2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d7b6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7be:	d462      	bmi.n	800d886 <_dtoa_r+0x5de>
 800d7c0:	42a6      	cmp	r6, r4
 800d7c2:	f43f af4d 	beq.w	800d660 <_dtoa_r+0x3b8>
 800d7c6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d7ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d7ce:	e7e0      	b.n	800d792 <_dtoa_r+0x4ea>
 800d7d0:	4621      	mov	r1, r4
 800d7d2:	463e      	mov	r6, r7
 800d7d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d7d8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d7dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d7e0:	ee14 2a90 	vmov	r2, s9
 800d7e4:	3230      	adds	r2, #48	@ 0x30
 800d7e6:	f806 2b01 	strb.w	r2, [r6], #1
 800d7ea:	42a6      	cmp	r6, r4
 800d7ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d7f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d7f4:	d119      	bne.n	800d82a <_dtoa_r+0x582>
 800d7f6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d7fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d7fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d806:	dc3e      	bgt.n	800d886 <_dtoa_r+0x5de>
 800d808:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d80c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d814:	f57f af24 	bpl.w	800d660 <_dtoa_r+0x3b8>
 800d818:	460e      	mov	r6, r1
 800d81a:	3901      	subs	r1, #1
 800d81c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d820:	2b30      	cmp	r3, #48	@ 0x30
 800d822:	d0f9      	beq.n	800d818 <_dtoa_r+0x570>
 800d824:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d828:	e758      	b.n	800d6dc <_dtoa_r+0x434>
 800d82a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d82e:	e7d5      	b.n	800d7dc <_dtoa_r+0x534>
 800d830:	d10b      	bne.n	800d84a <_dtoa_r+0x5a2>
 800d832:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d836:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d83a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d83e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d846:	f2c0 8161 	blt.w	800db0c <_dtoa_r+0x864>
 800d84a:	2400      	movs	r4, #0
 800d84c:	4625      	mov	r5, r4
 800d84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d850:	43db      	mvns	r3, r3
 800d852:	9304      	str	r3, [sp, #16]
 800d854:	463e      	mov	r6, r7
 800d856:	f04f 0800 	mov.w	r8, #0
 800d85a:	4621      	mov	r1, r4
 800d85c:	4648      	mov	r0, r9
 800d85e:	f001 f993 	bl	800eb88 <_Bfree>
 800d862:	2d00      	cmp	r5, #0
 800d864:	d0de      	beq.n	800d824 <_dtoa_r+0x57c>
 800d866:	f1b8 0f00 	cmp.w	r8, #0
 800d86a:	d005      	beq.n	800d878 <_dtoa_r+0x5d0>
 800d86c:	45a8      	cmp	r8, r5
 800d86e:	d003      	beq.n	800d878 <_dtoa_r+0x5d0>
 800d870:	4641      	mov	r1, r8
 800d872:	4648      	mov	r0, r9
 800d874:	f001 f988 	bl	800eb88 <_Bfree>
 800d878:	4629      	mov	r1, r5
 800d87a:	4648      	mov	r0, r9
 800d87c:	f001 f984 	bl	800eb88 <_Bfree>
 800d880:	e7d0      	b.n	800d824 <_dtoa_r+0x57c>
 800d882:	f8cd 8010 	str.w	r8, [sp, #16]
 800d886:	4633      	mov	r3, r6
 800d888:	461e      	mov	r6, r3
 800d88a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d88e:	2a39      	cmp	r2, #57	@ 0x39
 800d890:	d106      	bne.n	800d8a0 <_dtoa_r+0x5f8>
 800d892:	429f      	cmp	r7, r3
 800d894:	d1f8      	bne.n	800d888 <_dtoa_r+0x5e0>
 800d896:	9a04      	ldr	r2, [sp, #16]
 800d898:	3201      	adds	r2, #1
 800d89a:	9204      	str	r2, [sp, #16]
 800d89c:	2230      	movs	r2, #48	@ 0x30
 800d89e:	703a      	strb	r2, [r7, #0]
 800d8a0:	781a      	ldrb	r2, [r3, #0]
 800d8a2:	3201      	adds	r2, #1
 800d8a4:	701a      	strb	r2, [r3, #0]
 800d8a6:	e7bd      	b.n	800d824 <_dtoa_r+0x57c>
 800d8a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d8ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b4:	f47f aeef 	bne.w	800d696 <_dtoa_r+0x3ee>
 800d8b8:	e710      	b.n	800d6dc <_dtoa_r+0x434>
 800d8ba:	bf00      	nop
 800d8bc:	08010b00 	.word	0x08010b00
 800d8c0:	08010ad8 	.word	0x08010ad8
 800d8c4:	9908      	ldr	r1, [sp, #32]
 800d8c6:	2900      	cmp	r1, #0
 800d8c8:	f000 80e3 	beq.w	800da92 <_dtoa_r+0x7ea>
 800d8cc:	9907      	ldr	r1, [sp, #28]
 800d8ce:	2901      	cmp	r1, #1
 800d8d0:	f300 80c8 	bgt.w	800da64 <_dtoa_r+0x7bc>
 800d8d4:	2d00      	cmp	r5, #0
 800d8d6:	f000 80c1 	beq.w	800da5c <_dtoa_r+0x7b4>
 800d8da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d8de:	9e05      	ldr	r6, [sp, #20]
 800d8e0:	461c      	mov	r4, r3
 800d8e2:	9304      	str	r3, [sp, #16]
 800d8e4:	9b05      	ldr	r3, [sp, #20]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	9305      	str	r3, [sp, #20]
 800d8ea:	9b06      	ldr	r3, [sp, #24]
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	4413      	add	r3, r2
 800d8f0:	4648      	mov	r0, r9
 800d8f2:	9306      	str	r3, [sp, #24]
 800d8f4:	f001 fa46 	bl	800ed84 <__i2b>
 800d8f8:	9b04      	ldr	r3, [sp, #16]
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	b166      	cbz	r6, 800d918 <_dtoa_r+0x670>
 800d8fe:	9a06      	ldr	r2, [sp, #24]
 800d900:	2a00      	cmp	r2, #0
 800d902:	dd09      	ble.n	800d918 <_dtoa_r+0x670>
 800d904:	42b2      	cmp	r2, r6
 800d906:	9905      	ldr	r1, [sp, #20]
 800d908:	bfa8      	it	ge
 800d90a:	4632      	movge	r2, r6
 800d90c:	1a89      	subs	r1, r1, r2
 800d90e:	9105      	str	r1, [sp, #20]
 800d910:	9906      	ldr	r1, [sp, #24]
 800d912:	1ab6      	subs	r6, r6, r2
 800d914:	1a8a      	subs	r2, r1, r2
 800d916:	9206      	str	r2, [sp, #24]
 800d918:	b1fb      	cbz	r3, 800d95a <_dtoa_r+0x6b2>
 800d91a:	9a08      	ldr	r2, [sp, #32]
 800d91c:	2a00      	cmp	r2, #0
 800d91e:	f000 80bc 	beq.w	800da9a <_dtoa_r+0x7f2>
 800d922:	b19c      	cbz	r4, 800d94c <_dtoa_r+0x6a4>
 800d924:	4629      	mov	r1, r5
 800d926:	4622      	mov	r2, r4
 800d928:	4648      	mov	r0, r9
 800d92a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d92c:	f001 faea 	bl	800ef04 <__pow5mult>
 800d930:	9a01      	ldr	r2, [sp, #4]
 800d932:	4601      	mov	r1, r0
 800d934:	4605      	mov	r5, r0
 800d936:	4648      	mov	r0, r9
 800d938:	f001 fa3a 	bl	800edb0 <__multiply>
 800d93c:	9901      	ldr	r1, [sp, #4]
 800d93e:	9004      	str	r0, [sp, #16]
 800d940:	4648      	mov	r0, r9
 800d942:	f001 f921 	bl	800eb88 <_Bfree>
 800d946:	9a04      	ldr	r2, [sp, #16]
 800d948:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d94a:	9201      	str	r2, [sp, #4]
 800d94c:	1b1a      	subs	r2, r3, r4
 800d94e:	d004      	beq.n	800d95a <_dtoa_r+0x6b2>
 800d950:	9901      	ldr	r1, [sp, #4]
 800d952:	4648      	mov	r0, r9
 800d954:	f001 fad6 	bl	800ef04 <__pow5mult>
 800d958:	9001      	str	r0, [sp, #4]
 800d95a:	2101      	movs	r1, #1
 800d95c:	4648      	mov	r0, r9
 800d95e:	f001 fa11 	bl	800ed84 <__i2b>
 800d962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d964:	4604      	mov	r4, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 81d0 	beq.w	800dd0c <_dtoa_r+0xa64>
 800d96c:	461a      	mov	r2, r3
 800d96e:	4601      	mov	r1, r0
 800d970:	4648      	mov	r0, r9
 800d972:	f001 fac7 	bl	800ef04 <__pow5mult>
 800d976:	9b07      	ldr	r3, [sp, #28]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	4604      	mov	r4, r0
 800d97c:	f300 8095 	bgt.w	800daaa <_dtoa_r+0x802>
 800d980:	9b02      	ldr	r3, [sp, #8]
 800d982:	2b00      	cmp	r3, #0
 800d984:	f040 808b 	bne.w	800da9e <_dtoa_r+0x7f6>
 800d988:	9b03      	ldr	r3, [sp, #12]
 800d98a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d98e:	2a00      	cmp	r2, #0
 800d990:	f040 8087 	bne.w	800daa2 <_dtoa_r+0x7fa>
 800d994:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d998:	0d12      	lsrs	r2, r2, #20
 800d99a:	0512      	lsls	r2, r2, #20
 800d99c:	2a00      	cmp	r2, #0
 800d99e:	f000 8082 	beq.w	800daa6 <_dtoa_r+0x7fe>
 800d9a2:	9b05      	ldr	r3, [sp, #20]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	9305      	str	r3, [sp, #20]
 800d9a8:	9b06      	ldr	r3, [sp, #24]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	9306      	str	r3, [sp, #24]
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 81af 	beq.w	800dd18 <_dtoa_r+0xa70>
 800d9ba:	6922      	ldr	r2, [r4, #16]
 800d9bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d9c0:	6910      	ldr	r0, [r2, #16]
 800d9c2:	f001 f993 	bl	800ecec <__hi0bits>
 800d9c6:	f1c0 0020 	rsb	r0, r0, #32
 800d9ca:	9b06      	ldr	r3, [sp, #24]
 800d9cc:	4418      	add	r0, r3
 800d9ce:	f010 001f 	ands.w	r0, r0, #31
 800d9d2:	d076      	beq.n	800dac2 <_dtoa_r+0x81a>
 800d9d4:	f1c0 0220 	rsb	r2, r0, #32
 800d9d8:	2a04      	cmp	r2, #4
 800d9da:	dd69      	ble.n	800dab0 <_dtoa_r+0x808>
 800d9dc:	9b05      	ldr	r3, [sp, #20]
 800d9de:	f1c0 001c 	rsb	r0, r0, #28
 800d9e2:	4403      	add	r3, r0
 800d9e4:	9305      	str	r3, [sp, #20]
 800d9e6:	9b06      	ldr	r3, [sp, #24]
 800d9e8:	4406      	add	r6, r0
 800d9ea:	4403      	add	r3, r0
 800d9ec:	9306      	str	r3, [sp, #24]
 800d9ee:	9b05      	ldr	r3, [sp, #20]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	dd05      	ble.n	800da00 <_dtoa_r+0x758>
 800d9f4:	9901      	ldr	r1, [sp, #4]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	4648      	mov	r0, r9
 800d9fa:	f001 fadd 	bl	800efb8 <__lshift>
 800d9fe:	9001      	str	r0, [sp, #4]
 800da00:	9b06      	ldr	r3, [sp, #24]
 800da02:	2b00      	cmp	r3, #0
 800da04:	dd05      	ble.n	800da12 <_dtoa_r+0x76a>
 800da06:	4621      	mov	r1, r4
 800da08:	461a      	mov	r2, r3
 800da0a:	4648      	mov	r0, r9
 800da0c:	f001 fad4 	bl	800efb8 <__lshift>
 800da10:	4604      	mov	r4, r0
 800da12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da14:	2b00      	cmp	r3, #0
 800da16:	d056      	beq.n	800dac6 <_dtoa_r+0x81e>
 800da18:	9801      	ldr	r0, [sp, #4]
 800da1a:	4621      	mov	r1, r4
 800da1c:	f001 fb38 	bl	800f090 <__mcmp>
 800da20:	2800      	cmp	r0, #0
 800da22:	da50      	bge.n	800dac6 <_dtoa_r+0x81e>
 800da24:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800da28:	9304      	str	r3, [sp, #16]
 800da2a:	9901      	ldr	r1, [sp, #4]
 800da2c:	2300      	movs	r3, #0
 800da2e:	220a      	movs	r2, #10
 800da30:	4648      	mov	r0, r9
 800da32:	f001 f8cb 	bl	800ebcc <__multadd>
 800da36:	9b08      	ldr	r3, [sp, #32]
 800da38:	9001      	str	r0, [sp, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f000 816e 	beq.w	800dd1c <_dtoa_r+0xa74>
 800da40:	4629      	mov	r1, r5
 800da42:	2300      	movs	r3, #0
 800da44:	220a      	movs	r2, #10
 800da46:	4648      	mov	r0, r9
 800da48:	f001 f8c0 	bl	800ebcc <__multadd>
 800da4c:	f1bb 0f00 	cmp.w	fp, #0
 800da50:	4605      	mov	r5, r0
 800da52:	dc64      	bgt.n	800db1e <_dtoa_r+0x876>
 800da54:	9b07      	ldr	r3, [sp, #28]
 800da56:	2b02      	cmp	r3, #2
 800da58:	dc3e      	bgt.n	800dad8 <_dtoa_r+0x830>
 800da5a:	e060      	b.n	800db1e <_dtoa_r+0x876>
 800da5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800da62:	e73c      	b.n	800d8de <_dtoa_r+0x636>
 800da64:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800da68:	42a3      	cmp	r3, r4
 800da6a:	bfbf      	itttt	lt
 800da6c:	1ae2      	sublt	r2, r4, r3
 800da6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800da70:	189b      	addlt	r3, r3, r2
 800da72:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800da74:	bfae      	itee	ge
 800da76:	1b1c      	subge	r4, r3, r4
 800da78:	4623      	movlt	r3, r4
 800da7a:	2400      	movlt	r4, #0
 800da7c:	f1ba 0f00 	cmp.w	sl, #0
 800da80:	bfb5      	itete	lt
 800da82:	9a05      	ldrlt	r2, [sp, #20]
 800da84:	9e05      	ldrge	r6, [sp, #20]
 800da86:	eba2 060a 	sublt.w	r6, r2, sl
 800da8a:	4652      	movge	r2, sl
 800da8c:	bfb8      	it	lt
 800da8e:	2200      	movlt	r2, #0
 800da90:	e727      	b.n	800d8e2 <_dtoa_r+0x63a>
 800da92:	9e05      	ldr	r6, [sp, #20]
 800da94:	9d08      	ldr	r5, [sp, #32]
 800da96:	461c      	mov	r4, r3
 800da98:	e730      	b.n	800d8fc <_dtoa_r+0x654>
 800da9a:	461a      	mov	r2, r3
 800da9c:	e758      	b.n	800d950 <_dtoa_r+0x6a8>
 800da9e:	2300      	movs	r3, #0
 800daa0:	e786      	b.n	800d9b0 <_dtoa_r+0x708>
 800daa2:	9b02      	ldr	r3, [sp, #8]
 800daa4:	e784      	b.n	800d9b0 <_dtoa_r+0x708>
 800daa6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800daa8:	e783      	b.n	800d9b2 <_dtoa_r+0x70a>
 800daaa:	2300      	movs	r3, #0
 800daac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800daae:	e784      	b.n	800d9ba <_dtoa_r+0x712>
 800dab0:	d09d      	beq.n	800d9ee <_dtoa_r+0x746>
 800dab2:	9b05      	ldr	r3, [sp, #20]
 800dab4:	321c      	adds	r2, #28
 800dab6:	4413      	add	r3, r2
 800dab8:	9305      	str	r3, [sp, #20]
 800daba:	9b06      	ldr	r3, [sp, #24]
 800dabc:	4416      	add	r6, r2
 800dabe:	4413      	add	r3, r2
 800dac0:	e794      	b.n	800d9ec <_dtoa_r+0x744>
 800dac2:	4602      	mov	r2, r0
 800dac4:	e7f5      	b.n	800dab2 <_dtoa_r+0x80a>
 800dac6:	f1ba 0f00 	cmp.w	sl, #0
 800daca:	f8cd 8010 	str.w	r8, [sp, #16]
 800dace:	46d3      	mov	fp, sl
 800dad0:	dc21      	bgt.n	800db16 <_dtoa_r+0x86e>
 800dad2:	9b07      	ldr	r3, [sp, #28]
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	dd1e      	ble.n	800db16 <_dtoa_r+0x86e>
 800dad8:	f1bb 0f00 	cmp.w	fp, #0
 800dadc:	f47f aeb7 	bne.w	800d84e <_dtoa_r+0x5a6>
 800dae0:	4621      	mov	r1, r4
 800dae2:	465b      	mov	r3, fp
 800dae4:	2205      	movs	r2, #5
 800dae6:	4648      	mov	r0, r9
 800dae8:	f001 f870 	bl	800ebcc <__multadd>
 800daec:	4601      	mov	r1, r0
 800daee:	4604      	mov	r4, r0
 800daf0:	9801      	ldr	r0, [sp, #4]
 800daf2:	f001 facd 	bl	800f090 <__mcmp>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	f77f aea9 	ble.w	800d84e <_dtoa_r+0x5a6>
 800dafc:	463e      	mov	r6, r7
 800dafe:	2331      	movs	r3, #49	@ 0x31
 800db00:	f806 3b01 	strb.w	r3, [r6], #1
 800db04:	9b04      	ldr	r3, [sp, #16]
 800db06:	3301      	adds	r3, #1
 800db08:	9304      	str	r3, [sp, #16]
 800db0a:	e6a4      	b.n	800d856 <_dtoa_r+0x5ae>
 800db0c:	f8cd 8010 	str.w	r8, [sp, #16]
 800db10:	4654      	mov	r4, sl
 800db12:	4625      	mov	r5, r4
 800db14:	e7f2      	b.n	800dafc <_dtoa_r+0x854>
 800db16:	9b08      	ldr	r3, [sp, #32]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f000 8103 	beq.w	800dd24 <_dtoa_r+0xa7c>
 800db1e:	2e00      	cmp	r6, #0
 800db20:	dd05      	ble.n	800db2e <_dtoa_r+0x886>
 800db22:	4629      	mov	r1, r5
 800db24:	4632      	mov	r2, r6
 800db26:	4648      	mov	r0, r9
 800db28:	f001 fa46 	bl	800efb8 <__lshift>
 800db2c:	4605      	mov	r5, r0
 800db2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db30:	2b00      	cmp	r3, #0
 800db32:	d058      	beq.n	800dbe6 <_dtoa_r+0x93e>
 800db34:	6869      	ldr	r1, [r5, #4]
 800db36:	4648      	mov	r0, r9
 800db38:	f000 ffe6 	bl	800eb08 <_Balloc>
 800db3c:	4606      	mov	r6, r0
 800db3e:	b928      	cbnz	r0, 800db4c <_dtoa_r+0x8a4>
 800db40:	4b82      	ldr	r3, [pc, #520]	@ (800dd4c <_dtoa_r+0xaa4>)
 800db42:	4602      	mov	r2, r0
 800db44:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800db48:	f7ff bbc7 	b.w	800d2da <_dtoa_r+0x32>
 800db4c:	692a      	ldr	r2, [r5, #16]
 800db4e:	3202      	adds	r2, #2
 800db50:	0092      	lsls	r2, r2, #2
 800db52:	f105 010c 	add.w	r1, r5, #12
 800db56:	300c      	adds	r0, #12
 800db58:	f7ff fadb 	bl	800d112 <memcpy>
 800db5c:	2201      	movs	r2, #1
 800db5e:	4631      	mov	r1, r6
 800db60:	4648      	mov	r0, r9
 800db62:	f001 fa29 	bl	800efb8 <__lshift>
 800db66:	1c7b      	adds	r3, r7, #1
 800db68:	9305      	str	r3, [sp, #20]
 800db6a:	eb07 030b 	add.w	r3, r7, fp
 800db6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800db70:	9b02      	ldr	r3, [sp, #8]
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	46a8      	mov	r8, r5
 800db78:	9308      	str	r3, [sp, #32]
 800db7a:	4605      	mov	r5, r0
 800db7c:	9b05      	ldr	r3, [sp, #20]
 800db7e:	9801      	ldr	r0, [sp, #4]
 800db80:	4621      	mov	r1, r4
 800db82:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800db86:	f7ff fb07 	bl	800d198 <quorem>
 800db8a:	4641      	mov	r1, r8
 800db8c:	9002      	str	r0, [sp, #8]
 800db8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800db92:	9801      	ldr	r0, [sp, #4]
 800db94:	f001 fa7c 	bl	800f090 <__mcmp>
 800db98:	462a      	mov	r2, r5
 800db9a:	9006      	str	r0, [sp, #24]
 800db9c:	4621      	mov	r1, r4
 800db9e:	4648      	mov	r0, r9
 800dba0:	f001 fa92 	bl	800f0c8 <__mdiff>
 800dba4:	68c2      	ldr	r2, [r0, #12]
 800dba6:	4606      	mov	r6, r0
 800dba8:	b9fa      	cbnz	r2, 800dbea <_dtoa_r+0x942>
 800dbaa:	4601      	mov	r1, r0
 800dbac:	9801      	ldr	r0, [sp, #4]
 800dbae:	f001 fa6f 	bl	800f090 <__mcmp>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	4631      	mov	r1, r6
 800dbb6:	4648      	mov	r0, r9
 800dbb8:	920a      	str	r2, [sp, #40]	@ 0x28
 800dbba:	f000 ffe5 	bl	800eb88 <_Bfree>
 800dbbe:	9b07      	ldr	r3, [sp, #28]
 800dbc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbc2:	9e05      	ldr	r6, [sp, #20]
 800dbc4:	ea43 0102 	orr.w	r1, r3, r2
 800dbc8:	9b08      	ldr	r3, [sp, #32]
 800dbca:	4319      	orrs	r1, r3
 800dbcc:	d10f      	bne.n	800dbee <_dtoa_r+0x946>
 800dbce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dbd2:	d028      	beq.n	800dc26 <_dtoa_r+0x97e>
 800dbd4:	9b06      	ldr	r3, [sp, #24]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	dd02      	ble.n	800dbe0 <_dtoa_r+0x938>
 800dbda:	9b02      	ldr	r3, [sp, #8]
 800dbdc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800dbe0:	f88b a000 	strb.w	sl, [fp]
 800dbe4:	e639      	b.n	800d85a <_dtoa_r+0x5b2>
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	e7bd      	b.n	800db66 <_dtoa_r+0x8be>
 800dbea:	2201      	movs	r2, #1
 800dbec:	e7e2      	b.n	800dbb4 <_dtoa_r+0x90c>
 800dbee:	9b06      	ldr	r3, [sp, #24]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	db04      	blt.n	800dbfe <_dtoa_r+0x956>
 800dbf4:	9907      	ldr	r1, [sp, #28]
 800dbf6:	430b      	orrs	r3, r1
 800dbf8:	9908      	ldr	r1, [sp, #32]
 800dbfa:	430b      	orrs	r3, r1
 800dbfc:	d120      	bne.n	800dc40 <_dtoa_r+0x998>
 800dbfe:	2a00      	cmp	r2, #0
 800dc00:	ddee      	ble.n	800dbe0 <_dtoa_r+0x938>
 800dc02:	9901      	ldr	r1, [sp, #4]
 800dc04:	2201      	movs	r2, #1
 800dc06:	4648      	mov	r0, r9
 800dc08:	f001 f9d6 	bl	800efb8 <__lshift>
 800dc0c:	4621      	mov	r1, r4
 800dc0e:	9001      	str	r0, [sp, #4]
 800dc10:	f001 fa3e 	bl	800f090 <__mcmp>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	dc03      	bgt.n	800dc20 <_dtoa_r+0x978>
 800dc18:	d1e2      	bne.n	800dbe0 <_dtoa_r+0x938>
 800dc1a:	f01a 0f01 	tst.w	sl, #1
 800dc1e:	d0df      	beq.n	800dbe0 <_dtoa_r+0x938>
 800dc20:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dc24:	d1d9      	bne.n	800dbda <_dtoa_r+0x932>
 800dc26:	2339      	movs	r3, #57	@ 0x39
 800dc28:	f88b 3000 	strb.w	r3, [fp]
 800dc2c:	4633      	mov	r3, r6
 800dc2e:	461e      	mov	r6, r3
 800dc30:	3b01      	subs	r3, #1
 800dc32:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dc36:	2a39      	cmp	r2, #57	@ 0x39
 800dc38:	d053      	beq.n	800dce2 <_dtoa_r+0xa3a>
 800dc3a:	3201      	adds	r2, #1
 800dc3c:	701a      	strb	r2, [r3, #0]
 800dc3e:	e60c      	b.n	800d85a <_dtoa_r+0x5b2>
 800dc40:	2a00      	cmp	r2, #0
 800dc42:	dd07      	ble.n	800dc54 <_dtoa_r+0x9ac>
 800dc44:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dc48:	d0ed      	beq.n	800dc26 <_dtoa_r+0x97e>
 800dc4a:	f10a 0301 	add.w	r3, sl, #1
 800dc4e:	f88b 3000 	strb.w	r3, [fp]
 800dc52:	e602      	b.n	800d85a <_dtoa_r+0x5b2>
 800dc54:	9b05      	ldr	r3, [sp, #20]
 800dc56:	9a05      	ldr	r2, [sp, #20]
 800dc58:	f803 ac01 	strb.w	sl, [r3, #-1]
 800dc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d029      	beq.n	800dcb6 <_dtoa_r+0xa0e>
 800dc62:	9901      	ldr	r1, [sp, #4]
 800dc64:	2300      	movs	r3, #0
 800dc66:	220a      	movs	r2, #10
 800dc68:	4648      	mov	r0, r9
 800dc6a:	f000 ffaf 	bl	800ebcc <__multadd>
 800dc6e:	45a8      	cmp	r8, r5
 800dc70:	9001      	str	r0, [sp, #4]
 800dc72:	f04f 0300 	mov.w	r3, #0
 800dc76:	f04f 020a 	mov.w	r2, #10
 800dc7a:	4641      	mov	r1, r8
 800dc7c:	4648      	mov	r0, r9
 800dc7e:	d107      	bne.n	800dc90 <_dtoa_r+0x9e8>
 800dc80:	f000 ffa4 	bl	800ebcc <__multadd>
 800dc84:	4680      	mov	r8, r0
 800dc86:	4605      	mov	r5, r0
 800dc88:	9b05      	ldr	r3, [sp, #20]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	9305      	str	r3, [sp, #20]
 800dc8e:	e775      	b.n	800db7c <_dtoa_r+0x8d4>
 800dc90:	f000 ff9c 	bl	800ebcc <__multadd>
 800dc94:	4629      	mov	r1, r5
 800dc96:	4680      	mov	r8, r0
 800dc98:	2300      	movs	r3, #0
 800dc9a:	220a      	movs	r2, #10
 800dc9c:	4648      	mov	r0, r9
 800dc9e:	f000 ff95 	bl	800ebcc <__multadd>
 800dca2:	4605      	mov	r5, r0
 800dca4:	e7f0      	b.n	800dc88 <_dtoa_r+0x9e0>
 800dca6:	f1bb 0f00 	cmp.w	fp, #0
 800dcaa:	bfcc      	ite	gt
 800dcac:	465e      	movgt	r6, fp
 800dcae:	2601      	movle	r6, #1
 800dcb0:	443e      	add	r6, r7
 800dcb2:	f04f 0800 	mov.w	r8, #0
 800dcb6:	9901      	ldr	r1, [sp, #4]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	4648      	mov	r0, r9
 800dcbc:	f001 f97c 	bl	800efb8 <__lshift>
 800dcc0:	4621      	mov	r1, r4
 800dcc2:	9001      	str	r0, [sp, #4]
 800dcc4:	f001 f9e4 	bl	800f090 <__mcmp>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	dcaf      	bgt.n	800dc2c <_dtoa_r+0x984>
 800dccc:	d102      	bne.n	800dcd4 <_dtoa_r+0xa2c>
 800dcce:	f01a 0f01 	tst.w	sl, #1
 800dcd2:	d1ab      	bne.n	800dc2c <_dtoa_r+0x984>
 800dcd4:	4633      	mov	r3, r6
 800dcd6:	461e      	mov	r6, r3
 800dcd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcdc:	2a30      	cmp	r2, #48	@ 0x30
 800dcde:	d0fa      	beq.n	800dcd6 <_dtoa_r+0xa2e>
 800dce0:	e5bb      	b.n	800d85a <_dtoa_r+0x5b2>
 800dce2:	429f      	cmp	r7, r3
 800dce4:	d1a3      	bne.n	800dc2e <_dtoa_r+0x986>
 800dce6:	9b04      	ldr	r3, [sp, #16]
 800dce8:	3301      	adds	r3, #1
 800dcea:	9304      	str	r3, [sp, #16]
 800dcec:	2331      	movs	r3, #49	@ 0x31
 800dcee:	703b      	strb	r3, [r7, #0]
 800dcf0:	e5b3      	b.n	800d85a <_dtoa_r+0x5b2>
 800dcf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dcf4:	4f16      	ldr	r7, [pc, #88]	@ (800dd50 <_dtoa_r+0xaa8>)
 800dcf6:	b11b      	cbz	r3, 800dd00 <_dtoa_r+0xa58>
 800dcf8:	f107 0308 	add.w	r3, r7, #8
 800dcfc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800dcfe:	6013      	str	r3, [r2, #0]
 800dd00:	4638      	mov	r0, r7
 800dd02:	b011      	add	sp, #68	@ 0x44
 800dd04:	ecbd 8b02 	vpop	{d8}
 800dd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0c:	9b07      	ldr	r3, [sp, #28]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	f77f ae36 	ble.w	800d980 <_dtoa_r+0x6d8>
 800dd14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd18:	2001      	movs	r0, #1
 800dd1a:	e656      	b.n	800d9ca <_dtoa_r+0x722>
 800dd1c:	f1bb 0f00 	cmp.w	fp, #0
 800dd20:	f77f aed7 	ble.w	800dad2 <_dtoa_r+0x82a>
 800dd24:	463e      	mov	r6, r7
 800dd26:	9801      	ldr	r0, [sp, #4]
 800dd28:	4621      	mov	r1, r4
 800dd2a:	f7ff fa35 	bl	800d198 <quorem>
 800dd2e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800dd32:	f806 ab01 	strb.w	sl, [r6], #1
 800dd36:	1bf2      	subs	r2, r6, r7
 800dd38:	4593      	cmp	fp, r2
 800dd3a:	ddb4      	ble.n	800dca6 <_dtoa_r+0x9fe>
 800dd3c:	9901      	ldr	r1, [sp, #4]
 800dd3e:	2300      	movs	r3, #0
 800dd40:	220a      	movs	r2, #10
 800dd42:	4648      	mov	r0, r9
 800dd44:	f000 ff42 	bl	800ebcc <__multadd>
 800dd48:	9001      	str	r0, [sp, #4]
 800dd4a:	e7ec      	b.n	800dd26 <_dtoa_r+0xa7e>
 800dd4c:	080109ea 	.word	0x080109ea
 800dd50:	08010985 	.word	0x08010985

0800dd54 <_free_r>:
 800dd54:	b538      	push	{r3, r4, r5, lr}
 800dd56:	4605      	mov	r5, r0
 800dd58:	2900      	cmp	r1, #0
 800dd5a:	d041      	beq.n	800dde0 <_free_r+0x8c>
 800dd5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd60:	1f0c      	subs	r4, r1, #4
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	bfb8      	it	lt
 800dd66:	18e4      	addlt	r4, r4, r3
 800dd68:	f7fe f974 	bl	800c054 <__malloc_lock>
 800dd6c:	4a1d      	ldr	r2, [pc, #116]	@ (800dde4 <_free_r+0x90>)
 800dd6e:	6813      	ldr	r3, [r2, #0]
 800dd70:	b933      	cbnz	r3, 800dd80 <_free_r+0x2c>
 800dd72:	6063      	str	r3, [r4, #4]
 800dd74:	6014      	str	r4, [r2, #0]
 800dd76:	4628      	mov	r0, r5
 800dd78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd7c:	f7fe b970 	b.w	800c060 <__malloc_unlock>
 800dd80:	42a3      	cmp	r3, r4
 800dd82:	d908      	bls.n	800dd96 <_free_r+0x42>
 800dd84:	6820      	ldr	r0, [r4, #0]
 800dd86:	1821      	adds	r1, r4, r0
 800dd88:	428b      	cmp	r3, r1
 800dd8a:	bf01      	itttt	eq
 800dd8c:	6819      	ldreq	r1, [r3, #0]
 800dd8e:	685b      	ldreq	r3, [r3, #4]
 800dd90:	1809      	addeq	r1, r1, r0
 800dd92:	6021      	streq	r1, [r4, #0]
 800dd94:	e7ed      	b.n	800dd72 <_free_r+0x1e>
 800dd96:	461a      	mov	r2, r3
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	b10b      	cbz	r3, 800dda0 <_free_r+0x4c>
 800dd9c:	42a3      	cmp	r3, r4
 800dd9e:	d9fa      	bls.n	800dd96 <_free_r+0x42>
 800dda0:	6811      	ldr	r1, [r2, #0]
 800dda2:	1850      	adds	r0, r2, r1
 800dda4:	42a0      	cmp	r0, r4
 800dda6:	d10b      	bne.n	800ddc0 <_free_r+0x6c>
 800dda8:	6820      	ldr	r0, [r4, #0]
 800ddaa:	4401      	add	r1, r0
 800ddac:	1850      	adds	r0, r2, r1
 800ddae:	4283      	cmp	r3, r0
 800ddb0:	6011      	str	r1, [r2, #0]
 800ddb2:	d1e0      	bne.n	800dd76 <_free_r+0x22>
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	6053      	str	r3, [r2, #4]
 800ddba:	4408      	add	r0, r1
 800ddbc:	6010      	str	r0, [r2, #0]
 800ddbe:	e7da      	b.n	800dd76 <_free_r+0x22>
 800ddc0:	d902      	bls.n	800ddc8 <_free_r+0x74>
 800ddc2:	230c      	movs	r3, #12
 800ddc4:	602b      	str	r3, [r5, #0]
 800ddc6:	e7d6      	b.n	800dd76 <_free_r+0x22>
 800ddc8:	6820      	ldr	r0, [r4, #0]
 800ddca:	1821      	adds	r1, r4, r0
 800ddcc:	428b      	cmp	r3, r1
 800ddce:	bf04      	itt	eq
 800ddd0:	6819      	ldreq	r1, [r3, #0]
 800ddd2:	685b      	ldreq	r3, [r3, #4]
 800ddd4:	6063      	str	r3, [r4, #4]
 800ddd6:	bf04      	itt	eq
 800ddd8:	1809      	addeq	r1, r1, r0
 800ddda:	6021      	streq	r1, [r4, #0]
 800dddc:	6054      	str	r4, [r2, #4]
 800ddde:	e7ca      	b.n	800dd76 <_free_r+0x22>
 800dde0:	bd38      	pop	{r3, r4, r5, pc}
 800dde2:	bf00      	nop
 800dde4:	2000068c 	.word	0x2000068c

0800dde8 <rshift>:
 800dde8:	6903      	ldr	r3, [r0, #16]
 800ddea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ddee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddf2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ddf6:	f100 0414 	add.w	r4, r0, #20
 800ddfa:	dd45      	ble.n	800de88 <rshift+0xa0>
 800ddfc:	f011 011f 	ands.w	r1, r1, #31
 800de00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800de04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800de08:	d10c      	bne.n	800de24 <rshift+0x3c>
 800de0a:	f100 0710 	add.w	r7, r0, #16
 800de0e:	4629      	mov	r1, r5
 800de10:	42b1      	cmp	r1, r6
 800de12:	d334      	bcc.n	800de7e <rshift+0x96>
 800de14:	1a9b      	subs	r3, r3, r2
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	1eea      	subs	r2, r5, #3
 800de1a:	4296      	cmp	r6, r2
 800de1c:	bf38      	it	cc
 800de1e:	2300      	movcc	r3, #0
 800de20:	4423      	add	r3, r4
 800de22:	e015      	b.n	800de50 <rshift+0x68>
 800de24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800de28:	f1c1 0820 	rsb	r8, r1, #32
 800de2c:	40cf      	lsrs	r7, r1
 800de2e:	f105 0e04 	add.w	lr, r5, #4
 800de32:	46a1      	mov	r9, r4
 800de34:	4576      	cmp	r6, lr
 800de36:	46f4      	mov	ip, lr
 800de38:	d815      	bhi.n	800de66 <rshift+0x7e>
 800de3a:	1a9a      	subs	r2, r3, r2
 800de3c:	0092      	lsls	r2, r2, #2
 800de3e:	3a04      	subs	r2, #4
 800de40:	3501      	adds	r5, #1
 800de42:	42ae      	cmp	r6, r5
 800de44:	bf38      	it	cc
 800de46:	2200      	movcc	r2, #0
 800de48:	18a3      	adds	r3, r4, r2
 800de4a:	50a7      	str	r7, [r4, r2]
 800de4c:	b107      	cbz	r7, 800de50 <rshift+0x68>
 800de4e:	3304      	adds	r3, #4
 800de50:	1b1a      	subs	r2, r3, r4
 800de52:	42a3      	cmp	r3, r4
 800de54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800de58:	bf08      	it	eq
 800de5a:	2300      	moveq	r3, #0
 800de5c:	6102      	str	r2, [r0, #16]
 800de5e:	bf08      	it	eq
 800de60:	6143      	streq	r3, [r0, #20]
 800de62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de66:	f8dc c000 	ldr.w	ip, [ip]
 800de6a:	fa0c fc08 	lsl.w	ip, ip, r8
 800de6e:	ea4c 0707 	orr.w	r7, ip, r7
 800de72:	f849 7b04 	str.w	r7, [r9], #4
 800de76:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de7a:	40cf      	lsrs	r7, r1
 800de7c:	e7da      	b.n	800de34 <rshift+0x4c>
 800de7e:	f851 cb04 	ldr.w	ip, [r1], #4
 800de82:	f847 cf04 	str.w	ip, [r7, #4]!
 800de86:	e7c3      	b.n	800de10 <rshift+0x28>
 800de88:	4623      	mov	r3, r4
 800de8a:	e7e1      	b.n	800de50 <rshift+0x68>

0800de8c <__hexdig_fun>:
 800de8c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800de90:	2b09      	cmp	r3, #9
 800de92:	d802      	bhi.n	800de9a <__hexdig_fun+0xe>
 800de94:	3820      	subs	r0, #32
 800de96:	b2c0      	uxtb	r0, r0
 800de98:	4770      	bx	lr
 800de9a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800de9e:	2b05      	cmp	r3, #5
 800dea0:	d801      	bhi.n	800dea6 <__hexdig_fun+0x1a>
 800dea2:	3847      	subs	r0, #71	@ 0x47
 800dea4:	e7f7      	b.n	800de96 <__hexdig_fun+0xa>
 800dea6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800deaa:	2b05      	cmp	r3, #5
 800deac:	d801      	bhi.n	800deb2 <__hexdig_fun+0x26>
 800deae:	3827      	subs	r0, #39	@ 0x27
 800deb0:	e7f1      	b.n	800de96 <__hexdig_fun+0xa>
 800deb2:	2000      	movs	r0, #0
 800deb4:	4770      	bx	lr
	...

0800deb8 <__gethex>:
 800deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	b085      	sub	sp, #20
 800debe:	468a      	mov	sl, r1
 800dec0:	9302      	str	r3, [sp, #8]
 800dec2:	680b      	ldr	r3, [r1, #0]
 800dec4:	9001      	str	r0, [sp, #4]
 800dec6:	4690      	mov	r8, r2
 800dec8:	1c9c      	adds	r4, r3, #2
 800deca:	46a1      	mov	r9, r4
 800decc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ded0:	2830      	cmp	r0, #48	@ 0x30
 800ded2:	d0fa      	beq.n	800deca <__gethex+0x12>
 800ded4:	eba9 0303 	sub.w	r3, r9, r3
 800ded8:	f1a3 0b02 	sub.w	fp, r3, #2
 800dedc:	f7ff ffd6 	bl	800de8c <__hexdig_fun>
 800dee0:	4605      	mov	r5, r0
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d168      	bne.n	800dfb8 <__gethex+0x100>
 800dee6:	49a0      	ldr	r1, [pc, #640]	@ (800e168 <__gethex+0x2b0>)
 800dee8:	2201      	movs	r2, #1
 800deea:	4648      	mov	r0, r9
 800deec:	f7ff f8b6 	bl	800d05c <strncmp>
 800def0:	4607      	mov	r7, r0
 800def2:	2800      	cmp	r0, #0
 800def4:	d167      	bne.n	800dfc6 <__gethex+0x10e>
 800def6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800defa:	4626      	mov	r6, r4
 800defc:	f7ff ffc6 	bl	800de8c <__hexdig_fun>
 800df00:	2800      	cmp	r0, #0
 800df02:	d062      	beq.n	800dfca <__gethex+0x112>
 800df04:	4623      	mov	r3, r4
 800df06:	7818      	ldrb	r0, [r3, #0]
 800df08:	2830      	cmp	r0, #48	@ 0x30
 800df0a:	4699      	mov	r9, r3
 800df0c:	f103 0301 	add.w	r3, r3, #1
 800df10:	d0f9      	beq.n	800df06 <__gethex+0x4e>
 800df12:	f7ff ffbb 	bl	800de8c <__hexdig_fun>
 800df16:	fab0 f580 	clz	r5, r0
 800df1a:	096d      	lsrs	r5, r5, #5
 800df1c:	f04f 0b01 	mov.w	fp, #1
 800df20:	464a      	mov	r2, r9
 800df22:	4616      	mov	r6, r2
 800df24:	3201      	adds	r2, #1
 800df26:	7830      	ldrb	r0, [r6, #0]
 800df28:	f7ff ffb0 	bl	800de8c <__hexdig_fun>
 800df2c:	2800      	cmp	r0, #0
 800df2e:	d1f8      	bne.n	800df22 <__gethex+0x6a>
 800df30:	498d      	ldr	r1, [pc, #564]	@ (800e168 <__gethex+0x2b0>)
 800df32:	2201      	movs	r2, #1
 800df34:	4630      	mov	r0, r6
 800df36:	f7ff f891 	bl	800d05c <strncmp>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d13f      	bne.n	800dfbe <__gethex+0x106>
 800df3e:	b944      	cbnz	r4, 800df52 <__gethex+0x9a>
 800df40:	1c74      	adds	r4, r6, #1
 800df42:	4622      	mov	r2, r4
 800df44:	4616      	mov	r6, r2
 800df46:	3201      	adds	r2, #1
 800df48:	7830      	ldrb	r0, [r6, #0]
 800df4a:	f7ff ff9f 	bl	800de8c <__hexdig_fun>
 800df4e:	2800      	cmp	r0, #0
 800df50:	d1f8      	bne.n	800df44 <__gethex+0x8c>
 800df52:	1ba4      	subs	r4, r4, r6
 800df54:	00a7      	lsls	r7, r4, #2
 800df56:	7833      	ldrb	r3, [r6, #0]
 800df58:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800df5c:	2b50      	cmp	r3, #80	@ 0x50
 800df5e:	d13e      	bne.n	800dfde <__gethex+0x126>
 800df60:	7873      	ldrb	r3, [r6, #1]
 800df62:	2b2b      	cmp	r3, #43	@ 0x2b
 800df64:	d033      	beq.n	800dfce <__gethex+0x116>
 800df66:	2b2d      	cmp	r3, #45	@ 0x2d
 800df68:	d034      	beq.n	800dfd4 <__gethex+0x11c>
 800df6a:	1c71      	adds	r1, r6, #1
 800df6c:	2400      	movs	r4, #0
 800df6e:	7808      	ldrb	r0, [r1, #0]
 800df70:	f7ff ff8c 	bl	800de8c <__hexdig_fun>
 800df74:	1e43      	subs	r3, r0, #1
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b18      	cmp	r3, #24
 800df7a:	d830      	bhi.n	800dfde <__gethex+0x126>
 800df7c:	f1a0 0210 	sub.w	r2, r0, #16
 800df80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df84:	f7ff ff82 	bl	800de8c <__hexdig_fun>
 800df88:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800df8c:	fa5f fc8c 	uxtb.w	ip, ip
 800df90:	f1bc 0f18 	cmp.w	ip, #24
 800df94:	f04f 030a 	mov.w	r3, #10
 800df98:	d91e      	bls.n	800dfd8 <__gethex+0x120>
 800df9a:	b104      	cbz	r4, 800df9e <__gethex+0xe6>
 800df9c:	4252      	negs	r2, r2
 800df9e:	4417      	add	r7, r2
 800dfa0:	f8ca 1000 	str.w	r1, [sl]
 800dfa4:	b1ed      	cbz	r5, 800dfe2 <__gethex+0x12a>
 800dfa6:	f1bb 0f00 	cmp.w	fp, #0
 800dfaa:	bf0c      	ite	eq
 800dfac:	2506      	moveq	r5, #6
 800dfae:	2500      	movne	r5, #0
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	b005      	add	sp, #20
 800dfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb8:	2500      	movs	r5, #0
 800dfba:	462c      	mov	r4, r5
 800dfbc:	e7b0      	b.n	800df20 <__gethex+0x68>
 800dfbe:	2c00      	cmp	r4, #0
 800dfc0:	d1c7      	bne.n	800df52 <__gethex+0x9a>
 800dfc2:	4627      	mov	r7, r4
 800dfc4:	e7c7      	b.n	800df56 <__gethex+0x9e>
 800dfc6:	464e      	mov	r6, r9
 800dfc8:	462f      	mov	r7, r5
 800dfca:	2501      	movs	r5, #1
 800dfcc:	e7c3      	b.n	800df56 <__gethex+0x9e>
 800dfce:	2400      	movs	r4, #0
 800dfd0:	1cb1      	adds	r1, r6, #2
 800dfd2:	e7cc      	b.n	800df6e <__gethex+0xb6>
 800dfd4:	2401      	movs	r4, #1
 800dfd6:	e7fb      	b.n	800dfd0 <__gethex+0x118>
 800dfd8:	fb03 0002 	mla	r0, r3, r2, r0
 800dfdc:	e7ce      	b.n	800df7c <__gethex+0xc4>
 800dfde:	4631      	mov	r1, r6
 800dfe0:	e7de      	b.n	800dfa0 <__gethex+0xe8>
 800dfe2:	eba6 0309 	sub.w	r3, r6, r9
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	4629      	mov	r1, r5
 800dfea:	2b07      	cmp	r3, #7
 800dfec:	dc0a      	bgt.n	800e004 <__gethex+0x14c>
 800dfee:	9801      	ldr	r0, [sp, #4]
 800dff0:	f000 fd8a 	bl	800eb08 <_Balloc>
 800dff4:	4604      	mov	r4, r0
 800dff6:	b940      	cbnz	r0, 800e00a <__gethex+0x152>
 800dff8:	4b5c      	ldr	r3, [pc, #368]	@ (800e16c <__gethex+0x2b4>)
 800dffa:	4602      	mov	r2, r0
 800dffc:	21e4      	movs	r1, #228	@ 0xe4
 800dffe:	485c      	ldr	r0, [pc, #368]	@ (800e170 <__gethex+0x2b8>)
 800e000:	f7ff f8ac 	bl	800d15c <__assert_func>
 800e004:	3101      	adds	r1, #1
 800e006:	105b      	asrs	r3, r3, #1
 800e008:	e7ef      	b.n	800dfea <__gethex+0x132>
 800e00a:	f100 0a14 	add.w	sl, r0, #20
 800e00e:	2300      	movs	r3, #0
 800e010:	4655      	mov	r5, sl
 800e012:	469b      	mov	fp, r3
 800e014:	45b1      	cmp	r9, r6
 800e016:	d337      	bcc.n	800e088 <__gethex+0x1d0>
 800e018:	f845 bb04 	str.w	fp, [r5], #4
 800e01c:	eba5 050a 	sub.w	r5, r5, sl
 800e020:	10ad      	asrs	r5, r5, #2
 800e022:	6125      	str	r5, [r4, #16]
 800e024:	4658      	mov	r0, fp
 800e026:	f000 fe61 	bl	800ecec <__hi0bits>
 800e02a:	016d      	lsls	r5, r5, #5
 800e02c:	f8d8 6000 	ldr.w	r6, [r8]
 800e030:	1a2d      	subs	r5, r5, r0
 800e032:	42b5      	cmp	r5, r6
 800e034:	dd54      	ble.n	800e0e0 <__gethex+0x228>
 800e036:	1bad      	subs	r5, r5, r6
 800e038:	4629      	mov	r1, r5
 800e03a:	4620      	mov	r0, r4
 800e03c:	f001 f9f2 	bl	800f424 <__any_on>
 800e040:	4681      	mov	r9, r0
 800e042:	b178      	cbz	r0, 800e064 <__gethex+0x1ac>
 800e044:	1e6b      	subs	r3, r5, #1
 800e046:	1159      	asrs	r1, r3, #5
 800e048:	f003 021f 	and.w	r2, r3, #31
 800e04c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e050:	f04f 0901 	mov.w	r9, #1
 800e054:	fa09 f202 	lsl.w	r2, r9, r2
 800e058:	420a      	tst	r2, r1
 800e05a:	d003      	beq.n	800e064 <__gethex+0x1ac>
 800e05c:	454b      	cmp	r3, r9
 800e05e:	dc36      	bgt.n	800e0ce <__gethex+0x216>
 800e060:	f04f 0902 	mov.w	r9, #2
 800e064:	4629      	mov	r1, r5
 800e066:	4620      	mov	r0, r4
 800e068:	f7ff febe 	bl	800dde8 <rshift>
 800e06c:	442f      	add	r7, r5
 800e06e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e072:	42bb      	cmp	r3, r7
 800e074:	da42      	bge.n	800e0fc <__gethex+0x244>
 800e076:	9801      	ldr	r0, [sp, #4]
 800e078:	4621      	mov	r1, r4
 800e07a:	f000 fd85 	bl	800eb88 <_Bfree>
 800e07e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e080:	2300      	movs	r3, #0
 800e082:	6013      	str	r3, [r2, #0]
 800e084:	25a3      	movs	r5, #163	@ 0xa3
 800e086:	e793      	b.n	800dfb0 <__gethex+0xf8>
 800e088:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e08c:	2a2e      	cmp	r2, #46	@ 0x2e
 800e08e:	d012      	beq.n	800e0b6 <__gethex+0x1fe>
 800e090:	2b20      	cmp	r3, #32
 800e092:	d104      	bne.n	800e09e <__gethex+0x1e6>
 800e094:	f845 bb04 	str.w	fp, [r5], #4
 800e098:	f04f 0b00 	mov.w	fp, #0
 800e09c:	465b      	mov	r3, fp
 800e09e:	7830      	ldrb	r0, [r6, #0]
 800e0a0:	9303      	str	r3, [sp, #12]
 800e0a2:	f7ff fef3 	bl	800de8c <__hexdig_fun>
 800e0a6:	9b03      	ldr	r3, [sp, #12]
 800e0a8:	f000 000f 	and.w	r0, r0, #15
 800e0ac:	4098      	lsls	r0, r3
 800e0ae:	ea4b 0b00 	orr.w	fp, fp, r0
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	e7ae      	b.n	800e014 <__gethex+0x15c>
 800e0b6:	45b1      	cmp	r9, r6
 800e0b8:	d8ea      	bhi.n	800e090 <__gethex+0x1d8>
 800e0ba:	492b      	ldr	r1, [pc, #172]	@ (800e168 <__gethex+0x2b0>)
 800e0bc:	9303      	str	r3, [sp, #12]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	f7fe ffcb 	bl	800d05c <strncmp>
 800e0c6:	9b03      	ldr	r3, [sp, #12]
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d1e1      	bne.n	800e090 <__gethex+0x1d8>
 800e0cc:	e7a2      	b.n	800e014 <__gethex+0x15c>
 800e0ce:	1ea9      	subs	r1, r5, #2
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f001 f9a7 	bl	800f424 <__any_on>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d0c2      	beq.n	800e060 <__gethex+0x1a8>
 800e0da:	f04f 0903 	mov.w	r9, #3
 800e0de:	e7c1      	b.n	800e064 <__gethex+0x1ac>
 800e0e0:	da09      	bge.n	800e0f6 <__gethex+0x23e>
 800e0e2:	1b75      	subs	r5, r6, r5
 800e0e4:	4621      	mov	r1, r4
 800e0e6:	9801      	ldr	r0, [sp, #4]
 800e0e8:	462a      	mov	r2, r5
 800e0ea:	f000 ff65 	bl	800efb8 <__lshift>
 800e0ee:	1b7f      	subs	r7, r7, r5
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	f100 0a14 	add.w	sl, r0, #20
 800e0f6:	f04f 0900 	mov.w	r9, #0
 800e0fa:	e7b8      	b.n	800e06e <__gethex+0x1b6>
 800e0fc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e100:	42bd      	cmp	r5, r7
 800e102:	dd6f      	ble.n	800e1e4 <__gethex+0x32c>
 800e104:	1bed      	subs	r5, r5, r7
 800e106:	42ae      	cmp	r6, r5
 800e108:	dc34      	bgt.n	800e174 <__gethex+0x2bc>
 800e10a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e10e:	2b02      	cmp	r3, #2
 800e110:	d022      	beq.n	800e158 <__gethex+0x2a0>
 800e112:	2b03      	cmp	r3, #3
 800e114:	d024      	beq.n	800e160 <__gethex+0x2a8>
 800e116:	2b01      	cmp	r3, #1
 800e118:	d115      	bne.n	800e146 <__gethex+0x28e>
 800e11a:	42ae      	cmp	r6, r5
 800e11c:	d113      	bne.n	800e146 <__gethex+0x28e>
 800e11e:	2e01      	cmp	r6, #1
 800e120:	d10b      	bne.n	800e13a <__gethex+0x282>
 800e122:	9a02      	ldr	r2, [sp, #8]
 800e124:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e128:	6013      	str	r3, [r2, #0]
 800e12a:	2301      	movs	r3, #1
 800e12c:	6123      	str	r3, [r4, #16]
 800e12e:	f8ca 3000 	str.w	r3, [sl]
 800e132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e134:	2562      	movs	r5, #98	@ 0x62
 800e136:	601c      	str	r4, [r3, #0]
 800e138:	e73a      	b.n	800dfb0 <__gethex+0xf8>
 800e13a:	1e71      	subs	r1, r6, #1
 800e13c:	4620      	mov	r0, r4
 800e13e:	f001 f971 	bl	800f424 <__any_on>
 800e142:	2800      	cmp	r0, #0
 800e144:	d1ed      	bne.n	800e122 <__gethex+0x26a>
 800e146:	9801      	ldr	r0, [sp, #4]
 800e148:	4621      	mov	r1, r4
 800e14a:	f000 fd1d 	bl	800eb88 <_Bfree>
 800e14e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e150:	2300      	movs	r3, #0
 800e152:	6013      	str	r3, [r2, #0]
 800e154:	2550      	movs	r5, #80	@ 0x50
 800e156:	e72b      	b.n	800dfb0 <__gethex+0xf8>
 800e158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1f3      	bne.n	800e146 <__gethex+0x28e>
 800e15e:	e7e0      	b.n	800e122 <__gethex+0x26a>
 800e160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1dd      	bne.n	800e122 <__gethex+0x26a>
 800e166:	e7ee      	b.n	800e146 <__gethex+0x28e>
 800e168:	080107ec 	.word	0x080107ec
 800e16c:	080109ea 	.word	0x080109ea
 800e170:	080109fb 	.word	0x080109fb
 800e174:	1e6f      	subs	r7, r5, #1
 800e176:	f1b9 0f00 	cmp.w	r9, #0
 800e17a:	d130      	bne.n	800e1de <__gethex+0x326>
 800e17c:	b127      	cbz	r7, 800e188 <__gethex+0x2d0>
 800e17e:	4639      	mov	r1, r7
 800e180:	4620      	mov	r0, r4
 800e182:	f001 f94f 	bl	800f424 <__any_on>
 800e186:	4681      	mov	r9, r0
 800e188:	117a      	asrs	r2, r7, #5
 800e18a:	2301      	movs	r3, #1
 800e18c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e190:	f007 071f 	and.w	r7, r7, #31
 800e194:	40bb      	lsls	r3, r7
 800e196:	4213      	tst	r3, r2
 800e198:	4629      	mov	r1, r5
 800e19a:	4620      	mov	r0, r4
 800e19c:	bf18      	it	ne
 800e19e:	f049 0902 	orrne.w	r9, r9, #2
 800e1a2:	f7ff fe21 	bl	800dde8 <rshift>
 800e1a6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e1aa:	1b76      	subs	r6, r6, r5
 800e1ac:	2502      	movs	r5, #2
 800e1ae:	f1b9 0f00 	cmp.w	r9, #0
 800e1b2:	d047      	beq.n	800e244 <__gethex+0x38c>
 800e1b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e1b8:	2b02      	cmp	r3, #2
 800e1ba:	d015      	beq.n	800e1e8 <__gethex+0x330>
 800e1bc:	2b03      	cmp	r3, #3
 800e1be:	d017      	beq.n	800e1f0 <__gethex+0x338>
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d109      	bne.n	800e1d8 <__gethex+0x320>
 800e1c4:	f019 0f02 	tst.w	r9, #2
 800e1c8:	d006      	beq.n	800e1d8 <__gethex+0x320>
 800e1ca:	f8da 3000 	ldr.w	r3, [sl]
 800e1ce:	ea49 0903 	orr.w	r9, r9, r3
 800e1d2:	f019 0f01 	tst.w	r9, #1
 800e1d6:	d10e      	bne.n	800e1f6 <__gethex+0x33e>
 800e1d8:	f045 0510 	orr.w	r5, r5, #16
 800e1dc:	e032      	b.n	800e244 <__gethex+0x38c>
 800e1de:	f04f 0901 	mov.w	r9, #1
 800e1e2:	e7d1      	b.n	800e188 <__gethex+0x2d0>
 800e1e4:	2501      	movs	r5, #1
 800e1e6:	e7e2      	b.n	800e1ae <__gethex+0x2f6>
 800e1e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1ea:	f1c3 0301 	rsb	r3, r3, #1
 800e1ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d0f0      	beq.n	800e1d8 <__gethex+0x320>
 800e1f6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e1fa:	f104 0314 	add.w	r3, r4, #20
 800e1fe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e202:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e206:	f04f 0c00 	mov.w	ip, #0
 800e20a:	4618      	mov	r0, r3
 800e20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e210:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800e214:	d01b      	beq.n	800e24e <__gethex+0x396>
 800e216:	3201      	adds	r2, #1
 800e218:	6002      	str	r2, [r0, #0]
 800e21a:	2d02      	cmp	r5, #2
 800e21c:	f104 0314 	add.w	r3, r4, #20
 800e220:	d13c      	bne.n	800e29c <__gethex+0x3e4>
 800e222:	f8d8 2000 	ldr.w	r2, [r8]
 800e226:	3a01      	subs	r2, #1
 800e228:	42b2      	cmp	r2, r6
 800e22a:	d109      	bne.n	800e240 <__gethex+0x388>
 800e22c:	1171      	asrs	r1, r6, #5
 800e22e:	2201      	movs	r2, #1
 800e230:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e234:	f006 061f 	and.w	r6, r6, #31
 800e238:	fa02 f606 	lsl.w	r6, r2, r6
 800e23c:	421e      	tst	r6, r3
 800e23e:	d13a      	bne.n	800e2b6 <__gethex+0x3fe>
 800e240:	f045 0520 	orr.w	r5, r5, #32
 800e244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e246:	601c      	str	r4, [r3, #0]
 800e248:	9b02      	ldr	r3, [sp, #8]
 800e24a:	601f      	str	r7, [r3, #0]
 800e24c:	e6b0      	b.n	800dfb0 <__gethex+0xf8>
 800e24e:	4299      	cmp	r1, r3
 800e250:	f843 cc04 	str.w	ip, [r3, #-4]
 800e254:	d8d9      	bhi.n	800e20a <__gethex+0x352>
 800e256:	68a3      	ldr	r3, [r4, #8]
 800e258:	459b      	cmp	fp, r3
 800e25a:	db17      	blt.n	800e28c <__gethex+0x3d4>
 800e25c:	6861      	ldr	r1, [r4, #4]
 800e25e:	9801      	ldr	r0, [sp, #4]
 800e260:	3101      	adds	r1, #1
 800e262:	f000 fc51 	bl	800eb08 <_Balloc>
 800e266:	4681      	mov	r9, r0
 800e268:	b918      	cbnz	r0, 800e272 <__gethex+0x3ba>
 800e26a:	4b1a      	ldr	r3, [pc, #104]	@ (800e2d4 <__gethex+0x41c>)
 800e26c:	4602      	mov	r2, r0
 800e26e:	2184      	movs	r1, #132	@ 0x84
 800e270:	e6c5      	b.n	800dffe <__gethex+0x146>
 800e272:	6922      	ldr	r2, [r4, #16]
 800e274:	3202      	adds	r2, #2
 800e276:	f104 010c 	add.w	r1, r4, #12
 800e27a:	0092      	lsls	r2, r2, #2
 800e27c:	300c      	adds	r0, #12
 800e27e:	f7fe ff48 	bl	800d112 <memcpy>
 800e282:	4621      	mov	r1, r4
 800e284:	9801      	ldr	r0, [sp, #4]
 800e286:	f000 fc7f 	bl	800eb88 <_Bfree>
 800e28a:	464c      	mov	r4, r9
 800e28c:	6923      	ldr	r3, [r4, #16]
 800e28e:	1c5a      	adds	r2, r3, #1
 800e290:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e294:	6122      	str	r2, [r4, #16]
 800e296:	2201      	movs	r2, #1
 800e298:	615a      	str	r2, [r3, #20]
 800e29a:	e7be      	b.n	800e21a <__gethex+0x362>
 800e29c:	6922      	ldr	r2, [r4, #16]
 800e29e:	455a      	cmp	r2, fp
 800e2a0:	dd0b      	ble.n	800e2ba <__gethex+0x402>
 800e2a2:	2101      	movs	r1, #1
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f7ff fd9f 	bl	800dde8 <rshift>
 800e2aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e2ae:	3701      	adds	r7, #1
 800e2b0:	42bb      	cmp	r3, r7
 800e2b2:	f6ff aee0 	blt.w	800e076 <__gethex+0x1be>
 800e2b6:	2501      	movs	r5, #1
 800e2b8:	e7c2      	b.n	800e240 <__gethex+0x388>
 800e2ba:	f016 061f 	ands.w	r6, r6, #31
 800e2be:	d0fa      	beq.n	800e2b6 <__gethex+0x3fe>
 800e2c0:	4453      	add	r3, sl
 800e2c2:	f1c6 0620 	rsb	r6, r6, #32
 800e2c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e2ca:	f000 fd0f 	bl	800ecec <__hi0bits>
 800e2ce:	42b0      	cmp	r0, r6
 800e2d0:	dbe7      	blt.n	800e2a2 <__gethex+0x3ea>
 800e2d2:	e7f0      	b.n	800e2b6 <__gethex+0x3fe>
 800e2d4:	080109ea 	.word	0x080109ea

0800e2d8 <L_shift>:
 800e2d8:	f1c2 0208 	rsb	r2, r2, #8
 800e2dc:	0092      	lsls	r2, r2, #2
 800e2de:	b570      	push	{r4, r5, r6, lr}
 800e2e0:	f1c2 0620 	rsb	r6, r2, #32
 800e2e4:	6843      	ldr	r3, [r0, #4]
 800e2e6:	6804      	ldr	r4, [r0, #0]
 800e2e8:	fa03 f506 	lsl.w	r5, r3, r6
 800e2ec:	432c      	orrs	r4, r5
 800e2ee:	40d3      	lsrs	r3, r2
 800e2f0:	6004      	str	r4, [r0, #0]
 800e2f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e2f6:	4288      	cmp	r0, r1
 800e2f8:	d3f4      	bcc.n	800e2e4 <L_shift+0xc>
 800e2fa:	bd70      	pop	{r4, r5, r6, pc}

0800e2fc <__match>:
 800e2fc:	b530      	push	{r4, r5, lr}
 800e2fe:	6803      	ldr	r3, [r0, #0]
 800e300:	3301      	adds	r3, #1
 800e302:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e306:	b914      	cbnz	r4, 800e30e <__match+0x12>
 800e308:	6003      	str	r3, [r0, #0]
 800e30a:	2001      	movs	r0, #1
 800e30c:	bd30      	pop	{r4, r5, pc}
 800e30e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e312:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e316:	2d19      	cmp	r5, #25
 800e318:	bf98      	it	ls
 800e31a:	3220      	addls	r2, #32
 800e31c:	42a2      	cmp	r2, r4
 800e31e:	d0f0      	beq.n	800e302 <__match+0x6>
 800e320:	2000      	movs	r0, #0
 800e322:	e7f3      	b.n	800e30c <__match+0x10>

0800e324 <__hexnan>:
 800e324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e328:	680b      	ldr	r3, [r1, #0]
 800e32a:	6801      	ldr	r1, [r0, #0]
 800e32c:	115e      	asrs	r6, r3, #5
 800e32e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e332:	f013 031f 	ands.w	r3, r3, #31
 800e336:	b087      	sub	sp, #28
 800e338:	bf18      	it	ne
 800e33a:	3604      	addne	r6, #4
 800e33c:	2500      	movs	r5, #0
 800e33e:	1f37      	subs	r7, r6, #4
 800e340:	4682      	mov	sl, r0
 800e342:	4690      	mov	r8, r2
 800e344:	9301      	str	r3, [sp, #4]
 800e346:	f846 5c04 	str.w	r5, [r6, #-4]
 800e34a:	46b9      	mov	r9, r7
 800e34c:	463c      	mov	r4, r7
 800e34e:	9502      	str	r5, [sp, #8]
 800e350:	46ab      	mov	fp, r5
 800e352:	784a      	ldrb	r2, [r1, #1]
 800e354:	1c4b      	adds	r3, r1, #1
 800e356:	9303      	str	r3, [sp, #12]
 800e358:	b342      	cbz	r2, 800e3ac <__hexnan+0x88>
 800e35a:	4610      	mov	r0, r2
 800e35c:	9105      	str	r1, [sp, #20]
 800e35e:	9204      	str	r2, [sp, #16]
 800e360:	f7ff fd94 	bl	800de8c <__hexdig_fun>
 800e364:	2800      	cmp	r0, #0
 800e366:	d151      	bne.n	800e40c <__hexnan+0xe8>
 800e368:	9a04      	ldr	r2, [sp, #16]
 800e36a:	9905      	ldr	r1, [sp, #20]
 800e36c:	2a20      	cmp	r2, #32
 800e36e:	d818      	bhi.n	800e3a2 <__hexnan+0x7e>
 800e370:	9b02      	ldr	r3, [sp, #8]
 800e372:	459b      	cmp	fp, r3
 800e374:	dd13      	ble.n	800e39e <__hexnan+0x7a>
 800e376:	454c      	cmp	r4, r9
 800e378:	d206      	bcs.n	800e388 <__hexnan+0x64>
 800e37a:	2d07      	cmp	r5, #7
 800e37c:	dc04      	bgt.n	800e388 <__hexnan+0x64>
 800e37e:	462a      	mov	r2, r5
 800e380:	4649      	mov	r1, r9
 800e382:	4620      	mov	r0, r4
 800e384:	f7ff ffa8 	bl	800e2d8 <L_shift>
 800e388:	4544      	cmp	r4, r8
 800e38a:	d952      	bls.n	800e432 <__hexnan+0x10e>
 800e38c:	2300      	movs	r3, #0
 800e38e:	f1a4 0904 	sub.w	r9, r4, #4
 800e392:	f844 3c04 	str.w	r3, [r4, #-4]
 800e396:	f8cd b008 	str.w	fp, [sp, #8]
 800e39a:	464c      	mov	r4, r9
 800e39c:	461d      	mov	r5, r3
 800e39e:	9903      	ldr	r1, [sp, #12]
 800e3a0:	e7d7      	b.n	800e352 <__hexnan+0x2e>
 800e3a2:	2a29      	cmp	r2, #41	@ 0x29
 800e3a4:	d157      	bne.n	800e456 <__hexnan+0x132>
 800e3a6:	3102      	adds	r1, #2
 800e3a8:	f8ca 1000 	str.w	r1, [sl]
 800e3ac:	f1bb 0f00 	cmp.w	fp, #0
 800e3b0:	d051      	beq.n	800e456 <__hexnan+0x132>
 800e3b2:	454c      	cmp	r4, r9
 800e3b4:	d206      	bcs.n	800e3c4 <__hexnan+0xa0>
 800e3b6:	2d07      	cmp	r5, #7
 800e3b8:	dc04      	bgt.n	800e3c4 <__hexnan+0xa0>
 800e3ba:	462a      	mov	r2, r5
 800e3bc:	4649      	mov	r1, r9
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f7ff ff8a 	bl	800e2d8 <L_shift>
 800e3c4:	4544      	cmp	r4, r8
 800e3c6:	d936      	bls.n	800e436 <__hexnan+0x112>
 800e3c8:	f1a8 0204 	sub.w	r2, r8, #4
 800e3cc:	4623      	mov	r3, r4
 800e3ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800e3d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e3d6:	429f      	cmp	r7, r3
 800e3d8:	d2f9      	bcs.n	800e3ce <__hexnan+0xaa>
 800e3da:	1b3b      	subs	r3, r7, r4
 800e3dc:	f023 0303 	bic.w	r3, r3, #3
 800e3e0:	3304      	adds	r3, #4
 800e3e2:	3401      	adds	r4, #1
 800e3e4:	3e03      	subs	r6, #3
 800e3e6:	42b4      	cmp	r4, r6
 800e3e8:	bf88      	it	hi
 800e3ea:	2304      	movhi	r3, #4
 800e3ec:	4443      	add	r3, r8
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f843 2b04 	str.w	r2, [r3], #4
 800e3f4:	429f      	cmp	r7, r3
 800e3f6:	d2fb      	bcs.n	800e3f0 <__hexnan+0xcc>
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	b91b      	cbnz	r3, 800e404 <__hexnan+0xe0>
 800e3fc:	4547      	cmp	r7, r8
 800e3fe:	d128      	bne.n	800e452 <__hexnan+0x12e>
 800e400:	2301      	movs	r3, #1
 800e402:	603b      	str	r3, [r7, #0]
 800e404:	2005      	movs	r0, #5
 800e406:	b007      	add	sp, #28
 800e408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40c:	3501      	adds	r5, #1
 800e40e:	2d08      	cmp	r5, #8
 800e410:	f10b 0b01 	add.w	fp, fp, #1
 800e414:	dd06      	ble.n	800e424 <__hexnan+0x100>
 800e416:	4544      	cmp	r4, r8
 800e418:	d9c1      	bls.n	800e39e <__hexnan+0x7a>
 800e41a:	2300      	movs	r3, #0
 800e41c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e420:	2501      	movs	r5, #1
 800e422:	3c04      	subs	r4, #4
 800e424:	6822      	ldr	r2, [r4, #0]
 800e426:	f000 000f 	and.w	r0, r0, #15
 800e42a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e42e:	6020      	str	r0, [r4, #0]
 800e430:	e7b5      	b.n	800e39e <__hexnan+0x7a>
 800e432:	2508      	movs	r5, #8
 800e434:	e7b3      	b.n	800e39e <__hexnan+0x7a>
 800e436:	9b01      	ldr	r3, [sp, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d0dd      	beq.n	800e3f8 <__hexnan+0xd4>
 800e43c:	f1c3 0320 	rsb	r3, r3, #32
 800e440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e444:	40da      	lsrs	r2, r3
 800e446:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e44a:	4013      	ands	r3, r2
 800e44c:	f846 3c04 	str.w	r3, [r6, #-4]
 800e450:	e7d2      	b.n	800e3f8 <__hexnan+0xd4>
 800e452:	3f04      	subs	r7, #4
 800e454:	e7d0      	b.n	800e3f8 <__hexnan+0xd4>
 800e456:	2004      	movs	r0, #4
 800e458:	e7d5      	b.n	800e406 <__hexnan+0xe2>

0800e45a <__ssputs_r>:
 800e45a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e45e:	688e      	ldr	r6, [r1, #8]
 800e460:	461f      	mov	r7, r3
 800e462:	42be      	cmp	r6, r7
 800e464:	680b      	ldr	r3, [r1, #0]
 800e466:	4682      	mov	sl, r0
 800e468:	460c      	mov	r4, r1
 800e46a:	4690      	mov	r8, r2
 800e46c:	d82d      	bhi.n	800e4ca <__ssputs_r+0x70>
 800e46e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e472:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e476:	d026      	beq.n	800e4c6 <__ssputs_r+0x6c>
 800e478:	6965      	ldr	r5, [r4, #20]
 800e47a:	6909      	ldr	r1, [r1, #16]
 800e47c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e480:	eba3 0901 	sub.w	r9, r3, r1
 800e484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e488:	1c7b      	adds	r3, r7, #1
 800e48a:	444b      	add	r3, r9
 800e48c:	106d      	asrs	r5, r5, #1
 800e48e:	429d      	cmp	r5, r3
 800e490:	bf38      	it	cc
 800e492:	461d      	movcc	r5, r3
 800e494:	0553      	lsls	r3, r2, #21
 800e496:	d527      	bpl.n	800e4e8 <__ssputs_r+0x8e>
 800e498:	4629      	mov	r1, r5
 800e49a:	f7fd f98d 	bl	800b7b8 <_malloc_r>
 800e49e:	4606      	mov	r6, r0
 800e4a0:	b360      	cbz	r0, 800e4fc <__ssputs_r+0xa2>
 800e4a2:	6921      	ldr	r1, [r4, #16]
 800e4a4:	464a      	mov	r2, r9
 800e4a6:	f7fe fe34 	bl	800d112 <memcpy>
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e4b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4b4:	81a3      	strh	r3, [r4, #12]
 800e4b6:	6126      	str	r6, [r4, #16]
 800e4b8:	6165      	str	r5, [r4, #20]
 800e4ba:	444e      	add	r6, r9
 800e4bc:	eba5 0509 	sub.w	r5, r5, r9
 800e4c0:	6026      	str	r6, [r4, #0]
 800e4c2:	60a5      	str	r5, [r4, #8]
 800e4c4:	463e      	mov	r6, r7
 800e4c6:	42be      	cmp	r6, r7
 800e4c8:	d900      	bls.n	800e4cc <__ssputs_r+0x72>
 800e4ca:	463e      	mov	r6, r7
 800e4cc:	6820      	ldr	r0, [r4, #0]
 800e4ce:	4632      	mov	r2, r6
 800e4d0:	4641      	mov	r1, r8
 800e4d2:	f001 f982 	bl	800f7da <memmove>
 800e4d6:	68a3      	ldr	r3, [r4, #8]
 800e4d8:	1b9b      	subs	r3, r3, r6
 800e4da:	60a3      	str	r3, [r4, #8]
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	4433      	add	r3, r6
 800e4e0:	6023      	str	r3, [r4, #0]
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4e8:	462a      	mov	r2, r5
 800e4ea:	f001 f811 	bl	800f510 <_realloc_r>
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	d1e0      	bne.n	800e4b6 <__ssputs_r+0x5c>
 800e4f4:	6921      	ldr	r1, [r4, #16]
 800e4f6:	4650      	mov	r0, sl
 800e4f8:	f7ff fc2c 	bl	800dd54 <_free_r>
 800e4fc:	230c      	movs	r3, #12
 800e4fe:	f8ca 3000 	str.w	r3, [sl]
 800e502:	89a3      	ldrh	r3, [r4, #12]
 800e504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e508:	81a3      	strh	r3, [r4, #12]
 800e50a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e50e:	e7e9      	b.n	800e4e4 <__ssputs_r+0x8a>

0800e510 <_svfiprintf_r>:
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	4698      	mov	r8, r3
 800e516:	898b      	ldrh	r3, [r1, #12]
 800e518:	061b      	lsls	r3, r3, #24
 800e51a:	b09d      	sub	sp, #116	@ 0x74
 800e51c:	4607      	mov	r7, r0
 800e51e:	460d      	mov	r5, r1
 800e520:	4614      	mov	r4, r2
 800e522:	d510      	bpl.n	800e546 <_svfiprintf_r+0x36>
 800e524:	690b      	ldr	r3, [r1, #16]
 800e526:	b973      	cbnz	r3, 800e546 <_svfiprintf_r+0x36>
 800e528:	2140      	movs	r1, #64	@ 0x40
 800e52a:	f7fd f945 	bl	800b7b8 <_malloc_r>
 800e52e:	6028      	str	r0, [r5, #0]
 800e530:	6128      	str	r0, [r5, #16]
 800e532:	b930      	cbnz	r0, 800e542 <_svfiprintf_r+0x32>
 800e534:	230c      	movs	r3, #12
 800e536:	603b      	str	r3, [r7, #0]
 800e538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e53c:	b01d      	add	sp, #116	@ 0x74
 800e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e542:	2340      	movs	r3, #64	@ 0x40
 800e544:	616b      	str	r3, [r5, #20]
 800e546:	2300      	movs	r3, #0
 800e548:	9309      	str	r3, [sp, #36]	@ 0x24
 800e54a:	2320      	movs	r3, #32
 800e54c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e550:	f8cd 800c 	str.w	r8, [sp, #12]
 800e554:	2330      	movs	r3, #48	@ 0x30
 800e556:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e6f4 <_svfiprintf_r+0x1e4>
 800e55a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e55e:	f04f 0901 	mov.w	r9, #1
 800e562:	4623      	mov	r3, r4
 800e564:	469a      	mov	sl, r3
 800e566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e56a:	b10a      	cbz	r2, 800e570 <_svfiprintf_r+0x60>
 800e56c:	2a25      	cmp	r2, #37	@ 0x25
 800e56e:	d1f9      	bne.n	800e564 <_svfiprintf_r+0x54>
 800e570:	ebba 0b04 	subs.w	fp, sl, r4
 800e574:	d00b      	beq.n	800e58e <_svfiprintf_r+0x7e>
 800e576:	465b      	mov	r3, fp
 800e578:	4622      	mov	r2, r4
 800e57a:	4629      	mov	r1, r5
 800e57c:	4638      	mov	r0, r7
 800e57e:	f7ff ff6c 	bl	800e45a <__ssputs_r>
 800e582:	3001      	adds	r0, #1
 800e584:	f000 80a7 	beq.w	800e6d6 <_svfiprintf_r+0x1c6>
 800e588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e58a:	445a      	add	r2, fp
 800e58c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e58e:	f89a 3000 	ldrb.w	r3, [sl]
 800e592:	2b00      	cmp	r3, #0
 800e594:	f000 809f 	beq.w	800e6d6 <_svfiprintf_r+0x1c6>
 800e598:	2300      	movs	r3, #0
 800e59a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e59e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5a2:	f10a 0a01 	add.w	sl, sl, #1
 800e5a6:	9304      	str	r3, [sp, #16]
 800e5a8:	9307      	str	r3, [sp, #28]
 800e5aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e5ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800e5b0:	4654      	mov	r4, sl
 800e5b2:	2205      	movs	r2, #5
 800e5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5b8:	484e      	ldr	r0, [pc, #312]	@ (800e6f4 <_svfiprintf_r+0x1e4>)
 800e5ba:	f7f1 fe41 	bl	8000240 <memchr>
 800e5be:	9a04      	ldr	r2, [sp, #16]
 800e5c0:	b9d8      	cbnz	r0, 800e5fa <_svfiprintf_r+0xea>
 800e5c2:	06d0      	lsls	r0, r2, #27
 800e5c4:	bf44      	itt	mi
 800e5c6:	2320      	movmi	r3, #32
 800e5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e5cc:	0711      	lsls	r1, r2, #28
 800e5ce:	bf44      	itt	mi
 800e5d0:	232b      	movmi	r3, #43	@ 0x2b
 800e5d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e5d6:	f89a 3000 	ldrb.w	r3, [sl]
 800e5da:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5dc:	d015      	beq.n	800e60a <_svfiprintf_r+0xfa>
 800e5de:	9a07      	ldr	r2, [sp, #28]
 800e5e0:	4654      	mov	r4, sl
 800e5e2:	2000      	movs	r0, #0
 800e5e4:	f04f 0c0a 	mov.w	ip, #10
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5ee:	3b30      	subs	r3, #48	@ 0x30
 800e5f0:	2b09      	cmp	r3, #9
 800e5f2:	d94b      	bls.n	800e68c <_svfiprintf_r+0x17c>
 800e5f4:	b1b0      	cbz	r0, 800e624 <_svfiprintf_r+0x114>
 800e5f6:	9207      	str	r2, [sp, #28]
 800e5f8:	e014      	b.n	800e624 <_svfiprintf_r+0x114>
 800e5fa:	eba0 0308 	sub.w	r3, r0, r8
 800e5fe:	fa09 f303 	lsl.w	r3, r9, r3
 800e602:	4313      	orrs	r3, r2
 800e604:	9304      	str	r3, [sp, #16]
 800e606:	46a2      	mov	sl, r4
 800e608:	e7d2      	b.n	800e5b0 <_svfiprintf_r+0xa0>
 800e60a:	9b03      	ldr	r3, [sp, #12]
 800e60c:	1d19      	adds	r1, r3, #4
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	9103      	str	r1, [sp, #12]
 800e612:	2b00      	cmp	r3, #0
 800e614:	bfbb      	ittet	lt
 800e616:	425b      	neglt	r3, r3
 800e618:	f042 0202 	orrlt.w	r2, r2, #2
 800e61c:	9307      	strge	r3, [sp, #28]
 800e61e:	9307      	strlt	r3, [sp, #28]
 800e620:	bfb8      	it	lt
 800e622:	9204      	strlt	r2, [sp, #16]
 800e624:	7823      	ldrb	r3, [r4, #0]
 800e626:	2b2e      	cmp	r3, #46	@ 0x2e
 800e628:	d10a      	bne.n	800e640 <_svfiprintf_r+0x130>
 800e62a:	7863      	ldrb	r3, [r4, #1]
 800e62c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e62e:	d132      	bne.n	800e696 <_svfiprintf_r+0x186>
 800e630:	9b03      	ldr	r3, [sp, #12]
 800e632:	1d1a      	adds	r2, r3, #4
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	9203      	str	r2, [sp, #12]
 800e638:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e63c:	3402      	adds	r4, #2
 800e63e:	9305      	str	r3, [sp, #20]
 800e640:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e704 <_svfiprintf_r+0x1f4>
 800e644:	7821      	ldrb	r1, [r4, #0]
 800e646:	2203      	movs	r2, #3
 800e648:	4650      	mov	r0, sl
 800e64a:	f7f1 fdf9 	bl	8000240 <memchr>
 800e64e:	b138      	cbz	r0, 800e660 <_svfiprintf_r+0x150>
 800e650:	9b04      	ldr	r3, [sp, #16]
 800e652:	eba0 000a 	sub.w	r0, r0, sl
 800e656:	2240      	movs	r2, #64	@ 0x40
 800e658:	4082      	lsls	r2, r0
 800e65a:	4313      	orrs	r3, r2
 800e65c:	3401      	adds	r4, #1
 800e65e:	9304      	str	r3, [sp, #16]
 800e660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e664:	4824      	ldr	r0, [pc, #144]	@ (800e6f8 <_svfiprintf_r+0x1e8>)
 800e666:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e66a:	2206      	movs	r2, #6
 800e66c:	f7f1 fde8 	bl	8000240 <memchr>
 800e670:	2800      	cmp	r0, #0
 800e672:	d036      	beq.n	800e6e2 <_svfiprintf_r+0x1d2>
 800e674:	4b21      	ldr	r3, [pc, #132]	@ (800e6fc <_svfiprintf_r+0x1ec>)
 800e676:	bb1b      	cbnz	r3, 800e6c0 <_svfiprintf_r+0x1b0>
 800e678:	9b03      	ldr	r3, [sp, #12]
 800e67a:	3307      	adds	r3, #7
 800e67c:	f023 0307 	bic.w	r3, r3, #7
 800e680:	3308      	adds	r3, #8
 800e682:	9303      	str	r3, [sp, #12]
 800e684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e686:	4433      	add	r3, r6
 800e688:	9309      	str	r3, [sp, #36]	@ 0x24
 800e68a:	e76a      	b.n	800e562 <_svfiprintf_r+0x52>
 800e68c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e690:	460c      	mov	r4, r1
 800e692:	2001      	movs	r0, #1
 800e694:	e7a8      	b.n	800e5e8 <_svfiprintf_r+0xd8>
 800e696:	2300      	movs	r3, #0
 800e698:	3401      	adds	r4, #1
 800e69a:	9305      	str	r3, [sp, #20]
 800e69c:	4619      	mov	r1, r3
 800e69e:	f04f 0c0a 	mov.w	ip, #10
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6a8:	3a30      	subs	r2, #48	@ 0x30
 800e6aa:	2a09      	cmp	r2, #9
 800e6ac:	d903      	bls.n	800e6b6 <_svfiprintf_r+0x1a6>
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d0c6      	beq.n	800e640 <_svfiprintf_r+0x130>
 800e6b2:	9105      	str	r1, [sp, #20]
 800e6b4:	e7c4      	b.n	800e640 <_svfiprintf_r+0x130>
 800e6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e7f0      	b.n	800e6a2 <_svfiprintf_r+0x192>
 800e6c0:	ab03      	add	r3, sp, #12
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	462a      	mov	r2, r5
 800e6c6:	4b0e      	ldr	r3, [pc, #56]	@ (800e700 <_svfiprintf_r+0x1f0>)
 800e6c8:	a904      	add	r1, sp, #16
 800e6ca:	4638      	mov	r0, r7
 800e6cc:	f7fc fe28 	bl	800b320 <_printf_float>
 800e6d0:	1c42      	adds	r2, r0, #1
 800e6d2:	4606      	mov	r6, r0
 800e6d4:	d1d6      	bne.n	800e684 <_svfiprintf_r+0x174>
 800e6d6:	89ab      	ldrh	r3, [r5, #12]
 800e6d8:	065b      	lsls	r3, r3, #25
 800e6da:	f53f af2d 	bmi.w	800e538 <_svfiprintf_r+0x28>
 800e6de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e6e0:	e72c      	b.n	800e53c <_svfiprintf_r+0x2c>
 800e6e2:	ab03      	add	r3, sp, #12
 800e6e4:	9300      	str	r3, [sp, #0]
 800e6e6:	462a      	mov	r2, r5
 800e6e8:	4b05      	ldr	r3, [pc, #20]	@ (800e700 <_svfiprintf_r+0x1f0>)
 800e6ea:	a904      	add	r1, sp, #16
 800e6ec:	4638      	mov	r0, r7
 800e6ee:	f7fd f951 	bl	800b994 <_printf_i>
 800e6f2:	e7ed      	b.n	800e6d0 <_svfiprintf_r+0x1c0>
 800e6f4:	08010a5b 	.word	0x08010a5b
 800e6f8:	08010a65 	.word	0x08010a65
 800e6fc:	0800b321 	.word	0x0800b321
 800e700:	0800e45b 	.word	0x0800e45b
 800e704:	08010a61 	.word	0x08010a61

0800e708 <__sfputc_r>:
 800e708:	6893      	ldr	r3, [r2, #8]
 800e70a:	3b01      	subs	r3, #1
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	b410      	push	{r4}
 800e710:	6093      	str	r3, [r2, #8]
 800e712:	da08      	bge.n	800e726 <__sfputc_r+0x1e>
 800e714:	6994      	ldr	r4, [r2, #24]
 800e716:	42a3      	cmp	r3, r4
 800e718:	db01      	blt.n	800e71e <__sfputc_r+0x16>
 800e71a:	290a      	cmp	r1, #10
 800e71c:	d103      	bne.n	800e726 <__sfputc_r+0x1e>
 800e71e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e722:	f000 bf23 	b.w	800f56c <__swbuf_r>
 800e726:	6813      	ldr	r3, [r2, #0]
 800e728:	1c58      	adds	r0, r3, #1
 800e72a:	6010      	str	r0, [r2, #0]
 800e72c:	7019      	strb	r1, [r3, #0]
 800e72e:	4608      	mov	r0, r1
 800e730:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e734:	4770      	bx	lr

0800e736 <__sfputs_r>:
 800e736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e738:	4606      	mov	r6, r0
 800e73a:	460f      	mov	r7, r1
 800e73c:	4614      	mov	r4, r2
 800e73e:	18d5      	adds	r5, r2, r3
 800e740:	42ac      	cmp	r4, r5
 800e742:	d101      	bne.n	800e748 <__sfputs_r+0x12>
 800e744:	2000      	movs	r0, #0
 800e746:	e007      	b.n	800e758 <__sfputs_r+0x22>
 800e748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e74c:	463a      	mov	r2, r7
 800e74e:	4630      	mov	r0, r6
 800e750:	f7ff ffda 	bl	800e708 <__sfputc_r>
 800e754:	1c43      	adds	r3, r0, #1
 800e756:	d1f3      	bne.n	800e740 <__sfputs_r+0xa>
 800e758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e75c <_vfiprintf_r>:
 800e75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e760:	460d      	mov	r5, r1
 800e762:	b09d      	sub	sp, #116	@ 0x74
 800e764:	4614      	mov	r4, r2
 800e766:	4698      	mov	r8, r3
 800e768:	4606      	mov	r6, r0
 800e76a:	b118      	cbz	r0, 800e774 <_vfiprintf_r+0x18>
 800e76c:	6a03      	ldr	r3, [r0, #32]
 800e76e:	b90b      	cbnz	r3, 800e774 <_vfiprintf_r+0x18>
 800e770:	f7fd fd94 	bl	800c29c <__sinit>
 800e774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e776:	07d9      	lsls	r1, r3, #31
 800e778:	d405      	bmi.n	800e786 <_vfiprintf_r+0x2a>
 800e77a:	89ab      	ldrh	r3, [r5, #12]
 800e77c:	059a      	lsls	r2, r3, #22
 800e77e:	d402      	bmi.n	800e786 <_vfiprintf_r+0x2a>
 800e780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e782:	f7fe fcc4 	bl	800d10e <__retarget_lock_acquire_recursive>
 800e786:	89ab      	ldrh	r3, [r5, #12]
 800e788:	071b      	lsls	r3, r3, #28
 800e78a:	d501      	bpl.n	800e790 <_vfiprintf_r+0x34>
 800e78c:	692b      	ldr	r3, [r5, #16]
 800e78e:	b99b      	cbnz	r3, 800e7b8 <_vfiprintf_r+0x5c>
 800e790:	4629      	mov	r1, r5
 800e792:	4630      	mov	r0, r6
 800e794:	f000 ff28 	bl	800f5e8 <__swsetup_r>
 800e798:	b170      	cbz	r0, 800e7b8 <_vfiprintf_r+0x5c>
 800e79a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e79c:	07dc      	lsls	r4, r3, #31
 800e79e:	d504      	bpl.n	800e7aa <_vfiprintf_r+0x4e>
 800e7a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7a4:	b01d      	add	sp, #116	@ 0x74
 800e7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7aa:	89ab      	ldrh	r3, [r5, #12]
 800e7ac:	0598      	lsls	r0, r3, #22
 800e7ae:	d4f7      	bmi.n	800e7a0 <_vfiprintf_r+0x44>
 800e7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7b2:	f7fe fcad 	bl	800d110 <__retarget_lock_release_recursive>
 800e7b6:	e7f3      	b.n	800e7a0 <_vfiprintf_r+0x44>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7bc:	2320      	movs	r3, #32
 800e7be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e7c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7c6:	2330      	movs	r3, #48	@ 0x30
 800e7c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e978 <_vfiprintf_r+0x21c>
 800e7cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e7d0:	f04f 0901 	mov.w	r9, #1
 800e7d4:	4623      	mov	r3, r4
 800e7d6:	469a      	mov	sl, r3
 800e7d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7dc:	b10a      	cbz	r2, 800e7e2 <_vfiprintf_r+0x86>
 800e7de:	2a25      	cmp	r2, #37	@ 0x25
 800e7e0:	d1f9      	bne.n	800e7d6 <_vfiprintf_r+0x7a>
 800e7e2:	ebba 0b04 	subs.w	fp, sl, r4
 800e7e6:	d00b      	beq.n	800e800 <_vfiprintf_r+0xa4>
 800e7e8:	465b      	mov	r3, fp
 800e7ea:	4622      	mov	r2, r4
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f7ff ffa1 	bl	800e736 <__sfputs_r>
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	f000 80a7 	beq.w	800e948 <_vfiprintf_r+0x1ec>
 800e7fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7fc:	445a      	add	r2, fp
 800e7fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800e800:	f89a 3000 	ldrb.w	r3, [sl]
 800e804:	2b00      	cmp	r3, #0
 800e806:	f000 809f 	beq.w	800e948 <_vfiprintf_r+0x1ec>
 800e80a:	2300      	movs	r3, #0
 800e80c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e814:	f10a 0a01 	add.w	sl, sl, #1
 800e818:	9304      	str	r3, [sp, #16]
 800e81a:	9307      	str	r3, [sp, #28]
 800e81c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e820:	931a      	str	r3, [sp, #104]	@ 0x68
 800e822:	4654      	mov	r4, sl
 800e824:	2205      	movs	r2, #5
 800e826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e82a:	4853      	ldr	r0, [pc, #332]	@ (800e978 <_vfiprintf_r+0x21c>)
 800e82c:	f7f1 fd08 	bl	8000240 <memchr>
 800e830:	9a04      	ldr	r2, [sp, #16]
 800e832:	b9d8      	cbnz	r0, 800e86c <_vfiprintf_r+0x110>
 800e834:	06d1      	lsls	r1, r2, #27
 800e836:	bf44      	itt	mi
 800e838:	2320      	movmi	r3, #32
 800e83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e83e:	0713      	lsls	r3, r2, #28
 800e840:	bf44      	itt	mi
 800e842:	232b      	movmi	r3, #43	@ 0x2b
 800e844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e848:	f89a 3000 	ldrb.w	r3, [sl]
 800e84c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e84e:	d015      	beq.n	800e87c <_vfiprintf_r+0x120>
 800e850:	9a07      	ldr	r2, [sp, #28]
 800e852:	4654      	mov	r4, sl
 800e854:	2000      	movs	r0, #0
 800e856:	f04f 0c0a 	mov.w	ip, #10
 800e85a:	4621      	mov	r1, r4
 800e85c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e860:	3b30      	subs	r3, #48	@ 0x30
 800e862:	2b09      	cmp	r3, #9
 800e864:	d94b      	bls.n	800e8fe <_vfiprintf_r+0x1a2>
 800e866:	b1b0      	cbz	r0, 800e896 <_vfiprintf_r+0x13a>
 800e868:	9207      	str	r2, [sp, #28]
 800e86a:	e014      	b.n	800e896 <_vfiprintf_r+0x13a>
 800e86c:	eba0 0308 	sub.w	r3, r0, r8
 800e870:	fa09 f303 	lsl.w	r3, r9, r3
 800e874:	4313      	orrs	r3, r2
 800e876:	9304      	str	r3, [sp, #16]
 800e878:	46a2      	mov	sl, r4
 800e87a:	e7d2      	b.n	800e822 <_vfiprintf_r+0xc6>
 800e87c:	9b03      	ldr	r3, [sp, #12]
 800e87e:	1d19      	adds	r1, r3, #4
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	9103      	str	r1, [sp, #12]
 800e884:	2b00      	cmp	r3, #0
 800e886:	bfbb      	ittet	lt
 800e888:	425b      	neglt	r3, r3
 800e88a:	f042 0202 	orrlt.w	r2, r2, #2
 800e88e:	9307      	strge	r3, [sp, #28]
 800e890:	9307      	strlt	r3, [sp, #28]
 800e892:	bfb8      	it	lt
 800e894:	9204      	strlt	r2, [sp, #16]
 800e896:	7823      	ldrb	r3, [r4, #0]
 800e898:	2b2e      	cmp	r3, #46	@ 0x2e
 800e89a:	d10a      	bne.n	800e8b2 <_vfiprintf_r+0x156>
 800e89c:	7863      	ldrb	r3, [r4, #1]
 800e89e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8a0:	d132      	bne.n	800e908 <_vfiprintf_r+0x1ac>
 800e8a2:	9b03      	ldr	r3, [sp, #12]
 800e8a4:	1d1a      	adds	r2, r3, #4
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	9203      	str	r2, [sp, #12]
 800e8aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8ae:	3402      	adds	r4, #2
 800e8b0:	9305      	str	r3, [sp, #20]
 800e8b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e988 <_vfiprintf_r+0x22c>
 800e8b6:	7821      	ldrb	r1, [r4, #0]
 800e8b8:	2203      	movs	r2, #3
 800e8ba:	4650      	mov	r0, sl
 800e8bc:	f7f1 fcc0 	bl	8000240 <memchr>
 800e8c0:	b138      	cbz	r0, 800e8d2 <_vfiprintf_r+0x176>
 800e8c2:	9b04      	ldr	r3, [sp, #16]
 800e8c4:	eba0 000a 	sub.w	r0, r0, sl
 800e8c8:	2240      	movs	r2, #64	@ 0x40
 800e8ca:	4082      	lsls	r2, r0
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	3401      	adds	r4, #1
 800e8d0:	9304      	str	r3, [sp, #16]
 800e8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8d6:	4829      	ldr	r0, [pc, #164]	@ (800e97c <_vfiprintf_r+0x220>)
 800e8d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e8dc:	2206      	movs	r2, #6
 800e8de:	f7f1 fcaf 	bl	8000240 <memchr>
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	d03f      	beq.n	800e966 <_vfiprintf_r+0x20a>
 800e8e6:	4b26      	ldr	r3, [pc, #152]	@ (800e980 <_vfiprintf_r+0x224>)
 800e8e8:	bb1b      	cbnz	r3, 800e932 <_vfiprintf_r+0x1d6>
 800e8ea:	9b03      	ldr	r3, [sp, #12]
 800e8ec:	3307      	adds	r3, #7
 800e8ee:	f023 0307 	bic.w	r3, r3, #7
 800e8f2:	3308      	adds	r3, #8
 800e8f4:	9303      	str	r3, [sp, #12]
 800e8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8f8:	443b      	add	r3, r7
 800e8fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8fc:	e76a      	b.n	800e7d4 <_vfiprintf_r+0x78>
 800e8fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800e902:	460c      	mov	r4, r1
 800e904:	2001      	movs	r0, #1
 800e906:	e7a8      	b.n	800e85a <_vfiprintf_r+0xfe>
 800e908:	2300      	movs	r3, #0
 800e90a:	3401      	adds	r4, #1
 800e90c:	9305      	str	r3, [sp, #20]
 800e90e:	4619      	mov	r1, r3
 800e910:	f04f 0c0a 	mov.w	ip, #10
 800e914:	4620      	mov	r0, r4
 800e916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e91a:	3a30      	subs	r2, #48	@ 0x30
 800e91c:	2a09      	cmp	r2, #9
 800e91e:	d903      	bls.n	800e928 <_vfiprintf_r+0x1cc>
 800e920:	2b00      	cmp	r3, #0
 800e922:	d0c6      	beq.n	800e8b2 <_vfiprintf_r+0x156>
 800e924:	9105      	str	r1, [sp, #20]
 800e926:	e7c4      	b.n	800e8b2 <_vfiprintf_r+0x156>
 800e928:	fb0c 2101 	mla	r1, ip, r1, r2
 800e92c:	4604      	mov	r4, r0
 800e92e:	2301      	movs	r3, #1
 800e930:	e7f0      	b.n	800e914 <_vfiprintf_r+0x1b8>
 800e932:	ab03      	add	r3, sp, #12
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	462a      	mov	r2, r5
 800e938:	4b12      	ldr	r3, [pc, #72]	@ (800e984 <_vfiprintf_r+0x228>)
 800e93a:	a904      	add	r1, sp, #16
 800e93c:	4630      	mov	r0, r6
 800e93e:	f7fc fcef 	bl	800b320 <_printf_float>
 800e942:	4607      	mov	r7, r0
 800e944:	1c78      	adds	r0, r7, #1
 800e946:	d1d6      	bne.n	800e8f6 <_vfiprintf_r+0x19a>
 800e948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e94a:	07d9      	lsls	r1, r3, #31
 800e94c:	d405      	bmi.n	800e95a <_vfiprintf_r+0x1fe>
 800e94e:	89ab      	ldrh	r3, [r5, #12]
 800e950:	059a      	lsls	r2, r3, #22
 800e952:	d402      	bmi.n	800e95a <_vfiprintf_r+0x1fe>
 800e954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e956:	f7fe fbdb 	bl	800d110 <__retarget_lock_release_recursive>
 800e95a:	89ab      	ldrh	r3, [r5, #12]
 800e95c:	065b      	lsls	r3, r3, #25
 800e95e:	f53f af1f 	bmi.w	800e7a0 <_vfiprintf_r+0x44>
 800e962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e964:	e71e      	b.n	800e7a4 <_vfiprintf_r+0x48>
 800e966:	ab03      	add	r3, sp, #12
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	462a      	mov	r2, r5
 800e96c:	4b05      	ldr	r3, [pc, #20]	@ (800e984 <_vfiprintf_r+0x228>)
 800e96e:	a904      	add	r1, sp, #16
 800e970:	4630      	mov	r0, r6
 800e972:	f7fd f80f 	bl	800b994 <_printf_i>
 800e976:	e7e4      	b.n	800e942 <_vfiprintf_r+0x1e6>
 800e978:	08010a5b 	.word	0x08010a5b
 800e97c:	08010a65 	.word	0x08010a65
 800e980:	0800b321 	.word	0x0800b321
 800e984:	0800e737 	.word	0x0800e737
 800e988:	08010a61 	.word	0x08010a61

0800e98c <__ascii_mbtowc>:
 800e98c:	b082      	sub	sp, #8
 800e98e:	b901      	cbnz	r1, 800e992 <__ascii_mbtowc+0x6>
 800e990:	a901      	add	r1, sp, #4
 800e992:	b142      	cbz	r2, 800e9a6 <__ascii_mbtowc+0x1a>
 800e994:	b14b      	cbz	r3, 800e9aa <__ascii_mbtowc+0x1e>
 800e996:	7813      	ldrb	r3, [r2, #0]
 800e998:	600b      	str	r3, [r1, #0]
 800e99a:	7812      	ldrb	r2, [r2, #0]
 800e99c:	1e10      	subs	r0, r2, #0
 800e99e:	bf18      	it	ne
 800e9a0:	2001      	movne	r0, #1
 800e9a2:	b002      	add	sp, #8
 800e9a4:	4770      	bx	lr
 800e9a6:	4610      	mov	r0, r2
 800e9a8:	e7fb      	b.n	800e9a2 <__ascii_mbtowc+0x16>
 800e9aa:	f06f 0001 	mvn.w	r0, #1
 800e9ae:	e7f8      	b.n	800e9a2 <__ascii_mbtowc+0x16>

0800e9b0 <__sflush_r>:
 800e9b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b8:	0716      	lsls	r6, r2, #28
 800e9ba:	4605      	mov	r5, r0
 800e9bc:	460c      	mov	r4, r1
 800e9be:	d454      	bmi.n	800ea6a <__sflush_r+0xba>
 800e9c0:	684b      	ldr	r3, [r1, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	dc02      	bgt.n	800e9cc <__sflush_r+0x1c>
 800e9c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	dd48      	ble.n	800ea5e <__sflush_r+0xae>
 800e9cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9ce:	2e00      	cmp	r6, #0
 800e9d0:	d045      	beq.n	800ea5e <__sflush_r+0xae>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e9d8:	682f      	ldr	r7, [r5, #0]
 800e9da:	6a21      	ldr	r1, [r4, #32]
 800e9dc:	602b      	str	r3, [r5, #0]
 800e9de:	d030      	beq.n	800ea42 <__sflush_r+0x92>
 800e9e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e9e2:	89a3      	ldrh	r3, [r4, #12]
 800e9e4:	0759      	lsls	r1, r3, #29
 800e9e6:	d505      	bpl.n	800e9f4 <__sflush_r+0x44>
 800e9e8:	6863      	ldr	r3, [r4, #4]
 800e9ea:	1ad2      	subs	r2, r2, r3
 800e9ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e9ee:	b10b      	cbz	r3, 800e9f4 <__sflush_r+0x44>
 800e9f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e9f2:	1ad2      	subs	r2, r2, r3
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9f8:	6a21      	ldr	r1, [r4, #32]
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	47b0      	blx	r6
 800e9fe:	1c43      	adds	r3, r0, #1
 800ea00:	89a3      	ldrh	r3, [r4, #12]
 800ea02:	d106      	bne.n	800ea12 <__sflush_r+0x62>
 800ea04:	6829      	ldr	r1, [r5, #0]
 800ea06:	291d      	cmp	r1, #29
 800ea08:	d82b      	bhi.n	800ea62 <__sflush_r+0xb2>
 800ea0a:	4a2a      	ldr	r2, [pc, #168]	@ (800eab4 <__sflush_r+0x104>)
 800ea0c:	410a      	asrs	r2, r1
 800ea0e:	07d6      	lsls	r6, r2, #31
 800ea10:	d427      	bmi.n	800ea62 <__sflush_r+0xb2>
 800ea12:	2200      	movs	r2, #0
 800ea14:	6062      	str	r2, [r4, #4]
 800ea16:	04d9      	lsls	r1, r3, #19
 800ea18:	6922      	ldr	r2, [r4, #16]
 800ea1a:	6022      	str	r2, [r4, #0]
 800ea1c:	d504      	bpl.n	800ea28 <__sflush_r+0x78>
 800ea1e:	1c42      	adds	r2, r0, #1
 800ea20:	d101      	bne.n	800ea26 <__sflush_r+0x76>
 800ea22:	682b      	ldr	r3, [r5, #0]
 800ea24:	b903      	cbnz	r3, 800ea28 <__sflush_r+0x78>
 800ea26:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea2a:	602f      	str	r7, [r5, #0]
 800ea2c:	b1b9      	cbz	r1, 800ea5e <__sflush_r+0xae>
 800ea2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea32:	4299      	cmp	r1, r3
 800ea34:	d002      	beq.n	800ea3c <__sflush_r+0x8c>
 800ea36:	4628      	mov	r0, r5
 800ea38:	f7ff f98c 	bl	800dd54 <_free_r>
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea40:	e00d      	b.n	800ea5e <__sflush_r+0xae>
 800ea42:	2301      	movs	r3, #1
 800ea44:	4628      	mov	r0, r5
 800ea46:	47b0      	blx	r6
 800ea48:	4602      	mov	r2, r0
 800ea4a:	1c50      	adds	r0, r2, #1
 800ea4c:	d1c9      	bne.n	800e9e2 <__sflush_r+0x32>
 800ea4e:	682b      	ldr	r3, [r5, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d0c6      	beq.n	800e9e2 <__sflush_r+0x32>
 800ea54:	2b1d      	cmp	r3, #29
 800ea56:	d001      	beq.n	800ea5c <__sflush_r+0xac>
 800ea58:	2b16      	cmp	r3, #22
 800ea5a:	d11e      	bne.n	800ea9a <__sflush_r+0xea>
 800ea5c:	602f      	str	r7, [r5, #0]
 800ea5e:	2000      	movs	r0, #0
 800ea60:	e022      	b.n	800eaa8 <__sflush_r+0xf8>
 800ea62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea66:	b21b      	sxth	r3, r3
 800ea68:	e01b      	b.n	800eaa2 <__sflush_r+0xf2>
 800ea6a:	690f      	ldr	r7, [r1, #16]
 800ea6c:	2f00      	cmp	r7, #0
 800ea6e:	d0f6      	beq.n	800ea5e <__sflush_r+0xae>
 800ea70:	0793      	lsls	r3, r2, #30
 800ea72:	680e      	ldr	r6, [r1, #0]
 800ea74:	bf08      	it	eq
 800ea76:	694b      	ldreq	r3, [r1, #20]
 800ea78:	600f      	str	r7, [r1, #0]
 800ea7a:	bf18      	it	ne
 800ea7c:	2300      	movne	r3, #0
 800ea7e:	eba6 0807 	sub.w	r8, r6, r7
 800ea82:	608b      	str	r3, [r1, #8]
 800ea84:	f1b8 0f00 	cmp.w	r8, #0
 800ea88:	dde9      	ble.n	800ea5e <__sflush_r+0xae>
 800ea8a:	6a21      	ldr	r1, [r4, #32]
 800ea8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ea8e:	4643      	mov	r3, r8
 800ea90:	463a      	mov	r2, r7
 800ea92:	4628      	mov	r0, r5
 800ea94:	47b0      	blx	r6
 800ea96:	2800      	cmp	r0, #0
 800ea98:	dc08      	bgt.n	800eaac <__sflush_r+0xfc>
 800ea9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eaa2:	81a3      	strh	r3, [r4, #12]
 800eaa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eaa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaac:	4407      	add	r7, r0
 800eaae:	eba8 0800 	sub.w	r8, r8, r0
 800eab2:	e7e7      	b.n	800ea84 <__sflush_r+0xd4>
 800eab4:	dfbffffe 	.word	0xdfbffffe

0800eab8 <_fflush_r>:
 800eab8:	b538      	push	{r3, r4, r5, lr}
 800eaba:	690b      	ldr	r3, [r1, #16]
 800eabc:	4605      	mov	r5, r0
 800eabe:	460c      	mov	r4, r1
 800eac0:	b913      	cbnz	r3, 800eac8 <_fflush_r+0x10>
 800eac2:	2500      	movs	r5, #0
 800eac4:	4628      	mov	r0, r5
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	b118      	cbz	r0, 800ead2 <_fflush_r+0x1a>
 800eaca:	6a03      	ldr	r3, [r0, #32]
 800eacc:	b90b      	cbnz	r3, 800ead2 <_fflush_r+0x1a>
 800eace:	f7fd fbe5 	bl	800c29c <__sinit>
 800ead2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d0f3      	beq.n	800eac2 <_fflush_r+0xa>
 800eada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eadc:	07d0      	lsls	r0, r2, #31
 800eade:	d404      	bmi.n	800eaea <_fflush_r+0x32>
 800eae0:	0599      	lsls	r1, r3, #22
 800eae2:	d402      	bmi.n	800eaea <_fflush_r+0x32>
 800eae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eae6:	f7fe fb12 	bl	800d10e <__retarget_lock_acquire_recursive>
 800eaea:	4628      	mov	r0, r5
 800eaec:	4621      	mov	r1, r4
 800eaee:	f7ff ff5f 	bl	800e9b0 <__sflush_r>
 800eaf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eaf4:	07da      	lsls	r2, r3, #31
 800eaf6:	4605      	mov	r5, r0
 800eaf8:	d4e4      	bmi.n	800eac4 <_fflush_r+0xc>
 800eafa:	89a3      	ldrh	r3, [r4, #12]
 800eafc:	059b      	lsls	r3, r3, #22
 800eafe:	d4e1      	bmi.n	800eac4 <_fflush_r+0xc>
 800eb00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb02:	f7fe fb05 	bl	800d110 <__retarget_lock_release_recursive>
 800eb06:	e7dd      	b.n	800eac4 <_fflush_r+0xc>

0800eb08 <_Balloc>:
 800eb08:	b570      	push	{r4, r5, r6, lr}
 800eb0a:	69c6      	ldr	r6, [r0, #28]
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	460d      	mov	r5, r1
 800eb10:	b976      	cbnz	r6, 800eb30 <_Balloc+0x28>
 800eb12:	2010      	movs	r0, #16
 800eb14:	f7fc fe1e 	bl	800b754 <malloc>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	61e0      	str	r0, [r4, #28]
 800eb1c:	b920      	cbnz	r0, 800eb28 <_Balloc+0x20>
 800eb1e:	4b18      	ldr	r3, [pc, #96]	@ (800eb80 <_Balloc+0x78>)
 800eb20:	4818      	ldr	r0, [pc, #96]	@ (800eb84 <_Balloc+0x7c>)
 800eb22:	216b      	movs	r1, #107	@ 0x6b
 800eb24:	f7fe fb1a 	bl	800d15c <__assert_func>
 800eb28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb2c:	6006      	str	r6, [r0, #0]
 800eb2e:	60c6      	str	r6, [r0, #12]
 800eb30:	69e6      	ldr	r6, [r4, #28]
 800eb32:	68f3      	ldr	r3, [r6, #12]
 800eb34:	b183      	cbz	r3, 800eb58 <_Balloc+0x50>
 800eb36:	69e3      	ldr	r3, [r4, #28]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb3e:	b9b8      	cbnz	r0, 800eb70 <_Balloc+0x68>
 800eb40:	2101      	movs	r1, #1
 800eb42:	fa01 f605 	lsl.w	r6, r1, r5
 800eb46:	1d72      	adds	r2, r6, #5
 800eb48:	0092      	lsls	r2, r2, #2
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	f000 fecf 	bl	800f8ee <_calloc_r>
 800eb50:	b160      	cbz	r0, 800eb6c <_Balloc+0x64>
 800eb52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb56:	e00e      	b.n	800eb76 <_Balloc+0x6e>
 800eb58:	2221      	movs	r2, #33	@ 0x21
 800eb5a:	2104      	movs	r1, #4
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f000 fec6 	bl	800f8ee <_calloc_r>
 800eb62:	69e3      	ldr	r3, [r4, #28]
 800eb64:	60f0      	str	r0, [r6, #12]
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d1e4      	bne.n	800eb36 <_Balloc+0x2e>
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	bd70      	pop	{r4, r5, r6, pc}
 800eb70:	6802      	ldr	r2, [r0, #0]
 800eb72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb76:	2300      	movs	r3, #0
 800eb78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb7c:	e7f7      	b.n	800eb6e <_Balloc+0x66>
 800eb7e:	bf00      	nop
 800eb80:	0801077d 	.word	0x0801077d
 800eb84:	08010a6c 	.word	0x08010a6c

0800eb88 <_Bfree>:
 800eb88:	b570      	push	{r4, r5, r6, lr}
 800eb8a:	69c6      	ldr	r6, [r0, #28]
 800eb8c:	4605      	mov	r5, r0
 800eb8e:	460c      	mov	r4, r1
 800eb90:	b976      	cbnz	r6, 800ebb0 <_Bfree+0x28>
 800eb92:	2010      	movs	r0, #16
 800eb94:	f7fc fdde 	bl	800b754 <malloc>
 800eb98:	4602      	mov	r2, r0
 800eb9a:	61e8      	str	r0, [r5, #28]
 800eb9c:	b920      	cbnz	r0, 800eba8 <_Bfree+0x20>
 800eb9e:	4b09      	ldr	r3, [pc, #36]	@ (800ebc4 <_Bfree+0x3c>)
 800eba0:	4809      	ldr	r0, [pc, #36]	@ (800ebc8 <_Bfree+0x40>)
 800eba2:	218f      	movs	r1, #143	@ 0x8f
 800eba4:	f7fe fada 	bl	800d15c <__assert_func>
 800eba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ebac:	6006      	str	r6, [r0, #0]
 800ebae:	60c6      	str	r6, [r0, #12]
 800ebb0:	b13c      	cbz	r4, 800ebc2 <_Bfree+0x3a>
 800ebb2:	69eb      	ldr	r3, [r5, #28]
 800ebb4:	6862      	ldr	r2, [r4, #4]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ebbc:	6021      	str	r1, [r4, #0]
 800ebbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ebc2:	bd70      	pop	{r4, r5, r6, pc}
 800ebc4:	0801077d 	.word	0x0801077d
 800ebc8:	08010a6c 	.word	0x08010a6c

0800ebcc <__multadd>:
 800ebcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd0:	690d      	ldr	r5, [r1, #16]
 800ebd2:	4607      	mov	r7, r0
 800ebd4:	460c      	mov	r4, r1
 800ebd6:	461e      	mov	r6, r3
 800ebd8:	f101 0c14 	add.w	ip, r1, #20
 800ebdc:	2000      	movs	r0, #0
 800ebde:	f8dc 3000 	ldr.w	r3, [ip]
 800ebe2:	b299      	uxth	r1, r3
 800ebe4:	fb02 6101 	mla	r1, r2, r1, r6
 800ebe8:	0c1e      	lsrs	r6, r3, #16
 800ebea:	0c0b      	lsrs	r3, r1, #16
 800ebec:	fb02 3306 	mla	r3, r2, r6, r3
 800ebf0:	b289      	uxth	r1, r1
 800ebf2:	3001      	adds	r0, #1
 800ebf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ebf8:	4285      	cmp	r5, r0
 800ebfa:	f84c 1b04 	str.w	r1, [ip], #4
 800ebfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ec02:	dcec      	bgt.n	800ebde <__multadd+0x12>
 800ec04:	b30e      	cbz	r6, 800ec4a <__multadd+0x7e>
 800ec06:	68a3      	ldr	r3, [r4, #8]
 800ec08:	42ab      	cmp	r3, r5
 800ec0a:	dc19      	bgt.n	800ec40 <__multadd+0x74>
 800ec0c:	6861      	ldr	r1, [r4, #4]
 800ec0e:	4638      	mov	r0, r7
 800ec10:	3101      	adds	r1, #1
 800ec12:	f7ff ff79 	bl	800eb08 <_Balloc>
 800ec16:	4680      	mov	r8, r0
 800ec18:	b928      	cbnz	r0, 800ec26 <__multadd+0x5a>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ec50 <__multadd+0x84>)
 800ec1e:	480d      	ldr	r0, [pc, #52]	@ (800ec54 <__multadd+0x88>)
 800ec20:	21ba      	movs	r1, #186	@ 0xba
 800ec22:	f7fe fa9b 	bl	800d15c <__assert_func>
 800ec26:	6922      	ldr	r2, [r4, #16]
 800ec28:	3202      	adds	r2, #2
 800ec2a:	f104 010c 	add.w	r1, r4, #12
 800ec2e:	0092      	lsls	r2, r2, #2
 800ec30:	300c      	adds	r0, #12
 800ec32:	f7fe fa6e 	bl	800d112 <memcpy>
 800ec36:	4621      	mov	r1, r4
 800ec38:	4638      	mov	r0, r7
 800ec3a:	f7ff ffa5 	bl	800eb88 <_Bfree>
 800ec3e:	4644      	mov	r4, r8
 800ec40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec44:	3501      	adds	r5, #1
 800ec46:	615e      	str	r6, [r3, #20]
 800ec48:	6125      	str	r5, [r4, #16]
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec50:	080109ea 	.word	0x080109ea
 800ec54:	08010a6c 	.word	0x08010a6c

0800ec58 <__s2b>:
 800ec58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec5c:	460c      	mov	r4, r1
 800ec5e:	4615      	mov	r5, r2
 800ec60:	461f      	mov	r7, r3
 800ec62:	2209      	movs	r2, #9
 800ec64:	3308      	adds	r3, #8
 800ec66:	4606      	mov	r6, r0
 800ec68:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	2201      	movs	r2, #1
 800ec70:	429a      	cmp	r2, r3
 800ec72:	db09      	blt.n	800ec88 <__s2b+0x30>
 800ec74:	4630      	mov	r0, r6
 800ec76:	f7ff ff47 	bl	800eb08 <_Balloc>
 800ec7a:	b940      	cbnz	r0, 800ec8e <__s2b+0x36>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	4b19      	ldr	r3, [pc, #100]	@ (800ece4 <__s2b+0x8c>)
 800ec80:	4819      	ldr	r0, [pc, #100]	@ (800ece8 <__s2b+0x90>)
 800ec82:	21d3      	movs	r1, #211	@ 0xd3
 800ec84:	f7fe fa6a 	bl	800d15c <__assert_func>
 800ec88:	0052      	lsls	r2, r2, #1
 800ec8a:	3101      	adds	r1, #1
 800ec8c:	e7f0      	b.n	800ec70 <__s2b+0x18>
 800ec8e:	9b08      	ldr	r3, [sp, #32]
 800ec90:	6143      	str	r3, [r0, #20]
 800ec92:	2d09      	cmp	r5, #9
 800ec94:	f04f 0301 	mov.w	r3, #1
 800ec98:	6103      	str	r3, [r0, #16]
 800ec9a:	dd16      	ble.n	800ecca <__s2b+0x72>
 800ec9c:	f104 0909 	add.w	r9, r4, #9
 800eca0:	46c8      	mov	r8, r9
 800eca2:	442c      	add	r4, r5
 800eca4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eca8:	4601      	mov	r1, r0
 800ecaa:	3b30      	subs	r3, #48	@ 0x30
 800ecac:	220a      	movs	r2, #10
 800ecae:	4630      	mov	r0, r6
 800ecb0:	f7ff ff8c 	bl	800ebcc <__multadd>
 800ecb4:	45a0      	cmp	r8, r4
 800ecb6:	d1f5      	bne.n	800eca4 <__s2b+0x4c>
 800ecb8:	f1a5 0408 	sub.w	r4, r5, #8
 800ecbc:	444c      	add	r4, r9
 800ecbe:	1b2d      	subs	r5, r5, r4
 800ecc0:	1963      	adds	r3, r4, r5
 800ecc2:	42bb      	cmp	r3, r7
 800ecc4:	db04      	blt.n	800ecd0 <__s2b+0x78>
 800ecc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecca:	340a      	adds	r4, #10
 800eccc:	2509      	movs	r5, #9
 800ecce:	e7f6      	b.n	800ecbe <__s2b+0x66>
 800ecd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ecd4:	4601      	mov	r1, r0
 800ecd6:	3b30      	subs	r3, #48	@ 0x30
 800ecd8:	220a      	movs	r2, #10
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f7ff ff76 	bl	800ebcc <__multadd>
 800ece0:	e7ee      	b.n	800ecc0 <__s2b+0x68>
 800ece2:	bf00      	nop
 800ece4:	080109ea 	.word	0x080109ea
 800ece8:	08010a6c 	.word	0x08010a6c

0800ecec <__hi0bits>:
 800ecec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	bf36      	itet	cc
 800ecf4:	0403      	lslcc	r3, r0, #16
 800ecf6:	2000      	movcs	r0, #0
 800ecf8:	2010      	movcc	r0, #16
 800ecfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ecfe:	bf3c      	itt	cc
 800ed00:	021b      	lslcc	r3, r3, #8
 800ed02:	3008      	addcc	r0, #8
 800ed04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed08:	bf3c      	itt	cc
 800ed0a:	011b      	lslcc	r3, r3, #4
 800ed0c:	3004      	addcc	r0, #4
 800ed0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed12:	bf3c      	itt	cc
 800ed14:	009b      	lslcc	r3, r3, #2
 800ed16:	3002      	addcc	r0, #2
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	db05      	blt.n	800ed28 <__hi0bits+0x3c>
 800ed1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ed20:	f100 0001 	add.w	r0, r0, #1
 800ed24:	bf08      	it	eq
 800ed26:	2020      	moveq	r0, #32
 800ed28:	4770      	bx	lr

0800ed2a <__lo0bits>:
 800ed2a:	6803      	ldr	r3, [r0, #0]
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	f013 0007 	ands.w	r0, r3, #7
 800ed32:	d00b      	beq.n	800ed4c <__lo0bits+0x22>
 800ed34:	07d9      	lsls	r1, r3, #31
 800ed36:	d421      	bmi.n	800ed7c <__lo0bits+0x52>
 800ed38:	0798      	lsls	r0, r3, #30
 800ed3a:	bf49      	itett	mi
 800ed3c:	085b      	lsrmi	r3, r3, #1
 800ed3e:	089b      	lsrpl	r3, r3, #2
 800ed40:	2001      	movmi	r0, #1
 800ed42:	6013      	strmi	r3, [r2, #0]
 800ed44:	bf5c      	itt	pl
 800ed46:	6013      	strpl	r3, [r2, #0]
 800ed48:	2002      	movpl	r0, #2
 800ed4a:	4770      	bx	lr
 800ed4c:	b299      	uxth	r1, r3
 800ed4e:	b909      	cbnz	r1, 800ed54 <__lo0bits+0x2a>
 800ed50:	0c1b      	lsrs	r3, r3, #16
 800ed52:	2010      	movs	r0, #16
 800ed54:	b2d9      	uxtb	r1, r3
 800ed56:	b909      	cbnz	r1, 800ed5c <__lo0bits+0x32>
 800ed58:	3008      	adds	r0, #8
 800ed5a:	0a1b      	lsrs	r3, r3, #8
 800ed5c:	0719      	lsls	r1, r3, #28
 800ed5e:	bf04      	itt	eq
 800ed60:	091b      	lsreq	r3, r3, #4
 800ed62:	3004      	addeq	r0, #4
 800ed64:	0799      	lsls	r1, r3, #30
 800ed66:	bf04      	itt	eq
 800ed68:	089b      	lsreq	r3, r3, #2
 800ed6a:	3002      	addeq	r0, #2
 800ed6c:	07d9      	lsls	r1, r3, #31
 800ed6e:	d403      	bmi.n	800ed78 <__lo0bits+0x4e>
 800ed70:	085b      	lsrs	r3, r3, #1
 800ed72:	f100 0001 	add.w	r0, r0, #1
 800ed76:	d003      	beq.n	800ed80 <__lo0bits+0x56>
 800ed78:	6013      	str	r3, [r2, #0]
 800ed7a:	4770      	bx	lr
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	4770      	bx	lr
 800ed80:	2020      	movs	r0, #32
 800ed82:	4770      	bx	lr

0800ed84 <__i2b>:
 800ed84:	b510      	push	{r4, lr}
 800ed86:	460c      	mov	r4, r1
 800ed88:	2101      	movs	r1, #1
 800ed8a:	f7ff febd 	bl	800eb08 <_Balloc>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	b928      	cbnz	r0, 800ed9e <__i2b+0x1a>
 800ed92:	4b05      	ldr	r3, [pc, #20]	@ (800eda8 <__i2b+0x24>)
 800ed94:	4805      	ldr	r0, [pc, #20]	@ (800edac <__i2b+0x28>)
 800ed96:	f240 1145 	movw	r1, #325	@ 0x145
 800ed9a:	f7fe f9df 	bl	800d15c <__assert_func>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	6144      	str	r4, [r0, #20]
 800eda2:	6103      	str	r3, [r0, #16]
 800eda4:	bd10      	pop	{r4, pc}
 800eda6:	bf00      	nop
 800eda8:	080109ea 	.word	0x080109ea
 800edac:	08010a6c 	.word	0x08010a6c

0800edb0 <__multiply>:
 800edb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb4:	4614      	mov	r4, r2
 800edb6:	690a      	ldr	r2, [r1, #16]
 800edb8:	6923      	ldr	r3, [r4, #16]
 800edba:	429a      	cmp	r2, r3
 800edbc:	bfa8      	it	ge
 800edbe:	4623      	movge	r3, r4
 800edc0:	460f      	mov	r7, r1
 800edc2:	bfa4      	itt	ge
 800edc4:	460c      	movge	r4, r1
 800edc6:	461f      	movge	r7, r3
 800edc8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800edcc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800edd0:	68a3      	ldr	r3, [r4, #8]
 800edd2:	6861      	ldr	r1, [r4, #4]
 800edd4:	eb0a 0609 	add.w	r6, sl, r9
 800edd8:	42b3      	cmp	r3, r6
 800edda:	b085      	sub	sp, #20
 800eddc:	bfb8      	it	lt
 800edde:	3101      	addlt	r1, #1
 800ede0:	f7ff fe92 	bl	800eb08 <_Balloc>
 800ede4:	b930      	cbnz	r0, 800edf4 <__multiply+0x44>
 800ede6:	4602      	mov	r2, r0
 800ede8:	4b44      	ldr	r3, [pc, #272]	@ (800eefc <__multiply+0x14c>)
 800edea:	4845      	ldr	r0, [pc, #276]	@ (800ef00 <__multiply+0x150>)
 800edec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800edf0:	f7fe f9b4 	bl	800d15c <__assert_func>
 800edf4:	f100 0514 	add.w	r5, r0, #20
 800edf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800edfc:	462b      	mov	r3, r5
 800edfe:	2200      	movs	r2, #0
 800ee00:	4543      	cmp	r3, r8
 800ee02:	d321      	bcc.n	800ee48 <__multiply+0x98>
 800ee04:	f107 0114 	add.w	r1, r7, #20
 800ee08:	f104 0214 	add.w	r2, r4, #20
 800ee0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ee10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ee14:	9302      	str	r3, [sp, #8]
 800ee16:	1b13      	subs	r3, r2, r4
 800ee18:	3b15      	subs	r3, #21
 800ee1a:	f023 0303 	bic.w	r3, r3, #3
 800ee1e:	3304      	adds	r3, #4
 800ee20:	f104 0715 	add.w	r7, r4, #21
 800ee24:	42ba      	cmp	r2, r7
 800ee26:	bf38      	it	cc
 800ee28:	2304      	movcc	r3, #4
 800ee2a:	9301      	str	r3, [sp, #4]
 800ee2c:	9b02      	ldr	r3, [sp, #8]
 800ee2e:	9103      	str	r1, [sp, #12]
 800ee30:	428b      	cmp	r3, r1
 800ee32:	d80c      	bhi.n	800ee4e <__multiply+0x9e>
 800ee34:	2e00      	cmp	r6, #0
 800ee36:	dd03      	ble.n	800ee40 <__multiply+0x90>
 800ee38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d05b      	beq.n	800eef8 <__multiply+0x148>
 800ee40:	6106      	str	r6, [r0, #16]
 800ee42:	b005      	add	sp, #20
 800ee44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee48:	f843 2b04 	str.w	r2, [r3], #4
 800ee4c:	e7d8      	b.n	800ee00 <__multiply+0x50>
 800ee4e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ee52:	f1ba 0f00 	cmp.w	sl, #0
 800ee56:	d024      	beq.n	800eea2 <__multiply+0xf2>
 800ee58:	f104 0e14 	add.w	lr, r4, #20
 800ee5c:	46a9      	mov	r9, r5
 800ee5e:	f04f 0c00 	mov.w	ip, #0
 800ee62:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ee66:	f8d9 3000 	ldr.w	r3, [r9]
 800ee6a:	fa1f fb87 	uxth.w	fp, r7
 800ee6e:	b29b      	uxth	r3, r3
 800ee70:	fb0a 330b 	mla	r3, sl, fp, r3
 800ee74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ee78:	f8d9 7000 	ldr.w	r7, [r9]
 800ee7c:	4463      	add	r3, ip
 800ee7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ee82:	fb0a c70b 	mla	r7, sl, fp, ip
 800ee86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ee90:	4572      	cmp	r2, lr
 800ee92:	f849 3b04 	str.w	r3, [r9], #4
 800ee96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ee9a:	d8e2      	bhi.n	800ee62 <__multiply+0xb2>
 800ee9c:	9b01      	ldr	r3, [sp, #4]
 800ee9e:	f845 c003 	str.w	ip, [r5, r3]
 800eea2:	9b03      	ldr	r3, [sp, #12]
 800eea4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eea8:	3104      	adds	r1, #4
 800eeaa:	f1b9 0f00 	cmp.w	r9, #0
 800eeae:	d021      	beq.n	800eef4 <__multiply+0x144>
 800eeb0:	682b      	ldr	r3, [r5, #0]
 800eeb2:	f104 0c14 	add.w	ip, r4, #20
 800eeb6:	46ae      	mov	lr, r5
 800eeb8:	f04f 0a00 	mov.w	sl, #0
 800eebc:	f8bc b000 	ldrh.w	fp, [ip]
 800eec0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800eec4:	fb09 770b 	mla	r7, r9, fp, r7
 800eec8:	4457      	add	r7, sl
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eed0:	f84e 3b04 	str.w	r3, [lr], #4
 800eed4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eed8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eedc:	f8be 3000 	ldrh.w	r3, [lr]
 800eee0:	fb09 330a 	mla	r3, r9, sl, r3
 800eee4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800eee8:	4562      	cmp	r2, ip
 800eeea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eeee:	d8e5      	bhi.n	800eebc <__multiply+0x10c>
 800eef0:	9f01      	ldr	r7, [sp, #4]
 800eef2:	51eb      	str	r3, [r5, r7]
 800eef4:	3504      	adds	r5, #4
 800eef6:	e799      	b.n	800ee2c <__multiply+0x7c>
 800eef8:	3e01      	subs	r6, #1
 800eefa:	e79b      	b.n	800ee34 <__multiply+0x84>
 800eefc:	080109ea 	.word	0x080109ea
 800ef00:	08010a6c 	.word	0x08010a6c

0800ef04 <__pow5mult>:
 800ef04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef08:	4615      	mov	r5, r2
 800ef0a:	f012 0203 	ands.w	r2, r2, #3
 800ef0e:	4607      	mov	r7, r0
 800ef10:	460e      	mov	r6, r1
 800ef12:	d007      	beq.n	800ef24 <__pow5mult+0x20>
 800ef14:	4c25      	ldr	r4, [pc, #148]	@ (800efac <__pow5mult+0xa8>)
 800ef16:	3a01      	subs	r2, #1
 800ef18:	2300      	movs	r3, #0
 800ef1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef1e:	f7ff fe55 	bl	800ebcc <__multadd>
 800ef22:	4606      	mov	r6, r0
 800ef24:	10ad      	asrs	r5, r5, #2
 800ef26:	d03d      	beq.n	800efa4 <__pow5mult+0xa0>
 800ef28:	69fc      	ldr	r4, [r7, #28]
 800ef2a:	b97c      	cbnz	r4, 800ef4c <__pow5mult+0x48>
 800ef2c:	2010      	movs	r0, #16
 800ef2e:	f7fc fc11 	bl	800b754 <malloc>
 800ef32:	4602      	mov	r2, r0
 800ef34:	61f8      	str	r0, [r7, #28]
 800ef36:	b928      	cbnz	r0, 800ef44 <__pow5mult+0x40>
 800ef38:	4b1d      	ldr	r3, [pc, #116]	@ (800efb0 <__pow5mult+0xac>)
 800ef3a:	481e      	ldr	r0, [pc, #120]	@ (800efb4 <__pow5mult+0xb0>)
 800ef3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ef40:	f7fe f90c 	bl	800d15c <__assert_func>
 800ef44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef48:	6004      	str	r4, [r0, #0]
 800ef4a:	60c4      	str	r4, [r0, #12]
 800ef4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ef50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef54:	b94c      	cbnz	r4, 800ef6a <__pow5mult+0x66>
 800ef56:	f240 2171 	movw	r1, #625	@ 0x271
 800ef5a:	4638      	mov	r0, r7
 800ef5c:	f7ff ff12 	bl	800ed84 <__i2b>
 800ef60:	2300      	movs	r3, #0
 800ef62:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef66:	4604      	mov	r4, r0
 800ef68:	6003      	str	r3, [r0, #0]
 800ef6a:	f04f 0900 	mov.w	r9, #0
 800ef6e:	07eb      	lsls	r3, r5, #31
 800ef70:	d50a      	bpl.n	800ef88 <__pow5mult+0x84>
 800ef72:	4631      	mov	r1, r6
 800ef74:	4622      	mov	r2, r4
 800ef76:	4638      	mov	r0, r7
 800ef78:	f7ff ff1a 	bl	800edb0 <__multiply>
 800ef7c:	4631      	mov	r1, r6
 800ef7e:	4680      	mov	r8, r0
 800ef80:	4638      	mov	r0, r7
 800ef82:	f7ff fe01 	bl	800eb88 <_Bfree>
 800ef86:	4646      	mov	r6, r8
 800ef88:	106d      	asrs	r5, r5, #1
 800ef8a:	d00b      	beq.n	800efa4 <__pow5mult+0xa0>
 800ef8c:	6820      	ldr	r0, [r4, #0]
 800ef8e:	b938      	cbnz	r0, 800efa0 <__pow5mult+0x9c>
 800ef90:	4622      	mov	r2, r4
 800ef92:	4621      	mov	r1, r4
 800ef94:	4638      	mov	r0, r7
 800ef96:	f7ff ff0b 	bl	800edb0 <__multiply>
 800ef9a:	6020      	str	r0, [r4, #0]
 800ef9c:	f8c0 9000 	str.w	r9, [r0]
 800efa0:	4604      	mov	r4, r0
 800efa2:	e7e4      	b.n	800ef6e <__pow5mult+0x6a>
 800efa4:	4630      	mov	r0, r6
 800efa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efaa:	bf00      	nop
 800efac:	08010ac8 	.word	0x08010ac8
 800efb0:	0801077d 	.word	0x0801077d
 800efb4:	08010a6c 	.word	0x08010a6c

0800efb8 <__lshift>:
 800efb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efbc:	460c      	mov	r4, r1
 800efbe:	6849      	ldr	r1, [r1, #4]
 800efc0:	6923      	ldr	r3, [r4, #16]
 800efc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800efc6:	68a3      	ldr	r3, [r4, #8]
 800efc8:	4607      	mov	r7, r0
 800efca:	4691      	mov	r9, r2
 800efcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800efd0:	f108 0601 	add.w	r6, r8, #1
 800efd4:	42b3      	cmp	r3, r6
 800efd6:	db0b      	blt.n	800eff0 <__lshift+0x38>
 800efd8:	4638      	mov	r0, r7
 800efda:	f7ff fd95 	bl	800eb08 <_Balloc>
 800efde:	4605      	mov	r5, r0
 800efe0:	b948      	cbnz	r0, 800eff6 <__lshift+0x3e>
 800efe2:	4602      	mov	r2, r0
 800efe4:	4b28      	ldr	r3, [pc, #160]	@ (800f088 <__lshift+0xd0>)
 800efe6:	4829      	ldr	r0, [pc, #164]	@ (800f08c <__lshift+0xd4>)
 800efe8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800efec:	f7fe f8b6 	bl	800d15c <__assert_func>
 800eff0:	3101      	adds	r1, #1
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	e7ee      	b.n	800efd4 <__lshift+0x1c>
 800eff6:	2300      	movs	r3, #0
 800eff8:	f100 0114 	add.w	r1, r0, #20
 800effc:	f100 0210 	add.w	r2, r0, #16
 800f000:	4618      	mov	r0, r3
 800f002:	4553      	cmp	r3, sl
 800f004:	db33      	blt.n	800f06e <__lshift+0xb6>
 800f006:	6920      	ldr	r0, [r4, #16]
 800f008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f00c:	f104 0314 	add.w	r3, r4, #20
 800f010:	f019 091f 	ands.w	r9, r9, #31
 800f014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f018:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f01c:	d02b      	beq.n	800f076 <__lshift+0xbe>
 800f01e:	f1c9 0e20 	rsb	lr, r9, #32
 800f022:	468a      	mov	sl, r1
 800f024:	2200      	movs	r2, #0
 800f026:	6818      	ldr	r0, [r3, #0]
 800f028:	fa00 f009 	lsl.w	r0, r0, r9
 800f02c:	4310      	orrs	r0, r2
 800f02e:	f84a 0b04 	str.w	r0, [sl], #4
 800f032:	f853 2b04 	ldr.w	r2, [r3], #4
 800f036:	459c      	cmp	ip, r3
 800f038:	fa22 f20e 	lsr.w	r2, r2, lr
 800f03c:	d8f3      	bhi.n	800f026 <__lshift+0x6e>
 800f03e:	ebac 0304 	sub.w	r3, ip, r4
 800f042:	3b15      	subs	r3, #21
 800f044:	f023 0303 	bic.w	r3, r3, #3
 800f048:	3304      	adds	r3, #4
 800f04a:	f104 0015 	add.w	r0, r4, #21
 800f04e:	4584      	cmp	ip, r0
 800f050:	bf38      	it	cc
 800f052:	2304      	movcc	r3, #4
 800f054:	50ca      	str	r2, [r1, r3]
 800f056:	b10a      	cbz	r2, 800f05c <__lshift+0xa4>
 800f058:	f108 0602 	add.w	r6, r8, #2
 800f05c:	3e01      	subs	r6, #1
 800f05e:	4638      	mov	r0, r7
 800f060:	612e      	str	r6, [r5, #16]
 800f062:	4621      	mov	r1, r4
 800f064:	f7ff fd90 	bl	800eb88 <_Bfree>
 800f068:	4628      	mov	r0, r5
 800f06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f06e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f072:	3301      	adds	r3, #1
 800f074:	e7c5      	b.n	800f002 <__lshift+0x4a>
 800f076:	3904      	subs	r1, #4
 800f078:	f853 2b04 	ldr.w	r2, [r3], #4
 800f07c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f080:	459c      	cmp	ip, r3
 800f082:	d8f9      	bhi.n	800f078 <__lshift+0xc0>
 800f084:	e7ea      	b.n	800f05c <__lshift+0xa4>
 800f086:	bf00      	nop
 800f088:	080109ea 	.word	0x080109ea
 800f08c:	08010a6c 	.word	0x08010a6c

0800f090 <__mcmp>:
 800f090:	690a      	ldr	r2, [r1, #16]
 800f092:	4603      	mov	r3, r0
 800f094:	6900      	ldr	r0, [r0, #16]
 800f096:	1a80      	subs	r0, r0, r2
 800f098:	b530      	push	{r4, r5, lr}
 800f09a:	d10e      	bne.n	800f0ba <__mcmp+0x2a>
 800f09c:	3314      	adds	r3, #20
 800f09e:	3114      	adds	r1, #20
 800f0a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f0a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f0a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f0ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f0b0:	4295      	cmp	r5, r2
 800f0b2:	d003      	beq.n	800f0bc <__mcmp+0x2c>
 800f0b4:	d205      	bcs.n	800f0c2 <__mcmp+0x32>
 800f0b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0ba:	bd30      	pop	{r4, r5, pc}
 800f0bc:	42a3      	cmp	r3, r4
 800f0be:	d3f3      	bcc.n	800f0a8 <__mcmp+0x18>
 800f0c0:	e7fb      	b.n	800f0ba <__mcmp+0x2a>
 800f0c2:	2001      	movs	r0, #1
 800f0c4:	e7f9      	b.n	800f0ba <__mcmp+0x2a>
	...

0800f0c8 <__mdiff>:
 800f0c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0cc:	4689      	mov	r9, r1
 800f0ce:	4606      	mov	r6, r0
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	4648      	mov	r0, r9
 800f0d4:	4614      	mov	r4, r2
 800f0d6:	f7ff ffdb 	bl	800f090 <__mcmp>
 800f0da:	1e05      	subs	r5, r0, #0
 800f0dc:	d112      	bne.n	800f104 <__mdiff+0x3c>
 800f0de:	4629      	mov	r1, r5
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f7ff fd11 	bl	800eb08 <_Balloc>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	b928      	cbnz	r0, 800f0f6 <__mdiff+0x2e>
 800f0ea:	4b3f      	ldr	r3, [pc, #252]	@ (800f1e8 <__mdiff+0x120>)
 800f0ec:	f240 2137 	movw	r1, #567	@ 0x237
 800f0f0:	483e      	ldr	r0, [pc, #248]	@ (800f1ec <__mdiff+0x124>)
 800f0f2:	f7fe f833 	bl	800d15c <__assert_func>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	b003      	add	sp, #12
 800f100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f104:	bfbc      	itt	lt
 800f106:	464b      	movlt	r3, r9
 800f108:	46a1      	movlt	r9, r4
 800f10a:	4630      	mov	r0, r6
 800f10c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f110:	bfba      	itte	lt
 800f112:	461c      	movlt	r4, r3
 800f114:	2501      	movlt	r5, #1
 800f116:	2500      	movge	r5, #0
 800f118:	f7ff fcf6 	bl	800eb08 <_Balloc>
 800f11c:	4602      	mov	r2, r0
 800f11e:	b918      	cbnz	r0, 800f128 <__mdiff+0x60>
 800f120:	4b31      	ldr	r3, [pc, #196]	@ (800f1e8 <__mdiff+0x120>)
 800f122:	f240 2145 	movw	r1, #581	@ 0x245
 800f126:	e7e3      	b.n	800f0f0 <__mdiff+0x28>
 800f128:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f12c:	6926      	ldr	r6, [r4, #16]
 800f12e:	60c5      	str	r5, [r0, #12]
 800f130:	f109 0310 	add.w	r3, r9, #16
 800f134:	f109 0514 	add.w	r5, r9, #20
 800f138:	f104 0e14 	add.w	lr, r4, #20
 800f13c:	f100 0b14 	add.w	fp, r0, #20
 800f140:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f144:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f148:	9301      	str	r3, [sp, #4]
 800f14a:	46d9      	mov	r9, fp
 800f14c:	f04f 0c00 	mov.w	ip, #0
 800f150:	9b01      	ldr	r3, [sp, #4]
 800f152:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f156:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f15a:	9301      	str	r3, [sp, #4]
 800f15c:	fa1f f38a 	uxth.w	r3, sl
 800f160:	4619      	mov	r1, r3
 800f162:	b283      	uxth	r3, r0
 800f164:	1acb      	subs	r3, r1, r3
 800f166:	0c00      	lsrs	r0, r0, #16
 800f168:	4463      	add	r3, ip
 800f16a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f16e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f172:	b29b      	uxth	r3, r3
 800f174:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f178:	4576      	cmp	r6, lr
 800f17a:	f849 3b04 	str.w	r3, [r9], #4
 800f17e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f182:	d8e5      	bhi.n	800f150 <__mdiff+0x88>
 800f184:	1b33      	subs	r3, r6, r4
 800f186:	3b15      	subs	r3, #21
 800f188:	f023 0303 	bic.w	r3, r3, #3
 800f18c:	3415      	adds	r4, #21
 800f18e:	3304      	adds	r3, #4
 800f190:	42a6      	cmp	r6, r4
 800f192:	bf38      	it	cc
 800f194:	2304      	movcc	r3, #4
 800f196:	441d      	add	r5, r3
 800f198:	445b      	add	r3, fp
 800f19a:	461e      	mov	r6, r3
 800f19c:	462c      	mov	r4, r5
 800f19e:	4544      	cmp	r4, r8
 800f1a0:	d30e      	bcc.n	800f1c0 <__mdiff+0xf8>
 800f1a2:	f108 0103 	add.w	r1, r8, #3
 800f1a6:	1b49      	subs	r1, r1, r5
 800f1a8:	f021 0103 	bic.w	r1, r1, #3
 800f1ac:	3d03      	subs	r5, #3
 800f1ae:	45a8      	cmp	r8, r5
 800f1b0:	bf38      	it	cc
 800f1b2:	2100      	movcc	r1, #0
 800f1b4:	440b      	add	r3, r1
 800f1b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f1ba:	b191      	cbz	r1, 800f1e2 <__mdiff+0x11a>
 800f1bc:	6117      	str	r7, [r2, #16]
 800f1be:	e79d      	b.n	800f0fc <__mdiff+0x34>
 800f1c0:	f854 1b04 	ldr.w	r1, [r4], #4
 800f1c4:	46e6      	mov	lr, ip
 800f1c6:	0c08      	lsrs	r0, r1, #16
 800f1c8:	fa1c fc81 	uxtah	ip, ip, r1
 800f1cc:	4471      	add	r1, lr
 800f1ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f1d2:	b289      	uxth	r1, r1
 800f1d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f1d8:	f846 1b04 	str.w	r1, [r6], #4
 800f1dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f1e0:	e7dd      	b.n	800f19e <__mdiff+0xd6>
 800f1e2:	3f01      	subs	r7, #1
 800f1e4:	e7e7      	b.n	800f1b6 <__mdiff+0xee>
 800f1e6:	bf00      	nop
 800f1e8:	080109ea 	.word	0x080109ea
 800f1ec:	08010a6c 	.word	0x08010a6c

0800f1f0 <__ulp>:
 800f1f0:	b082      	sub	sp, #8
 800f1f2:	ed8d 0b00 	vstr	d0, [sp]
 800f1f6:	9a01      	ldr	r2, [sp, #4]
 800f1f8:	4b0f      	ldr	r3, [pc, #60]	@ (800f238 <__ulp+0x48>)
 800f1fa:	4013      	ands	r3, r2
 800f1fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f200:	2b00      	cmp	r3, #0
 800f202:	dc08      	bgt.n	800f216 <__ulp+0x26>
 800f204:	425b      	negs	r3, r3
 800f206:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f20a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f20e:	da04      	bge.n	800f21a <__ulp+0x2a>
 800f210:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f214:	4113      	asrs	r3, r2
 800f216:	2200      	movs	r2, #0
 800f218:	e008      	b.n	800f22c <__ulp+0x3c>
 800f21a:	f1a2 0314 	sub.w	r3, r2, #20
 800f21e:	2b1e      	cmp	r3, #30
 800f220:	bfda      	itte	le
 800f222:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f226:	40da      	lsrle	r2, r3
 800f228:	2201      	movgt	r2, #1
 800f22a:	2300      	movs	r3, #0
 800f22c:	4619      	mov	r1, r3
 800f22e:	4610      	mov	r0, r2
 800f230:	ec41 0b10 	vmov	d0, r0, r1
 800f234:	b002      	add	sp, #8
 800f236:	4770      	bx	lr
 800f238:	7ff00000 	.word	0x7ff00000

0800f23c <__b2d>:
 800f23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f240:	6906      	ldr	r6, [r0, #16]
 800f242:	f100 0814 	add.w	r8, r0, #20
 800f246:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f24a:	1f37      	subs	r7, r6, #4
 800f24c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f250:	4610      	mov	r0, r2
 800f252:	f7ff fd4b 	bl	800ecec <__hi0bits>
 800f256:	f1c0 0320 	rsb	r3, r0, #32
 800f25a:	280a      	cmp	r0, #10
 800f25c:	600b      	str	r3, [r1, #0]
 800f25e:	491b      	ldr	r1, [pc, #108]	@ (800f2cc <__b2d+0x90>)
 800f260:	dc15      	bgt.n	800f28e <__b2d+0x52>
 800f262:	f1c0 0c0b 	rsb	ip, r0, #11
 800f266:	fa22 f30c 	lsr.w	r3, r2, ip
 800f26a:	45b8      	cmp	r8, r7
 800f26c:	ea43 0501 	orr.w	r5, r3, r1
 800f270:	bf34      	ite	cc
 800f272:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f276:	2300      	movcs	r3, #0
 800f278:	3015      	adds	r0, #21
 800f27a:	fa02 f000 	lsl.w	r0, r2, r0
 800f27e:	fa23 f30c 	lsr.w	r3, r3, ip
 800f282:	4303      	orrs	r3, r0
 800f284:	461c      	mov	r4, r3
 800f286:	ec45 4b10 	vmov	d0, r4, r5
 800f28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f28e:	45b8      	cmp	r8, r7
 800f290:	bf3a      	itte	cc
 800f292:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f296:	f1a6 0708 	subcc.w	r7, r6, #8
 800f29a:	2300      	movcs	r3, #0
 800f29c:	380b      	subs	r0, #11
 800f29e:	d012      	beq.n	800f2c6 <__b2d+0x8a>
 800f2a0:	f1c0 0120 	rsb	r1, r0, #32
 800f2a4:	fa23 f401 	lsr.w	r4, r3, r1
 800f2a8:	4082      	lsls	r2, r0
 800f2aa:	4322      	orrs	r2, r4
 800f2ac:	4547      	cmp	r7, r8
 800f2ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f2b2:	bf8c      	ite	hi
 800f2b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f2b8:	2200      	movls	r2, #0
 800f2ba:	4083      	lsls	r3, r0
 800f2bc:	40ca      	lsrs	r2, r1
 800f2be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	e7de      	b.n	800f284 <__b2d+0x48>
 800f2c6:	ea42 0501 	orr.w	r5, r2, r1
 800f2ca:	e7db      	b.n	800f284 <__b2d+0x48>
 800f2cc:	3ff00000 	.word	0x3ff00000

0800f2d0 <__d2b>:
 800f2d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f2d4:	460f      	mov	r7, r1
 800f2d6:	2101      	movs	r1, #1
 800f2d8:	ec59 8b10 	vmov	r8, r9, d0
 800f2dc:	4616      	mov	r6, r2
 800f2de:	f7ff fc13 	bl	800eb08 <_Balloc>
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	b930      	cbnz	r0, 800f2f4 <__d2b+0x24>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	4b23      	ldr	r3, [pc, #140]	@ (800f378 <__d2b+0xa8>)
 800f2ea:	4824      	ldr	r0, [pc, #144]	@ (800f37c <__d2b+0xac>)
 800f2ec:	f240 310f 	movw	r1, #783	@ 0x30f
 800f2f0:	f7fd ff34 	bl	800d15c <__assert_func>
 800f2f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f2f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f2fc:	b10d      	cbz	r5, 800f302 <__d2b+0x32>
 800f2fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f302:	9301      	str	r3, [sp, #4]
 800f304:	f1b8 0300 	subs.w	r3, r8, #0
 800f308:	d023      	beq.n	800f352 <__d2b+0x82>
 800f30a:	4668      	mov	r0, sp
 800f30c:	9300      	str	r3, [sp, #0]
 800f30e:	f7ff fd0c 	bl	800ed2a <__lo0bits>
 800f312:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f316:	b1d0      	cbz	r0, 800f34e <__d2b+0x7e>
 800f318:	f1c0 0320 	rsb	r3, r0, #32
 800f31c:	fa02 f303 	lsl.w	r3, r2, r3
 800f320:	430b      	orrs	r3, r1
 800f322:	40c2      	lsrs	r2, r0
 800f324:	6163      	str	r3, [r4, #20]
 800f326:	9201      	str	r2, [sp, #4]
 800f328:	9b01      	ldr	r3, [sp, #4]
 800f32a:	61a3      	str	r3, [r4, #24]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	bf0c      	ite	eq
 800f330:	2201      	moveq	r2, #1
 800f332:	2202      	movne	r2, #2
 800f334:	6122      	str	r2, [r4, #16]
 800f336:	b1a5      	cbz	r5, 800f362 <__d2b+0x92>
 800f338:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f33c:	4405      	add	r5, r0
 800f33e:	603d      	str	r5, [r7, #0]
 800f340:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f344:	6030      	str	r0, [r6, #0]
 800f346:	4620      	mov	r0, r4
 800f348:	b003      	add	sp, #12
 800f34a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f34e:	6161      	str	r1, [r4, #20]
 800f350:	e7ea      	b.n	800f328 <__d2b+0x58>
 800f352:	a801      	add	r0, sp, #4
 800f354:	f7ff fce9 	bl	800ed2a <__lo0bits>
 800f358:	9b01      	ldr	r3, [sp, #4]
 800f35a:	6163      	str	r3, [r4, #20]
 800f35c:	3020      	adds	r0, #32
 800f35e:	2201      	movs	r2, #1
 800f360:	e7e8      	b.n	800f334 <__d2b+0x64>
 800f362:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f366:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f36a:	6038      	str	r0, [r7, #0]
 800f36c:	6918      	ldr	r0, [r3, #16]
 800f36e:	f7ff fcbd 	bl	800ecec <__hi0bits>
 800f372:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f376:	e7e5      	b.n	800f344 <__d2b+0x74>
 800f378:	080109ea 	.word	0x080109ea
 800f37c:	08010a6c 	.word	0x08010a6c

0800f380 <__ratio>:
 800f380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f384:	4688      	mov	r8, r1
 800f386:	4669      	mov	r1, sp
 800f388:	4681      	mov	r9, r0
 800f38a:	f7ff ff57 	bl	800f23c <__b2d>
 800f38e:	a901      	add	r1, sp, #4
 800f390:	4640      	mov	r0, r8
 800f392:	ec55 4b10 	vmov	r4, r5, d0
 800f396:	f7ff ff51 	bl	800f23c <__b2d>
 800f39a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f39e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f3a2:	1ad2      	subs	r2, r2, r3
 800f3a4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f3a8:	1a5b      	subs	r3, r3, r1
 800f3aa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800f3ae:	ec57 6b10 	vmov	r6, r7, d0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	bfd6      	itet	le
 800f3b6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f3ba:	462a      	movgt	r2, r5
 800f3bc:	463a      	movle	r2, r7
 800f3be:	46ab      	mov	fp, r5
 800f3c0:	46a2      	mov	sl, r4
 800f3c2:	bfce      	itee	gt
 800f3c4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800f3c8:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800f3cc:	ee00 3a90 	vmovle	s1, r3
 800f3d0:	ec4b ab17 	vmov	d7, sl, fp
 800f3d4:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800f3d8:	b003      	add	sp, #12
 800f3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3de <__copybits>:
 800f3de:	3901      	subs	r1, #1
 800f3e0:	b570      	push	{r4, r5, r6, lr}
 800f3e2:	1149      	asrs	r1, r1, #5
 800f3e4:	6914      	ldr	r4, [r2, #16]
 800f3e6:	3101      	adds	r1, #1
 800f3e8:	f102 0314 	add.w	r3, r2, #20
 800f3ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f3f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f3f4:	1f05      	subs	r5, r0, #4
 800f3f6:	42a3      	cmp	r3, r4
 800f3f8:	d30c      	bcc.n	800f414 <__copybits+0x36>
 800f3fa:	1aa3      	subs	r3, r4, r2
 800f3fc:	3b11      	subs	r3, #17
 800f3fe:	f023 0303 	bic.w	r3, r3, #3
 800f402:	3211      	adds	r2, #17
 800f404:	42a2      	cmp	r2, r4
 800f406:	bf88      	it	hi
 800f408:	2300      	movhi	r3, #0
 800f40a:	4418      	add	r0, r3
 800f40c:	2300      	movs	r3, #0
 800f40e:	4288      	cmp	r0, r1
 800f410:	d305      	bcc.n	800f41e <__copybits+0x40>
 800f412:	bd70      	pop	{r4, r5, r6, pc}
 800f414:	f853 6b04 	ldr.w	r6, [r3], #4
 800f418:	f845 6f04 	str.w	r6, [r5, #4]!
 800f41c:	e7eb      	b.n	800f3f6 <__copybits+0x18>
 800f41e:	f840 3b04 	str.w	r3, [r0], #4
 800f422:	e7f4      	b.n	800f40e <__copybits+0x30>

0800f424 <__any_on>:
 800f424:	f100 0214 	add.w	r2, r0, #20
 800f428:	6900      	ldr	r0, [r0, #16]
 800f42a:	114b      	asrs	r3, r1, #5
 800f42c:	4298      	cmp	r0, r3
 800f42e:	b510      	push	{r4, lr}
 800f430:	db11      	blt.n	800f456 <__any_on+0x32>
 800f432:	dd0a      	ble.n	800f44a <__any_on+0x26>
 800f434:	f011 011f 	ands.w	r1, r1, #31
 800f438:	d007      	beq.n	800f44a <__any_on+0x26>
 800f43a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f43e:	fa24 f001 	lsr.w	r0, r4, r1
 800f442:	fa00 f101 	lsl.w	r1, r0, r1
 800f446:	428c      	cmp	r4, r1
 800f448:	d10b      	bne.n	800f462 <__any_on+0x3e>
 800f44a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f44e:	4293      	cmp	r3, r2
 800f450:	d803      	bhi.n	800f45a <__any_on+0x36>
 800f452:	2000      	movs	r0, #0
 800f454:	bd10      	pop	{r4, pc}
 800f456:	4603      	mov	r3, r0
 800f458:	e7f7      	b.n	800f44a <__any_on+0x26>
 800f45a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f45e:	2900      	cmp	r1, #0
 800f460:	d0f5      	beq.n	800f44e <__any_on+0x2a>
 800f462:	2001      	movs	r0, #1
 800f464:	e7f6      	b.n	800f454 <__any_on+0x30>

0800f466 <__sread>:
 800f466:	b510      	push	{r4, lr}
 800f468:	460c      	mov	r4, r1
 800f46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f46e:	f000 fa13 	bl	800f898 <_read_r>
 800f472:	2800      	cmp	r0, #0
 800f474:	bfab      	itete	ge
 800f476:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f478:	89a3      	ldrhlt	r3, [r4, #12]
 800f47a:	181b      	addge	r3, r3, r0
 800f47c:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f480:	bfac      	ite	ge
 800f482:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f484:	81a3      	strhlt	r3, [r4, #12]
 800f486:	bd10      	pop	{r4, pc}

0800f488 <__swrite>:
 800f488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f48c:	461f      	mov	r7, r3
 800f48e:	898b      	ldrh	r3, [r1, #12]
 800f490:	05db      	lsls	r3, r3, #23
 800f492:	4605      	mov	r5, r0
 800f494:	460c      	mov	r4, r1
 800f496:	4616      	mov	r6, r2
 800f498:	d505      	bpl.n	800f4a6 <__swrite+0x1e>
 800f49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f49e:	2302      	movs	r3, #2
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f000 f9e7 	bl	800f874 <_lseek_r>
 800f4a6:	89a3      	ldrh	r3, [r4, #12]
 800f4a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f4b0:	81a3      	strh	r3, [r4, #12]
 800f4b2:	4632      	mov	r2, r6
 800f4b4:	463b      	mov	r3, r7
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4bc:	f000 b9fe 	b.w	800f8bc <_write_r>

0800f4c0 <__sseek>:
 800f4c0:	b510      	push	{r4, lr}
 800f4c2:	460c      	mov	r4, r1
 800f4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4c8:	f000 f9d4 	bl	800f874 <_lseek_r>
 800f4cc:	1c43      	adds	r3, r0, #1
 800f4ce:	89a3      	ldrh	r3, [r4, #12]
 800f4d0:	bf15      	itete	ne
 800f4d2:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f4d4:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f4d8:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f4dc:	81a3      	strheq	r3, [r4, #12]
 800f4de:	bf18      	it	ne
 800f4e0:	81a3      	strhne	r3, [r4, #12]
 800f4e2:	bd10      	pop	{r4, pc}

0800f4e4 <__sclose>:
 800f4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4e8:	f000 b992 	b.w	800f810 <_close_r>

0800f4ec <fiprintf>:
 800f4ec:	b40e      	push	{r1, r2, r3}
 800f4ee:	b503      	push	{r0, r1, lr}
 800f4f0:	4601      	mov	r1, r0
 800f4f2:	ab03      	add	r3, sp, #12
 800f4f4:	4805      	ldr	r0, [pc, #20]	@ (800f50c <fiprintf+0x20>)
 800f4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4fa:	6800      	ldr	r0, [r0, #0]
 800f4fc:	9301      	str	r3, [sp, #4]
 800f4fe:	f7ff f92d 	bl	800e75c <_vfiprintf_r>
 800f502:	b002      	add	sp, #8
 800f504:	f85d eb04 	ldr.w	lr, [sp], #4
 800f508:	b003      	add	sp, #12
 800f50a:	4770      	bx	lr
 800f50c:	20000200 	.word	0x20000200

0800f510 <_realloc_r>:
 800f510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f514:	4680      	mov	r8, r0
 800f516:	4615      	mov	r5, r2
 800f518:	460c      	mov	r4, r1
 800f51a:	b921      	cbnz	r1, 800f526 <_realloc_r+0x16>
 800f51c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f520:	4611      	mov	r1, r2
 800f522:	f7fc b949 	b.w	800b7b8 <_malloc_r>
 800f526:	b92a      	cbnz	r2, 800f534 <_realloc_r+0x24>
 800f528:	f7fe fc14 	bl	800dd54 <_free_r>
 800f52c:	2400      	movs	r4, #0
 800f52e:	4620      	mov	r0, r4
 800f530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f534:	f000 f9ef 	bl	800f916 <_malloc_usable_size_r>
 800f538:	4285      	cmp	r5, r0
 800f53a:	4606      	mov	r6, r0
 800f53c:	d802      	bhi.n	800f544 <_realloc_r+0x34>
 800f53e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f542:	d8f4      	bhi.n	800f52e <_realloc_r+0x1e>
 800f544:	4629      	mov	r1, r5
 800f546:	4640      	mov	r0, r8
 800f548:	f7fc f936 	bl	800b7b8 <_malloc_r>
 800f54c:	4607      	mov	r7, r0
 800f54e:	2800      	cmp	r0, #0
 800f550:	d0ec      	beq.n	800f52c <_realloc_r+0x1c>
 800f552:	42b5      	cmp	r5, r6
 800f554:	462a      	mov	r2, r5
 800f556:	4621      	mov	r1, r4
 800f558:	bf28      	it	cs
 800f55a:	4632      	movcs	r2, r6
 800f55c:	f7fd fdd9 	bl	800d112 <memcpy>
 800f560:	4621      	mov	r1, r4
 800f562:	4640      	mov	r0, r8
 800f564:	f7fe fbf6 	bl	800dd54 <_free_r>
 800f568:	463c      	mov	r4, r7
 800f56a:	e7e0      	b.n	800f52e <_realloc_r+0x1e>

0800f56c <__swbuf_r>:
 800f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56e:	460e      	mov	r6, r1
 800f570:	4614      	mov	r4, r2
 800f572:	4605      	mov	r5, r0
 800f574:	b118      	cbz	r0, 800f57e <__swbuf_r+0x12>
 800f576:	6a03      	ldr	r3, [r0, #32]
 800f578:	b90b      	cbnz	r3, 800f57e <__swbuf_r+0x12>
 800f57a:	f7fc fe8f 	bl	800c29c <__sinit>
 800f57e:	69a3      	ldr	r3, [r4, #24]
 800f580:	60a3      	str	r3, [r4, #8]
 800f582:	89a3      	ldrh	r3, [r4, #12]
 800f584:	071a      	lsls	r2, r3, #28
 800f586:	d501      	bpl.n	800f58c <__swbuf_r+0x20>
 800f588:	6923      	ldr	r3, [r4, #16]
 800f58a:	b943      	cbnz	r3, 800f59e <__swbuf_r+0x32>
 800f58c:	4621      	mov	r1, r4
 800f58e:	4628      	mov	r0, r5
 800f590:	f000 f82a 	bl	800f5e8 <__swsetup_r>
 800f594:	b118      	cbz	r0, 800f59e <__swbuf_r+0x32>
 800f596:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f59a:	4638      	mov	r0, r7
 800f59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f59e:	6823      	ldr	r3, [r4, #0]
 800f5a0:	6922      	ldr	r2, [r4, #16]
 800f5a2:	1a98      	subs	r0, r3, r2
 800f5a4:	6963      	ldr	r3, [r4, #20]
 800f5a6:	b2f6      	uxtb	r6, r6
 800f5a8:	4283      	cmp	r3, r0
 800f5aa:	4637      	mov	r7, r6
 800f5ac:	dc05      	bgt.n	800f5ba <__swbuf_r+0x4e>
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	f7ff fa81 	bl	800eab8 <_fflush_r>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	d1ed      	bne.n	800f596 <__swbuf_r+0x2a>
 800f5ba:	68a3      	ldr	r3, [r4, #8]
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	60a3      	str	r3, [r4, #8]
 800f5c0:	6823      	ldr	r3, [r4, #0]
 800f5c2:	1c5a      	adds	r2, r3, #1
 800f5c4:	6022      	str	r2, [r4, #0]
 800f5c6:	701e      	strb	r6, [r3, #0]
 800f5c8:	6962      	ldr	r2, [r4, #20]
 800f5ca:	1c43      	adds	r3, r0, #1
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d004      	beq.n	800f5da <__swbuf_r+0x6e>
 800f5d0:	89a3      	ldrh	r3, [r4, #12]
 800f5d2:	07db      	lsls	r3, r3, #31
 800f5d4:	d5e1      	bpl.n	800f59a <__swbuf_r+0x2e>
 800f5d6:	2e0a      	cmp	r6, #10
 800f5d8:	d1df      	bne.n	800f59a <__swbuf_r+0x2e>
 800f5da:	4621      	mov	r1, r4
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f7ff fa6b 	bl	800eab8 <_fflush_r>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	d0d9      	beq.n	800f59a <__swbuf_r+0x2e>
 800f5e6:	e7d6      	b.n	800f596 <__swbuf_r+0x2a>

0800f5e8 <__swsetup_r>:
 800f5e8:	b538      	push	{r3, r4, r5, lr}
 800f5ea:	4b29      	ldr	r3, [pc, #164]	@ (800f690 <__swsetup_r+0xa8>)
 800f5ec:	4605      	mov	r5, r0
 800f5ee:	6818      	ldr	r0, [r3, #0]
 800f5f0:	460c      	mov	r4, r1
 800f5f2:	b118      	cbz	r0, 800f5fc <__swsetup_r+0x14>
 800f5f4:	6a03      	ldr	r3, [r0, #32]
 800f5f6:	b90b      	cbnz	r3, 800f5fc <__swsetup_r+0x14>
 800f5f8:	f7fc fe50 	bl	800c29c <__sinit>
 800f5fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f600:	0719      	lsls	r1, r3, #28
 800f602:	d422      	bmi.n	800f64a <__swsetup_r+0x62>
 800f604:	06da      	lsls	r2, r3, #27
 800f606:	d407      	bmi.n	800f618 <__swsetup_r+0x30>
 800f608:	2209      	movs	r2, #9
 800f60a:	602a      	str	r2, [r5, #0]
 800f60c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f610:	81a3      	strh	r3, [r4, #12]
 800f612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f616:	e033      	b.n	800f680 <__swsetup_r+0x98>
 800f618:	0758      	lsls	r0, r3, #29
 800f61a:	d512      	bpl.n	800f642 <__swsetup_r+0x5a>
 800f61c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f61e:	b141      	cbz	r1, 800f632 <__swsetup_r+0x4a>
 800f620:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f624:	4299      	cmp	r1, r3
 800f626:	d002      	beq.n	800f62e <__swsetup_r+0x46>
 800f628:	4628      	mov	r0, r5
 800f62a:	f7fe fb93 	bl	800dd54 <_free_r>
 800f62e:	2300      	movs	r3, #0
 800f630:	6363      	str	r3, [r4, #52]	@ 0x34
 800f632:	89a3      	ldrh	r3, [r4, #12]
 800f634:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f638:	81a3      	strh	r3, [r4, #12]
 800f63a:	2300      	movs	r3, #0
 800f63c:	6063      	str	r3, [r4, #4]
 800f63e:	6923      	ldr	r3, [r4, #16]
 800f640:	6023      	str	r3, [r4, #0]
 800f642:	89a3      	ldrh	r3, [r4, #12]
 800f644:	f043 0308 	orr.w	r3, r3, #8
 800f648:	81a3      	strh	r3, [r4, #12]
 800f64a:	6923      	ldr	r3, [r4, #16]
 800f64c:	b94b      	cbnz	r3, 800f662 <__swsetup_r+0x7a>
 800f64e:	89a3      	ldrh	r3, [r4, #12]
 800f650:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f658:	d003      	beq.n	800f662 <__swsetup_r+0x7a>
 800f65a:	4621      	mov	r1, r4
 800f65c:	4628      	mov	r0, r5
 800f65e:	f000 f84c 	bl	800f6fa <__smakebuf_r>
 800f662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f666:	f013 0201 	ands.w	r2, r3, #1
 800f66a:	d00a      	beq.n	800f682 <__swsetup_r+0x9a>
 800f66c:	2200      	movs	r2, #0
 800f66e:	60a2      	str	r2, [r4, #8]
 800f670:	6962      	ldr	r2, [r4, #20]
 800f672:	4252      	negs	r2, r2
 800f674:	61a2      	str	r2, [r4, #24]
 800f676:	6922      	ldr	r2, [r4, #16]
 800f678:	b942      	cbnz	r2, 800f68c <__swsetup_r+0xa4>
 800f67a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f67e:	d1c5      	bne.n	800f60c <__swsetup_r+0x24>
 800f680:	bd38      	pop	{r3, r4, r5, pc}
 800f682:	0799      	lsls	r1, r3, #30
 800f684:	bf58      	it	pl
 800f686:	6962      	ldrpl	r2, [r4, #20]
 800f688:	60a2      	str	r2, [r4, #8]
 800f68a:	e7f4      	b.n	800f676 <__swsetup_r+0x8e>
 800f68c:	2000      	movs	r0, #0
 800f68e:	e7f7      	b.n	800f680 <__swsetup_r+0x98>
 800f690:	20000200 	.word	0x20000200

0800f694 <__ascii_wctomb>:
 800f694:	4603      	mov	r3, r0
 800f696:	4608      	mov	r0, r1
 800f698:	b141      	cbz	r1, 800f6ac <__ascii_wctomb+0x18>
 800f69a:	2aff      	cmp	r2, #255	@ 0xff
 800f69c:	d904      	bls.n	800f6a8 <__ascii_wctomb+0x14>
 800f69e:	228a      	movs	r2, #138	@ 0x8a
 800f6a0:	601a      	str	r2, [r3, #0]
 800f6a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6a6:	4770      	bx	lr
 800f6a8:	700a      	strb	r2, [r1, #0]
 800f6aa:	2001      	movs	r0, #1
 800f6ac:	4770      	bx	lr

0800f6ae <__swhatbuf_r>:
 800f6ae:	b570      	push	{r4, r5, r6, lr}
 800f6b0:	460c      	mov	r4, r1
 800f6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6b6:	2900      	cmp	r1, #0
 800f6b8:	b096      	sub	sp, #88	@ 0x58
 800f6ba:	4615      	mov	r5, r2
 800f6bc:	461e      	mov	r6, r3
 800f6be:	da0d      	bge.n	800f6dc <__swhatbuf_r+0x2e>
 800f6c0:	89a3      	ldrh	r3, [r4, #12]
 800f6c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f6c6:	f04f 0100 	mov.w	r1, #0
 800f6ca:	bf14      	ite	ne
 800f6cc:	2340      	movne	r3, #64	@ 0x40
 800f6ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	6031      	str	r1, [r6, #0]
 800f6d6:	602b      	str	r3, [r5, #0]
 800f6d8:	b016      	add	sp, #88	@ 0x58
 800f6da:	bd70      	pop	{r4, r5, r6, pc}
 800f6dc:	466a      	mov	r2, sp
 800f6de:	f000 f8a7 	bl	800f830 <_fstat_r>
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	dbec      	blt.n	800f6c0 <__swhatbuf_r+0x12>
 800f6e6:	9901      	ldr	r1, [sp, #4]
 800f6e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f6ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f6f0:	4259      	negs	r1, r3
 800f6f2:	4159      	adcs	r1, r3
 800f6f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f6f8:	e7eb      	b.n	800f6d2 <__swhatbuf_r+0x24>

0800f6fa <__smakebuf_r>:
 800f6fa:	898b      	ldrh	r3, [r1, #12]
 800f6fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6fe:	079d      	lsls	r5, r3, #30
 800f700:	4606      	mov	r6, r0
 800f702:	460c      	mov	r4, r1
 800f704:	d507      	bpl.n	800f716 <__smakebuf_r+0x1c>
 800f706:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f70a:	6023      	str	r3, [r4, #0]
 800f70c:	6123      	str	r3, [r4, #16]
 800f70e:	2301      	movs	r3, #1
 800f710:	6163      	str	r3, [r4, #20]
 800f712:	b003      	add	sp, #12
 800f714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f716:	ab01      	add	r3, sp, #4
 800f718:	466a      	mov	r2, sp
 800f71a:	f7ff ffc8 	bl	800f6ae <__swhatbuf_r>
 800f71e:	9f00      	ldr	r7, [sp, #0]
 800f720:	4605      	mov	r5, r0
 800f722:	4639      	mov	r1, r7
 800f724:	4630      	mov	r0, r6
 800f726:	f7fc f847 	bl	800b7b8 <_malloc_r>
 800f72a:	b948      	cbnz	r0, 800f740 <__smakebuf_r+0x46>
 800f72c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f730:	059a      	lsls	r2, r3, #22
 800f732:	d4ee      	bmi.n	800f712 <__smakebuf_r+0x18>
 800f734:	f023 0303 	bic.w	r3, r3, #3
 800f738:	f043 0302 	orr.w	r3, r3, #2
 800f73c:	81a3      	strh	r3, [r4, #12]
 800f73e:	e7e2      	b.n	800f706 <__smakebuf_r+0xc>
 800f740:	89a3      	ldrh	r3, [r4, #12]
 800f742:	6020      	str	r0, [r4, #0]
 800f744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f748:	81a3      	strh	r3, [r4, #12]
 800f74a:	9b01      	ldr	r3, [sp, #4]
 800f74c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f750:	b15b      	cbz	r3, 800f76a <__smakebuf_r+0x70>
 800f752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f756:	4630      	mov	r0, r6
 800f758:	f000 f87c 	bl	800f854 <_isatty_r>
 800f75c:	b128      	cbz	r0, 800f76a <__smakebuf_r+0x70>
 800f75e:	89a3      	ldrh	r3, [r4, #12]
 800f760:	f023 0303 	bic.w	r3, r3, #3
 800f764:	f043 0301 	orr.w	r3, r3, #1
 800f768:	81a3      	strh	r3, [r4, #12]
 800f76a:	89a3      	ldrh	r3, [r4, #12]
 800f76c:	431d      	orrs	r5, r3
 800f76e:	81a5      	strh	r5, [r4, #12]
 800f770:	e7cf      	b.n	800f712 <__smakebuf_r+0x18>

0800f772 <_putc_r>:
 800f772:	b570      	push	{r4, r5, r6, lr}
 800f774:	460d      	mov	r5, r1
 800f776:	4614      	mov	r4, r2
 800f778:	4606      	mov	r6, r0
 800f77a:	b118      	cbz	r0, 800f784 <_putc_r+0x12>
 800f77c:	6a03      	ldr	r3, [r0, #32]
 800f77e:	b90b      	cbnz	r3, 800f784 <_putc_r+0x12>
 800f780:	f7fc fd8c 	bl	800c29c <__sinit>
 800f784:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f786:	07d8      	lsls	r0, r3, #31
 800f788:	d405      	bmi.n	800f796 <_putc_r+0x24>
 800f78a:	89a3      	ldrh	r3, [r4, #12]
 800f78c:	0599      	lsls	r1, r3, #22
 800f78e:	d402      	bmi.n	800f796 <_putc_r+0x24>
 800f790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f792:	f7fd fcbc 	bl	800d10e <__retarget_lock_acquire_recursive>
 800f796:	68a3      	ldr	r3, [r4, #8]
 800f798:	3b01      	subs	r3, #1
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	60a3      	str	r3, [r4, #8]
 800f79e:	da05      	bge.n	800f7ac <_putc_r+0x3a>
 800f7a0:	69a2      	ldr	r2, [r4, #24]
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	db12      	blt.n	800f7cc <_putc_r+0x5a>
 800f7a6:	b2eb      	uxtb	r3, r5
 800f7a8:	2b0a      	cmp	r3, #10
 800f7aa:	d00f      	beq.n	800f7cc <_putc_r+0x5a>
 800f7ac:	6823      	ldr	r3, [r4, #0]
 800f7ae:	1c5a      	adds	r2, r3, #1
 800f7b0:	6022      	str	r2, [r4, #0]
 800f7b2:	701d      	strb	r5, [r3, #0]
 800f7b4:	b2ed      	uxtb	r5, r5
 800f7b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7b8:	07da      	lsls	r2, r3, #31
 800f7ba:	d405      	bmi.n	800f7c8 <_putc_r+0x56>
 800f7bc:	89a3      	ldrh	r3, [r4, #12]
 800f7be:	059b      	lsls	r3, r3, #22
 800f7c0:	d402      	bmi.n	800f7c8 <_putc_r+0x56>
 800f7c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7c4:	f7fd fca4 	bl	800d110 <__retarget_lock_release_recursive>
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	bd70      	pop	{r4, r5, r6, pc}
 800f7cc:	4629      	mov	r1, r5
 800f7ce:	4622      	mov	r2, r4
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	f7ff fecb 	bl	800f56c <__swbuf_r>
 800f7d6:	4605      	mov	r5, r0
 800f7d8:	e7ed      	b.n	800f7b6 <_putc_r+0x44>

0800f7da <memmove>:
 800f7da:	4288      	cmp	r0, r1
 800f7dc:	b510      	push	{r4, lr}
 800f7de:	eb01 0402 	add.w	r4, r1, r2
 800f7e2:	d902      	bls.n	800f7ea <memmove+0x10>
 800f7e4:	4284      	cmp	r4, r0
 800f7e6:	4623      	mov	r3, r4
 800f7e8:	d807      	bhi.n	800f7fa <memmove+0x20>
 800f7ea:	1e43      	subs	r3, r0, #1
 800f7ec:	42a1      	cmp	r1, r4
 800f7ee:	d008      	beq.n	800f802 <memmove+0x28>
 800f7f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7f8:	e7f8      	b.n	800f7ec <memmove+0x12>
 800f7fa:	4402      	add	r2, r0
 800f7fc:	4601      	mov	r1, r0
 800f7fe:	428a      	cmp	r2, r1
 800f800:	d100      	bne.n	800f804 <memmove+0x2a>
 800f802:	bd10      	pop	{r4, pc}
 800f804:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f808:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f80c:	e7f7      	b.n	800f7fe <memmove+0x24>
	...

0800f810 <_close_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	4d06      	ldr	r5, [pc, #24]	@ (800f82c <_close_r+0x1c>)
 800f814:	2300      	movs	r3, #0
 800f816:	4604      	mov	r4, r0
 800f818:	4608      	mov	r0, r1
 800f81a:	602b      	str	r3, [r5, #0]
 800f81c:	f7f2 fb70 	bl	8001f00 <_close>
 800f820:	1c43      	adds	r3, r0, #1
 800f822:	d102      	bne.n	800f82a <_close_r+0x1a>
 800f824:	682b      	ldr	r3, [r5, #0]
 800f826:	b103      	cbz	r3, 800f82a <_close_r+0x1a>
 800f828:	6023      	str	r3, [r4, #0]
 800f82a:	bd38      	pop	{r3, r4, r5, pc}
 800f82c:	200007d0 	.word	0x200007d0

0800f830 <_fstat_r>:
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	4d07      	ldr	r5, [pc, #28]	@ (800f850 <_fstat_r+0x20>)
 800f834:	2300      	movs	r3, #0
 800f836:	4604      	mov	r4, r0
 800f838:	4608      	mov	r0, r1
 800f83a:	4611      	mov	r1, r2
 800f83c:	602b      	str	r3, [r5, #0]
 800f83e:	f7f2 fb6b 	bl	8001f18 <_fstat>
 800f842:	1c43      	adds	r3, r0, #1
 800f844:	d102      	bne.n	800f84c <_fstat_r+0x1c>
 800f846:	682b      	ldr	r3, [r5, #0]
 800f848:	b103      	cbz	r3, 800f84c <_fstat_r+0x1c>
 800f84a:	6023      	str	r3, [r4, #0]
 800f84c:	bd38      	pop	{r3, r4, r5, pc}
 800f84e:	bf00      	nop
 800f850:	200007d0 	.word	0x200007d0

0800f854 <_isatty_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	4d06      	ldr	r5, [pc, #24]	@ (800f870 <_isatty_r+0x1c>)
 800f858:	2300      	movs	r3, #0
 800f85a:	4604      	mov	r4, r0
 800f85c:	4608      	mov	r0, r1
 800f85e:	602b      	str	r3, [r5, #0]
 800f860:	f7f2 fb6a 	bl	8001f38 <_isatty>
 800f864:	1c43      	adds	r3, r0, #1
 800f866:	d102      	bne.n	800f86e <_isatty_r+0x1a>
 800f868:	682b      	ldr	r3, [r5, #0]
 800f86a:	b103      	cbz	r3, 800f86e <_isatty_r+0x1a>
 800f86c:	6023      	str	r3, [r4, #0]
 800f86e:	bd38      	pop	{r3, r4, r5, pc}
 800f870:	200007d0 	.word	0x200007d0

0800f874 <_lseek_r>:
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4d07      	ldr	r5, [pc, #28]	@ (800f894 <_lseek_r+0x20>)
 800f878:	4604      	mov	r4, r0
 800f87a:	4608      	mov	r0, r1
 800f87c:	4611      	mov	r1, r2
 800f87e:	2200      	movs	r2, #0
 800f880:	602a      	str	r2, [r5, #0]
 800f882:	461a      	mov	r2, r3
 800f884:	f7f2 fb63 	bl	8001f4e <_lseek>
 800f888:	1c43      	adds	r3, r0, #1
 800f88a:	d102      	bne.n	800f892 <_lseek_r+0x1e>
 800f88c:	682b      	ldr	r3, [r5, #0]
 800f88e:	b103      	cbz	r3, 800f892 <_lseek_r+0x1e>
 800f890:	6023      	str	r3, [r4, #0]
 800f892:	bd38      	pop	{r3, r4, r5, pc}
 800f894:	200007d0 	.word	0x200007d0

0800f898 <_read_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4d07      	ldr	r5, [pc, #28]	@ (800f8b8 <_read_r+0x20>)
 800f89c:	4604      	mov	r4, r0
 800f89e:	4608      	mov	r0, r1
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	602a      	str	r2, [r5, #0]
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	f7f2 faf1 	bl	8001e8e <_read>
 800f8ac:	1c43      	adds	r3, r0, #1
 800f8ae:	d102      	bne.n	800f8b6 <_read_r+0x1e>
 800f8b0:	682b      	ldr	r3, [r5, #0]
 800f8b2:	b103      	cbz	r3, 800f8b6 <_read_r+0x1e>
 800f8b4:	6023      	str	r3, [r4, #0]
 800f8b6:	bd38      	pop	{r3, r4, r5, pc}
 800f8b8:	200007d0 	.word	0x200007d0

0800f8bc <_write_r>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	4d07      	ldr	r5, [pc, #28]	@ (800f8dc <_write_r+0x20>)
 800f8c0:	4604      	mov	r4, r0
 800f8c2:	4608      	mov	r0, r1
 800f8c4:	4611      	mov	r1, r2
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	602a      	str	r2, [r5, #0]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	f7f2 fafc 	bl	8001ec8 <_write>
 800f8d0:	1c43      	adds	r3, r0, #1
 800f8d2:	d102      	bne.n	800f8da <_write_r+0x1e>
 800f8d4:	682b      	ldr	r3, [r5, #0]
 800f8d6:	b103      	cbz	r3, 800f8da <_write_r+0x1e>
 800f8d8:	6023      	str	r3, [r4, #0]
 800f8da:	bd38      	pop	{r3, r4, r5, pc}
 800f8dc:	200007d0 	.word	0x200007d0

0800f8e0 <abort>:
 800f8e0:	b508      	push	{r3, lr}
 800f8e2:	2006      	movs	r0, #6
 800f8e4:	f000 f848 	bl	800f978 <raise>
 800f8e8:	2001      	movs	r0, #1
 800f8ea:	f7f2 fac5 	bl	8001e78 <_exit>

0800f8ee <_calloc_r>:
 800f8ee:	b570      	push	{r4, r5, r6, lr}
 800f8f0:	fba1 5402 	umull	r5, r4, r1, r2
 800f8f4:	b93c      	cbnz	r4, 800f906 <_calloc_r+0x18>
 800f8f6:	4629      	mov	r1, r5
 800f8f8:	f7fb ff5e 	bl	800b7b8 <_malloc_r>
 800f8fc:	4606      	mov	r6, r0
 800f8fe:	b928      	cbnz	r0, 800f90c <_calloc_r+0x1e>
 800f900:	2600      	movs	r6, #0
 800f902:	4630      	mov	r0, r6
 800f904:	bd70      	pop	{r4, r5, r6, pc}
 800f906:	220c      	movs	r2, #12
 800f908:	6002      	str	r2, [r0, #0]
 800f90a:	e7f9      	b.n	800f900 <_calloc_r+0x12>
 800f90c:	462a      	mov	r2, r5
 800f90e:	4621      	mov	r1, r4
 800f910:	f7fd fbb6 	bl	800d080 <memset>
 800f914:	e7f5      	b.n	800f902 <_calloc_r+0x14>

0800f916 <_malloc_usable_size_r>:
 800f916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f91a:	1f18      	subs	r0, r3, #4
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	bfbc      	itt	lt
 800f920:	580b      	ldrlt	r3, [r1, r0]
 800f922:	18c0      	addlt	r0, r0, r3
 800f924:	4770      	bx	lr

0800f926 <_raise_r>:
 800f926:	291f      	cmp	r1, #31
 800f928:	b538      	push	{r3, r4, r5, lr}
 800f92a:	4605      	mov	r5, r0
 800f92c:	460c      	mov	r4, r1
 800f92e:	d904      	bls.n	800f93a <_raise_r+0x14>
 800f930:	2316      	movs	r3, #22
 800f932:	6003      	str	r3, [r0, #0]
 800f934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f938:	bd38      	pop	{r3, r4, r5, pc}
 800f93a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f93c:	b112      	cbz	r2, 800f944 <_raise_r+0x1e>
 800f93e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f942:	b94b      	cbnz	r3, 800f958 <_raise_r+0x32>
 800f944:	4628      	mov	r0, r5
 800f946:	f000 f831 	bl	800f9ac <_getpid_r>
 800f94a:	4622      	mov	r2, r4
 800f94c:	4601      	mov	r1, r0
 800f94e:	4628      	mov	r0, r5
 800f950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f954:	f000 b818 	b.w	800f988 <_kill_r>
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d00a      	beq.n	800f972 <_raise_r+0x4c>
 800f95c:	1c59      	adds	r1, r3, #1
 800f95e:	d103      	bne.n	800f968 <_raise_r+0x42>
 800f960:	2316      	movs	r3, #22
 800f962:	6003      	str	r3, [r0, #0]
 800f964:	2001      	movs	r0, #1
 800f966:	e7e7      	b.n	800f938 <_raise_r+0x12>
 800f968:	2100      	movs	r1, #0
 800f96a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f96e:	4620      	mov	r0, r4
 800f970:	4798      	blx	r3
 800f972:	2000      	movs	r0, #0
 800f974:	e7e0      	b.n	800f938 <_raise_r+0x12>
	...

0800f978 <raise>:
 800f978:	4b02      	ldr	r3, [pc, #8]	@ (800f984 <raise+0xc>)
 800f97a:	4601      	mov	r1, r0
 800f97c:	6818      	ldr	r0, [r3, #0]
 800f97e:	f7ff bfd2 	b.w	800f926 <_raise_r>
 800f982:	bf00      	nop
 800f984:	20000200 	.word	0x20000200

0800f988 <_kill_r>:
 800f988:	b538      	push	{r3, r4, r5, lr}
 800f98a:	4d07      	ldr	r5, [pc, #28]	@ (800f9a8 <_kill_r+0x20>)
 800f98c:	2300      	movs	r3, #0
 800f98e:	4604      	mov	r4, r0
 800f990:	4608      	mov	r0, r1
 800f992:	4611      	mov	r1, r2
 800f994:	602b      	str	r3, [r5, #0]
 800f996:	f7f2 fa5f 	bl	8001e58 <_kill>
 800f99a:	1c43      	adds	r3, r0, #1
 800f99c:	d102      	bne.n	800f9a4 <_kill_r+0x1c>
 800f99e:	682b      	ldr	r3, [r5, #0]
 800f9a0:	b103      	cbz	r3, 800f9a4 <_kill_r+0x1c>
 800f9a2:	6023      	str	r3, [r4, #0]
 800f9a4:	bd38      	pop	{r3, r4, r5, pc}
 800f9a6:	bf00      	nop
 800f9a8:	200007d0 	.word	0x200007d0

0800f9ac <_getpid_r>:
 800f9ac:	f7f2 ba4c 	b.w	8001e48 <_getpid>

0800f9b0 <_init>:
 800f9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b2:	bf00      	nop
 800f9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9b6:	bc08      	pop	{r3}
 800f9b8:	469e      	mov	lr, r3
 800f9ba:	4770      	bx	lr

0800f9bc <_fini>:
 800f9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9be:	bf00      	nop
 800f9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9c2:	bc08      	pop	{r3}
 800f9c4:	469e      	mov	lr, r3
 800f9c6:	4770      	bx	lr
